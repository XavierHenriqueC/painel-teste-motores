CCS PCH C Compiler, Version 4.135, 38112               29-mai-20 20:45

               Filename: C:\Users\Henrique\Desktop\Projeto painel de teste\Firmware\PIC18F452\Painel_testes.lst

               ROM used: 16318 bytes (50%)
                         Largest free fragment is 16450
               RAM used: 1137 (74%) at main() level
                         1481 (96%) worst case
               Stack:    5 locations

*
0000:  GOTO   3ADA
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... //Painel de testes de motores AC com sensores de corrente e tensão. Programado por: Henrique Xavier                                                                        // 
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F452.H> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay (clock=16000000) 
*
037C:  MOVLW  05
037E:  MOVWF  FEA
0380:  MOVLW  A3
0382:  MOVWF  FE9
0384:  MOVF   FEF,W
0386:  BZ    03A4
0388:  MOVLW  05
038A:  MOVWF  01
038C:  CLRF   00
038E:  DECFSZ 00,F
0390:  BRA    038E
0392:  DECFSZ 01,F
0394:  BRA    038C
0396:  MOVLW  2E
0398:  MOVWF  00
039A:  DECFSZ 00,F
039C:  BRA    039A
039E:  BRA    03A0
03A0:  DECFSZ FEF,F
03A2:  BRA    0388
03A4:  RETURN 0
.................... #fuses HS, NOWDT, PUT, NOBROWNOUT, NOLVP, PROTECT 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C2,rcv=PIN_C7,bits=8)// Pino RC2 é Tx e o Pino Rx é o Pino RC7 
....................  
.................... #define mode_4_bit       //GLCD Operando em 4 bits 
.................... #include <st7920.c>      //Biblioteca do GLCD 128x64 
....................  
.................... /*************************************************************************** 
.................... *                DRIVE PARA LCD GRAFICO 128X64 CHIP ST7920                 * 
.................... *   COMANDOS                                                               * 
.................... *   #define mode_8_bit user lcd mode 8 bit 
.................... *   #define mode_4_bit user lcd mode 4 bit 
.................... *   glcd_readByte()//LER DADOS DO LCD                                      * 
.................... *   glcd_check_busy()//VERIFICA SE LCD ESTA OCUPADO                        *                              * 
.................... *   glcd_instruction(instruções)//SETA INTRUÇÕES                           * 
.................... *   glcd_data(dados)//ENVIA DADOS PARA LCD                                 * 
.................... *   glcd_init_basic()//INICIA LCD  COMO MODO BASICO                        * 
.................... *   glcd_update()//ATUALIZA LCD                                            * 
.................... *   glcd_init_graph()//INICIA LCD MODO GRAFICO                             * 
.................... *   glcd_pixel( x,  y, color)//CONTROLE DE PIXEL                           * 
.................... *   glcd_fillScreen(on)//ENVIO NIVEL 1 PARA TODOS OS PIXEL DO LCD          * 
.................... *   glcd_fillScreen(off)//ENVIA NIVEL 0 PARA TODOS OS PIXEL DO LCD         * 
.................... *   glcd_plot_image(imagem,largura,altura,coluna,linha,cor) carrega imagem * 
.................... *                                                                          *                  
.................... *   PINAGEM DO LCD                                                         * 
.................... *   Pin 1 ------------> Gnd                                                *    
.................... *   Pin 2 ------------> +5volts                                            * 
.................... *   Pin 3 ------------> Contrast                                           * 
.................... *   Pin 4 ------------> Register Select                                    * 
.................... *   Pin 5 ------------> Read/Write                                         * 
.................... *   Pin 6 ------------> Enable                                             * 
.................... *   Pin 7-14 ---------> Data bits                                          * 
.................... *   Pin 15 -----------> PSB (parallel=high & serial=low)                   * 
.................... *   Pin 16 -----------> NoConnection                                       * 
.................... *   Pin 17 -----------> Reset                                              * 
.................... *   Pin 18 -----------> Vout                                               * 
.................... *   Pin 19 -----------> +5volts                                            * 
.................... *   Pin 20 -----------> Gnd                                                * 
.................... *                                                                          *  
.................... ***************************************************************************/ 
.................... //DEFINIÇÃO DE PINOS 
.................... //PIN DEFINITION 
.................... #define  RS        PIN_B2                    //COMMNAD/DATA SELECT 
.................... #define  RW        PIN_B3                    //READ/WRITE SELECT              
.................... #define  E         PIN_B4                    //ENABLE SIGNAL                  
.................... #define  RST       PIN_B5                    //RESET SIGNAL  
....................  
.................... #if defined(mode_8_bit)// define pin lcd 8 bit 
.................... #define  D0        PIN_D0 
.................... #define  D1        PIN_D1 
.................... #define  D2        PIN_D2 
.................... #define  D3        PIN_D3 
.................... #define  D4        PIN_D4 
.................... #define  D5        PIN_D5 
.................... #define  D6        PIN_D6 
.................... #define  D7        PIN_D7 
.................... #define mode       0x10 
.................... #endif 
....................  
.................... #if defined(mode_4_bit)// define pin lcd 4 bit 
.................... #define  D4        PIN_D4 
.................... #define  D5        PIN_D5 
.................... #define  D6        PIN_D6 
.................... #define  D7        PIN_D7 
.................... #define mode       0x00  
.................... #endif 
....................  
.................... #define  set_lcd_bit  0x20 | (mode) //mode 4 bit 
.................... #define  ext_instru   0x24 | (mode) //Select extended instruction set 
.................... #define  graphic_on   0x26 | (mode) // Graphic display ON.  
.................... #define  set_lcd_on   0x0C //display on cursor off and char blink off 
.................... #define  set_mode_lcd 0x06 //entry mode set 
.................... #define  clear_lcd    0x01 //display clear 
....................  
.................... #define  DADOS_IN  INPUT_D() 
.................... #define  BUSY_IN   PIN_D7 
.................... #define  ON   1 
.................... #define  OFF   0 
.................... //LCD GRAPHICO 128X64 
.................... #define  YVAL 64 // DEFINE 64 LINHAS 
.................... #define  XVAL 8 // DEFINE COLUNAS 8X16=128 COLUNAS 
....................  
.................... #define GLCD_WIDTH   128 //DEFINE 128 COLUNAS  
....................  
.................... typedef union 
.................... { 
....................   int16 word; 
....................   int8 nbyte[2]; 
.................... } Dots; 
....................  
.................... typedef struct 
.................... { 
....................   int1 refresh; 
....................   Dots pix[YVAL][XVAL];   // Max dimensions for display (x,y) = (128,32) 
....................   } GD_RAM;             //  (0,0) corresponds to upper lefthand corner. 
....................  
.................... GD_RAM gdram; 
....................  
....................  
.................... unsigned int8 glcd_readByte (unsigned int1 address)//LER BYTE DO LCD 
.................... { 
....................   unsigned int8 data;   // Stores the data read from the LCD 
....................   if(address==1) 
....................   { 
....................      output_high(rs); 
....................   } 
....................   if(address==0) 
....................   { 
....................      output_low(rs); 
....................   } 
....................   output_high(rw);//GLCD_RW = RW_READ;      // Set for reading 
....................   output_high(e);//GLCD_E = 1;      // Pulse the enable pin 
....................   delay_us(1); 
....................   data=DADOS_IN;      // Get the data from the display's output register 
....................   output_low(e);//GLCD_E = 0; 
....................   return (data); 
.................... } 
....................  
....................   
.................... void glcd_check_busy()//VERIFICA SE LCD ESTA OCUPADO 
.................... { 
03A6:  MOVLB  5
03A8:  BSF    xA9.0
....................    int1 busy=1; 
....................    output_low(rs);      // LOW RS and High RW will put the lcd to 
03AA:  BCF    F93.2
03AC:  BCF    F8A.2
....................    output_high(rw);      // read busy flag and address counter 
03AE:  BCF    F93.3
03B0:  BSF    F8A.3
....................    while(busy) 
....................    {         // will cycle until busy flag is 0 
03B2:  BTFSS  xA9.0
03B4:  BRA    03C8
....................       output_high(e); 
03B6:  BCF    F93.4
03B8:  BSF    F8A.4
....................       if(!input(BUSY_IN)) 
03BA:  BSF    F95.7
03BC:  BTFSC  F83.7
03BE:  BRA    03C2
....................       { 
....................          busy=0; 
03C0:  BCF    xA9.0
....................       } 
....................       output_low(e); 
03C2:  BCF    F93.4
03C4:  BCF    F8A.4
....................    } 
03C6:  BRA    03B2
.................... } 
03C8:  MOVLB  0
03CA:  RETURN 0
....................   
.................... void glcd_instruction(unsigned char x)//ENVIA INSTRUÇÕES PARA LCD 
.................... { 
....................   #if defined(mode_8_bit)// 8 bit mode 
....................    glcd_check_busy();      //must be satisfied before sending instruction 
....................    output_low(rs);      // LOW RS and LOW RW will put the lcd to 
....................    output_low(rw);      // Write instruction mode    
....................    Delay_us(5);  //Delay 
....................    output_bit(D7,bit_test(x,7)); //send data bit 7 pin D7 
....................    output_bit(D6,bit_test(x,6)); //send data bit 6 pin D6 
....................    output_bit(D5,bit_test(x,5)); //send data bit 5 pin D5 
....................    output_bit(D4,bit_test(x,4)); //send data bit 4 pin D4 
....................    output_bit(D3,bit_test(x,3)); //send data bit 3 pin D3  
....................    output_bit(D2,bit_test(x,2)); //send data bit 2 pin D2 
....................    output_bit(D1,bit_test(x,1)); //send data bit 1 pin D1 
....................    output_bit(D0,bit_test(x,0)); //send data bit 0 pin D0 
....................    Delay_us(10); 
....................    output_high(e);//anable 
....................    Delay_us(20); 
....................    output_low(e);// disable        
....................    #endif 
....................  #if defined(mode_4_bit) // 4 bit mode 
....................    glcd_check_busy();      //must be satisfied before sending instruction 
03CC:  RCALL  03A6
....................    output_low(rs);      // LOW RS and LOW RW will put the lcd to 
03CE:  BCF    F93.2
03D0:  BCF    F8A.2
....................    output_low(rw);      // Write instruction mode    
03D2:  BCF    F93.3
03D4:  BCF    F8A.3
....................    Delay_us(5);//Delay 
03D6:  MOVLW  06
03D8:  MOVWF  00
03DA:  DECFSZ 00,F
03DC:  BRA    03DA
03DE:  NOP   
....................    output_bit(D7,bit_test(x,7));  
03E0:  MOVLB  5
03E2:  BTFSC  xA6.7
03E4:  BRA    03EA
03E6:  BCF    F8C.7
03E8:  BRA    03EC
03EA:  BSF    F8C.7
03EC:  BCF    F95.7
....................    output_bit(D6,bit_test(x,6)); 
03EE:  BTFSC  xA6.6
03F0:  BRA    03F6
03F2:  BCF    F8C.6
03F4:  BRA    03F8
03F6:  BSF    F8C.6
03F8:  BCF    F95.6
....................    output_bit(D5,bit_test(x,5)); 
03FA:  BTFSC  xA6.5
03FC:  BRA    0402
03FE:  BCF    F8C.5
0400:  BRA    0404
0402:  BSF    F8C.5
0404:  BCF    F95.5
....................    output_bit(D4,bit_test(x,4)); 
0406:  BTFSC  xA6.4
0408:  BRA    040E
040A:  BCF    F8C.4
040C:  BRA    0410
040E:  BSF    F8C.4
0410:  BCF    F95.4
....................    Delay_us(5); 
0412:  MOVLW  06
0414:  MOVWF  00
0416:  DECFSZ 00,F
0418:  BRA    0416
041A:  NOP   
....................    output_high(e); //enable 
041C:  BCF    F93.4
041E:  BSF    F8A.4
....................    Delay_us(5); 
0420:  MOVLW  06
0422:  MOVWF  00
0424:  DECFSZ 00,F
0426:  BRA    0424
0428:  NOP   
....................    output_low(e); //disable 
042A:  BCF    F93.4
042C:  BCF    F8A.4
....................    Delay_us(5); 
042E:  MOVLW  06
0430:  MOVWF  00
0432:  DECFSZ 00,F
0434:  BRA    0432
0436:  NOP   
....................    output_bit(D7,bit_test(x,3));//send data low bit 3 pin D7  
0438:  BTFSC  xA6.3
043A:  BRA    0440
043C:  BCF    F8C.7
043E:  BRA    0442
0440:  BSF    F8C.7
0442:  BCF    F95.7
....................    output_bit(D6,bit_test(x,2));//send data low bit 2 pin D6 
0444:  BTFSC  xA6.2
0446:  BRA    044C
0448:  BCF    F8C.6
044A:  BRA    044E
044C:  BSF    F8C.6
044E:  BCF    F95.6
....................    output_bit(D5,bit_test(x,1));//send data low bit 1 pin D5 
0450:  BTFSC  xA6.1
0452:  BRA    0458
0454:  BCF    F8C.5
0456:  BRA    045A
0458:  BSF    F8C.5
045A:  BCF    F95.5
....................    output_bit(D4,bit_test(x,0));//send data low bit 0 pin D4 
045C:  BTFSC  xA6.0
045E:  BRA    0464
0460:  BCF    F8C.4
0462:  BRA    0466
0464:  BSF    F8C.4
0466:  BCF    F95.4
....................    Delay_us(5); 
0468:  MOVLW  06
046A:  MOVWF  00
046C:  DECFSZ 00,F
046E:  BRA    046C
0470:  NOP   
....................    output_high(e); 
0472:  BCF    F93.4
0474:  BSF    F8A.4
....................    Delay_us(5); 
0476:  MOVLW  06
0478:  MOVWF  00
047A:  DECFSZ 00,F
047C:  BRA    047A
047E:  NOP   
....................    output_low(e); // disable  
0480:  BCF    F93.4
0482:  BCF    F8A.4
....................    #endif 
....................  
.................... } 
0484:  MOVLB  0
0486:  RETURN 0
.................... void glcd_data(unsigned char x)//ENVIA DADOS PARA LCD 
.................... { 
....................   #if defined(mode_8_bit) // 8 bit mode 
....................    glcd_check_busy(); 
....................    output_high(rs);      // HIGH RS and LOW RW will put the lcd to 
....................    output_low(rw);      // Write data register mode 
....................    Delay_us(5); 
....................    output_bit(D7,bit_test(x,7)); //send data bit 7 pin D7 
....................    output_bit(D6,bit_test(x,6)); //send data bit 6 pin D6 
....................    output_bit(D5,bit_test(x,5)); //send data bit 5 pin D5 
....................    output_bit(D4,bit_test(x,4)); //send data bit 4 pin D4 
....................    output_bit(D3,bit_test(x,3)); //send data bit 3 pin D3  
....................    output_bit(D2,bit_test(x,2)); //send data bit 2 pin D2 
....................    output_bit(D1,bit_test(x,1)); //send data bit 1 pin D1 
....................    output_bit(D0,bit_test(x,0)); //send data bit 0 pin D0 
....................    Delay_us(10); 
....................    output_high(e); 
....................    Delay_us(20); 
....................    output_low(e); // disable 
....................    #endif 
....................     
....................    #if defined(mode_4_bit) // 4 bit mode 
....................    glcd_check_busy();  
*
052A:  RCALL  03A6
....................    output_high(rs);      // HIGH RS and LOW RW will put the lcd to 
052C:  BCF    F93.2
052E:  BSF    F8A.2
....................    output_low(rw);      // Write data register mode    
0530:  BCF    F93.3
0532:  BCF    F8A.3
....................    Delay_us(5); 
0534:  MOVLW  06
0536:  MOVWF  00
0538:  DECFSZ 00,F
053A:  BRA    0538
053C:  NOP   
....................    output_bit(D7,bit_test(x,7));//send data high bit 7 pin D7  
053E:  MOVLB  5
0540:  BTFSC  xA8.7
0542:  BRA    0548
0544:  BCF    F8C.7
0546:  BRA    054A
0548:  BSF    F8C.7
054A:  BCF    F95.7
....................    output_bit(D6,bit_test(x,6));//send data high bit 6 pin D6 
054C:  BTFSC  xA8.6
054E:  BRA    0554
0550:  BCF    F8C.6
0552:  BRA    0556
0554:  BSF    F8C.6
0556:  BCF    F95.6
....................    output_bit(D5,bit_test(x,5));//send data high bit 5 pin D5 
0558:  BTFSC  xA8.5
055A:  BRA    0560
055C:  BCF    F8C.5
055E:  BRA    0562
0560:  BSF    F8C.5
0562:  BCF    F95.5
....................    output_bit(D4,bit_test(x,4));//send data high bit 4 pin D4 
0564:  BTFSC  xA8.4
0566:  BRA    056C
0568:  BCF    F8C.4
056A:  BRA    056E
056C:  BSF    F8C.4
056E:  BCF    F95.4
....................    Delay_us(5); 
0570:  MOVLW  06
0572:  MOVWF  00
0574:  DECFSZ 00,F
0576:  BRA    0574
0578:  NOP   
....................    output_high(e); 
057A:  BCF    F93.4
057C:  BSF    F8A.4
....................    Delay_us(5); 
057E:  MOVLW  06
0580:  MOVWF  00
0582:  DECFSZ 00,F
0584:  BRA    0582
0586:  NOP   
....................    output_low(e); // disable  
0588:  BCF    F93.4
058A:  BCF    F8A.4
....................    Delay_us(5); 
058C:  MOVLW  06
058E:  MOVWF  00
0590:  DECFSZ 00,F
0592:  BRA    0590
0594:  NOP   
....................    output_bit(D7,bit_test(x,3));//send data low bit 3 pin D7  
0596:  BTFSC  xA8.3
0598:  BRA    059E
059A:  BCF    F8C.7
059C:  BRA    05A0
059E:  BSF    F8C.7
05A0:  BCF    F95.7
....................    output_bit(D6,bit_test(x,2));//send data low bit 2 pin D6 
05A2:  BTFSC  xA8.2
05A4:  BRA    05AA
05A6:  BCF    F8C.6
05A8:  BRA    05AC
05AA:  BSF    F8C.6
05AC:  BCF    F95.6
....................    output_bit(D5,bit_test(x,1));//send data low bit 1 pin D5 
05AE:  BTFSC  xA8.1
05B0:  BRA    05B6
05B2:  BCF    F8C.5
05B4:  BRA    05B8
05B6:  BSF    F8C.5
05B8:  BCF    F95.5
....................    output_bit(D4,bit_test(x,0));//send data low bit 0 pin D4 
05BA:  BTFSC  xA8.0
05BC:  BRA    05C2
05BE:  BCF    F8C.4
05C0:  BRA    05C4
05C2:  BSF    F8C.4
05C4:  BCF    F95.4
....................    Delay_us(5); 
05C6:  MOVLW  06
05C8:  MOVWF  00
05CA:  DECFSZ 00,F
05CC:  BRA    05CA
05CE:  NOP   
....................    output_high(e); 
05D0:  BCF    F93.4
05D2:  BSF    F8A.4
....................    Delay_us(5); 
05D4:  MOVLW  06
05D6:  MOVWF  00
05D8:  DECFSZ 00,F
05DA:  BRA    05D8
05DC:  NOP   
....................    output_low(e); // disable  
05DE:  BCF    F93.4
05E0:  BCF    F8A.4
....................    #endif 
.................... } 
05E2:  MOVLB  0
05E4:  RETURN 0
....................   
.................... void glcd_fillScreen (unsigned int1 color)//GRAVA 1 OU 0 EM TODOS OS PIXEL 
.................... { 
....................   int8 v, h; 
....................   int16 d; 
....................   d = (color == ON ? 0xFFFF : 0x0000); 
*
04AA:  MOVLB  5
04AC:  DECFSZ xA3,W
04AE:  BRA    04B6
04B0:  SETF   03
04B2:  MOVLW  FF
04B4:  BRA    04BA
04B6:  CLRF   03
04B8:  MOVLW  00
04BA:  MOVWF  xA6
04BC:  MOVFF  03,5A7
....................  // d = (color == ON ? 0x0000 : 0xFFFF ); 
....................   for (v=0; v < YVAL; v++)//32 
04C0:  CLRF   xA4
04C2:  MOVF   xA4,W
04C4:  SUBLW  3F
04C6:  BNC   0524
....................   { 
....................     for (h=0; h < XVAL; h++)//16 
04C8:  CLRF   xA5
04CA:  MOVF   xA5,W
04CC:  SUBLW  07
04CE:  BNC   0520
....................     { 
....................       gdram.pix[v][h].word = d; 
04D0:  CLRF   xC5
04D2:  MOVFF  5A4,5C4
04D6:  CLRF   xC7
04D8:  MOVLW  10
04DA:  MOVWF  xC6
04DC:  MOVLB  0
04DE:  RCALL  0488
04E0:  MOVFF  02,03
04E4:  MOVF   01,W
04E6:  ADDLW  01
04E8:  MOVLB  5
04EA:  MOVWF  xA8
04EC:  MOVLW  00
04EE:  ADDWFC 02,W
04F0:  MOVWF  xA9
04F2:  CLRF   03
04F4:  MOVFF  5A5,02
04F8:  BCF    FD8.0
04FA:  RLCF   02,F
04FC:  RLCF   03,F
04FE:  MOVF   02,W
0500:  ADDWF  xA8,F
0502:  MOVF   03,W
0504:  ADDWFC xA9,F
0506:  MOVLW  04
0508:  ADDWF  xA8,W
050A:  MOVWF  FE9
050C:  MOVLW  00
050E:  ADDWFC xA9,W
0510:  MOVWF  FEA
0512:  MOVFF  5A7,FEC
0516:  MOVF   FED,F
0518:  MOVFF  5A6,FEF
....................     } 
051C:  INCF   xA5,F
051E:  BRA    04CA
....................   } 
0520:  INCF   xA4,F
0522:  BRA    04C2
....................   gdram.refresh = TRUE; 
0524:  BSF    04.0
.................... } 
0526:  MOVLB  0
0528:  RETURN 0
....................  
....................  
.................... void glcd_update ()//ATUALIZA LCD 
.................... { 
....................   int8 v, h; 
....................   if (gdram.refresh)//verifica se foi atualizado  
*
05E6:  BTFSS  04.0
05E8:  BRA    06F0
....................   { 
....................     for (v=0; v <YVAL; v++) //64 linhas 
05EA:  MOVLB  5
05EC:  CLRF   xA3
05EE:  MOVF   xA3,W
05F0:  SUBLW  3F
05F2:  BTFSS  FD8.0
05F4:  BRA    06EC
....................     { 
....................       if(v<32) 
05F6:  MOVF   xA3,W
05F8:  SUBLW  1F
05FA:  BNC   0616
....................       { 
....................          glcd_instruction( 0x80 | v);   // Set Vertical Address. 
05FC:  MOVF   xA3,W
05FE:  IORLW  80
0600:  MOVWF  xA5
0602:  MOVWF  xA6
0604:  MOVLB  0
0606:  RCALL  03CC
....................          glcd_instruction( 0x80);   // Set Horizontal Address.            
0608:  MOVLW  80
060A:  MOVLB  5
060C:  MOVWF  xA6
060E:  MOVLB  0
0610:  RCALL  03CC
....................       } 
....................       else 
0612:  BRA    062E
0614:  MOVLB  5
....................       { 
....................          glcd_instruction( 0x80 | (v - 32));   // Set Vertical Address. 
0616:  MOVLW  20
0618:  SUBWF  xA3,W
061A:  IORLW  80
061C:  MOVWF  xA5
061E:  MOVWF  xA6
0620:  MOVLB  0
0622:  RCALL  03CC
....................          glcd_instruction( 0x88);   // Set Horizontal Address.            
0624:  MOVLW  88
0626:  MOVLB  5
0628:  MOVWF  xA6
062A:  MOVLB  0
062C:  RCALL  03CC
....................       } 
....................       for (h=0; h <XVAL; h++) //8x16=128 colunas 
062E:  MOVLB  5
0630:  CLRF   xA4
0632:  MOVF   xA4,W
0634:  SUBLW  07
0636:  BNC   06E8
....................       { 
....................         glcd_data( gdram.pix[v][h].nbyte[1]);   // Write High Byte. 
0638:  CLRF   xC5
063A:  MOVFF  5A3,5C4
063E:  CLRF   xC7
0640:  MOVLW  10
0642:  MOVWF  xC6
0644:  MOVLB  0
0646:  RCALL  0488
0648:  MOVFF  02,03
064C:  MOVF   01,W
064E:  ADDLW  01
0650:  MOVLB  5
0652:  MOVWF  xA5
0654:  MOVLW  00
0656:  ADDWFC 02,W
0658:  MOVWF  xA6
065A:  CLRF   03
065C:  MOVFF  5A4,02
0660:  BCF    FD8.0
0662:  RLCF   02,F
0664:  RLCF   03,F
0666:  MOVF   02,W
0668:  ADDWF  xA5,F
066A:  MOVF   03,W
066C:  ADDWFC xA6,F
066E:  MOVLW  01
0670:  ADDWF  xA5,W
0672:  MOVWF  01
0674:  MOVLW  00
0676:  ADDWFC xA6,W
0678:  MOVWF  03
067A:  MOVF   01,W
067C:  ADDLW  04
067E:  MOVWF  FE9
0680:  MOVLW  00
0682:  ADDWFC 03,W
0684:  MOVWF  FEA
0686:  MOVFF  FEF,5A5
068A:  MOVFF  5A5,5A8
068E:  MOVLB  0
0690:  RCALL  052A
....................         glcd_data( gdram.pix[v][h].nbyte[0]);   // Write Low Byte. 
0692:  MOVLB  5
0694:  CLRF   xC5
0696:  MOVFF  5A3,5C4
069A:  CLRF   xC7
069C:  MOVLW  10
069E:  MOVWF  xC6
06A0:  MOVLB  0
06A2:  RCALL  0488
06A4:  MOVFF  02,03
06A8:  MOVF   01,W
06AA:  ADDLW  01
06AC:  MOVLB  5
06AE:  MOVWF  xA5
06B0:  MOVLW  00
06B2:  ADDWFC 02,W
06B4:  MOVWF  xA6
06B6:  CLRF   03
06B8:  MOVFF  5A4,02
06BC:  BCF    FD8.0
06BE:  RLCF   02,F
06C0:  RLCF   03,F
06C2:  MOVF   02,W
06C4:  ADDWF  xA5,F
06C6:  MOVF   03,W
06C8:  ADDWFC xA6,F
06CA:  MOVLW  04
06CC:  ADDWF  xA5,W
06CE:  MOVWF  FE9
06D0:  MOVLW  00
06D2:  ADDWFC xA6,W
06D4:  MOVWF  FEA
06D6:  MOVFF  FEF,5A7
06DA:  MOVFF  5A7,5A8
06DE:  MOVLB  0
06E0:  RCALL  052A
....................       } 
06E2:  MOVLB  5
06E4:  INCF   xA4,F
06E6:  BRA    0632
....................     } 
06E8:  INCF   xA3,F
06EA:  BRA    05EE
....................     gdram.refresh = FALSE; 
06EC:  BCF    04.0
06EE:  MOVLB  0
....................   } 
.................... } 
06F0:  RETURN 0
....................  
....................  
....................  
.................... void glcd_init_graph()//INICIA EM MODO GRAPHICO 
.................... { 
....................    delay_ms(40); 
06F2:  MOVLW  28
06F4:  MOVLB  5
06F6:  MOVWF  xA3
06F8:  MOVLB  0
06FA:  RCALL  037C
....................    output_low(rst);  //reset LCD 
06FC:  BCF    F93.5
06FE:  BCF    F8A.5
....................    delay_us(1);                      
0700:  BRA    0702
0702:  BRA    0704
....................    output_high(rst);  //LCD normal operation 
0704:  BCF    F93.5
0706:  BSF    F8A.5
....................    glcd_instruction(set_lcd_bit);  //set 4 and 8  bit operation and basic instruction set 
0708:  MOVLW  20
070A:  MOVLB  5
070C:  MOVWF  xA6
070E:  MOVLB  0
0710:  RCALL  03CC
....................    delay_us(144); 
0712:  MOVLW  BF
0714:  MOVWF  00
0716:  DECFSZ 00,F
0718:  BRA    0716
071A:  BRA    071C
....................    glcd_instruction(0x0C);  //display on cursor off and char blink off 
071C:  MOVLW  0C
071E:  MOVLB  5
0720:  MOVWF  xA6
0722:  MOVLB  0
0724:  RCALL  03CC
....................    delay_us(100); 
0726:  MOVLW  85
0728:  MOVWF  00
072A:  DECFSZ 00,F
072C:  BRA    072A
....................    glcd_instruction(clear_lcd);  //display clear 
072E:  MOVLW  01
0730:  MOVLB  5
0732:  MOVWF  xA6
0734:  MOVLB  0
0736:  RCALL  03CC
....................    delay_ms(10); 
0738:  MOVLW  0A
073A:  MOVLB  5
073C:  MOVWF  xA3
073E:  MOVLB  0
0740:  RCALL  037C
....................    glcd_instruction(set_mode_lcd);  //entry mode set 
0742:  MOVLW  06
0744:  MOVLB  5
0746:  MOVWF  xA6
0748:  MOVLB  0
074A:  RCALL  03CC
....................    delay_us(72);                  
074C:  MOVLW  5F
074E:  MOVWF  00
0750:  DECFSZ 00,F
0752:  BRA    0750
0754:  BRA    0756
....................    glcd_instruction(ext_instru);  // Select extended instruction set. 
0756:  MOVLW  24
0758:  MOVLB  5
075A:  MOVWF  xA6
075C:  MOVLB  0
075E:  RCALL  03CC
....................    delay_us (72);    
0760:  MOVLW  5F
0762:  MOVWF  00
0764:  DECFSZ 00,F
0766:  BRA    0764
0768:  BRA    076A
....................    glcd_instruction(graphic_on);  // Graphic display ON. 
076A:  MOVLW  26
076C:  MOVLB  5
076E:  MOVWF  xA6
0770:  MOVLB  0
0772:  RCALL  03CC
....................    delay_us (72); 
0774:  MOVLW  5F
0776:  MOVWF  00
0778:  DECFSZ 00,F
077A:  BRA    0778
077C:  BRA    077E
....................    glcd_fillScreen (OFF); // clear all pixel 
077E:  MOVLB  5
0780:  CLRF   xA3
0782:  MOVLB  0
0784:  RCALL  04AA
....................    glcd_update (); // update display 
0786:  RCALL  05E6
....................  
.................... } 
0788:  GOTO   3BD2 (RETURN)
....................  
.................... void glcd_init_basic()//INICIA EM MODO BASICO 
.................... { 
....................    delay_ms(40); 
....................    output_low(rst);         //reset LCD 
....................    delay_us(1);                      
....................    output_high(rst);        //LCD normal operation 
....................    glcd_instruction(set_lcd_bit);   //set 4 bit operation and basic instruction set 
....................    delay_us(144); 
....................    glcd_instruction(0x0C);   //display on cursor off and char blink off 
....................    delay_us(100); 
....................    glcd_instruction(clear_lcd);   //display clear 
....................    delay_ms(10); 
....................    glcd_instruction(set_mode_lcd);   //entry mode set 
....................    delay_us(72);                  
.................... } 
.................... //              0     0        0 
.................... void glcd_pixel(int8 x, int8 y, int1 color)//GRAVA NOVO VALOR DOS PIXEL 
.................... { 
....................   int8 v, h, b; 
....................   v = y; 
*
0FFC:  MOVFF  5BF,5C1
....................   h = x/16; 
1000:  MOVLB  5
1002:  SWAPF  xBE,W
1004:  MOVWF  xC2
1006:  MOVLW  0F
1008:  ANDWF  xC2,F
....................   b = 15 - (x%16); 
100A:  MOVF   xBE,W
100C:  ANDLW  0F
100E:  XORLW  FF
1010:  ADDLW  10
1012:  MOVWF  xC3
....................   
....................   if (color == ON) 
1014:  DECFSZ xC0,W
1016:  BRA    1084
....................   { 
....................    bit_set (gdram.pix[v][h].word, b); 
1018:  CLRF   xC5
101A:  MOVFF  5C1,5C4
101E:  CLRF   xC7
1020:  MOVLW  10
1022:  MOVWF  xC6
1024:  MOVLB  0
1026:  CALL   0488
102A:  MOVFF  02,03
102E:  MOVF   01,W
1030:  ADDLW  01
1032:  MOVLB  5
1034:  MOVWF  xC4
1036:  MOVLW  00
1038:  ADDWFC 02,W
103A:  MOVWF  xC5
103C:  CLRF   03
103E:  MOVFF  5C2,02
1042:  BCF    FD8.0
1044:  RLCF   02,F
1046:  RLCF   03,F
1048:  MOVF   02,W
104A:  ADDWF  xC4,F
104C:  MOVF   03,W
104E:  ADDWFC xC5,F
1050:  MOVLW  04
1052:  ADDWF  xC4,W
1054:  MOVWF  01
1056:  MOVLW  00
1058:  ADDWFC xC5,W
105A:  MOVWF  03
105C:  MOVFF  01,FE9
1060:  MOVWF  FEA
1062:  CLRF   03
1064:  MOVLW  01
1066:  MOVWF  02
1068:  MOVF   xC3,W
106A:  MOVWF  00
106C:  BZ    1078
106E:  BCF    FD8.0
1070:  RLCF   02,F
1072:  RLCF   03,F
1074:  DECFSZ 00,F
1076:  BRA    106E
1078:  MOVF   02,W
107A:  IORWF  FEF,F
107C:  MOVF   03,W
107E:  IORWF  FEC,W
1080:  MOVWF  FEF
....................   } 
....................   
....................   else 
1082:  BRA    10F8
....................   { 
....................    bit_clear (gdram.pix[v][h].word, b); 
1084:  CLRF   xC5
1086:  MOVFF  5C1,5C4
108A:  CLRF   xC7
108C:  MOVLW  10
108E:  MOVWF  xC6
1090:  MOVLB  0
1092:  CALL   0488
1096:  MOVFF  02,03
109A:  MOVF   01,W
109C:  ADDLW  01
109E:  MOVLB  5
10A0:  MOVWF  xC4
10A2:  MOVLW  00
10A4:  ADDWFC 02,W
10A6:  MOVWF  xC5
10A8:  CLRF   03
10AA:  MOVFF  5C2,02
10AE:  BCF    FD8.0
10B0:  RLCF   02,F
10B2:  RLCF   03,F
10B4:  MOVF   02,W
10B6:  ADDWF  xC4,F
10B8:  MOVF   03,W
10BA:  ADDWFC xC5,F
10BC:  MOVLW  04
10BE:  ADDWF  xC4,W
10C0:  MOVWF  01
10C2:  MOVLW  00
10C4:  ADDWFC xC5,W
10C6:  MOVWF  03
10C8:  MOVFF  01,FE9
10CC:  MOVWF  FEA
10CE:  CLRF   03
10D0:  MOVLW  01
10D2:  MOVWF  02
10D4:  MOVF   xC3,W
10D6:  MOVWF  00
10D8:  BZ    10E4
10DA:  BCF    FD8.0
10DC:  RLCF   02,F
10DE:  RLCF   03,F
10E0:  DECFSZ 00,F
10E2:  BRA    10DA
10E4:  MOVF   02,W
10E6:  XORLW  FF
10E8:  MOVWF  00
10EA:  MOVLW  FF
10EC:  XORWF  03,F
10EE:  MOVF   00,W
10F0:  ANDWF  FEF,F
10F2:  MOVF   03,W
10F4:  ANDWF  FEC,W
10F6:  MOVWF  FEF
....................   } 
....................   gdram.refresh = TRUE; 
10F8:  BSF    04.0
.................... } 
10FA:  MOVLB  0
10FC:  RETURN 0
.................... //                        
.................... void glcd_plot_image(ROM char *img,int width,int height,int x,int y,int inverse)//CARREGA IMAGEM 
.................... { 
....................    unsigned int i=0, j=0, k=0; 
....................    unsigned int16 count=0; 
....................     
....................    //glcd_fillScreen(OFF);                        //Clears the screen (opt.) 
....................    for(j=0;j<height;j++)//linhas 
....................       {    
....................          for(;i<width;)//colunas 
....................          { 
....................            for(k=0;k<8;k++)//bite 
....................             { 
....................                if(inverse) 
....................                {//           0  ,0  , 
....................                  glcd_pixel(i+x,j+y,~bit_test(img[count],(k))); 
....................                } 
....................                else 
....................                { 
....................                   glcd_pixel(i+x,j+y,bit_test(img[count],(k))); 
....................                } 
....................                i++; 
....................             } 
....................             count++; 
....................          } 
....................       i=0; 
....................       } 
.................... }  
.................... /////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <graphics.c>    //Biblioteca grafica 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
*
20B2:  MOVLW  01
20B4:  MOVLB  5
20B6:  MOVWF  xB7
20B8:  MOVWF  xB8
20BA:  CLRF   xBD
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
20BC:  MOVF   xAE,W
20BE:  SUBWF  xB0,W
20C0:  MOVWF  xBE
20C2:  MOVF   xBE,W
20C4:  BTFSS  xBE.7
20C6:  BRA    20CE
20C8:  MOVLW  00
20CA:  BSF    FD8.0
20CC:  SUBFWB xBE,W
20CE:  CLRF   03
20D0:  MOVWF  xB5
20D2:  MOVFF  03,5B6
....................    dy = abs((signed int8)(y2 - y1)); 
20D6:  MOVF   xAF,W
20D8:  SUBWF  xB1,W
20DA:  MOVWF  xBE
20DC:  MOVF   xBE,W
20DE:  BTFSS  xBE.7
20E0:  BRA    20E8
20E2:  MOVLW  00
20E4:  BSF    FD8.0
20E6:  SUBFWB xBE,W
20E8:  CLRF   03
20EA:  MOVWF  xB3
20EC:  MOVFF  03,5B4
....................    #endif 
....................  
....................    if(x1 > x2) 
20F0:  MOVF   xAE,W
20F2:  SUBWF  xB0,W
20F4:  BC    20F8
....................       addx = -1; 
20F6:  SETF   xB7
....................    if(y1 > y2) 
20F8:  MOVF   xAF,W
20FA:  SUBWF  xB1,W
20FC:  BC    2100
....................       addy = -1; 
20FE:  SETF   xB8
....................  
....................    if(dx >= dy) 
2100:  MOVF   xB4,W
2102:  SUBWF  xB6,W
2104:  BNC   217E
2106:  BNZ   210E
2108:  MOVF   xB3,W
210A:  SUBWF  xB5,W
210C:  BNC   217E
....................    { 
....................       dy *= 2; 
210E:  BCF    FD8.0
2110:  RLCF   xB3,F
2112:  RLCF   xB4,F
....................       P = dy - dx; 
2114:  MOVF   xB5,W
2116:  SUBWF  xB3,W
2118:  MOVWF  00
211A:  MOVF   xB6,W
211C:  SUBWFB xB4,W
211E:  MOVFF  00,5B9
2122:  MOVWF  xBA
....................       diff = P - dx; 
2124:  MOVF   xB5,W
2126:  SUBWF  xB9,W
2128:  MOVWF  xBB
212A:  MOVF   xB6,W
212C:  SUBWFB xBA,W
212E:  MOVWF  xBC
....................  
....................       for(; i<=dx; ++i) 
2130:  MOVF   xB6,F
2132:  BNZ   213A
2134:  MOVF   xBD,W
2136:  SUBWF  xB5,W
2138:  BNC   217C
....................       { 
....................          glcd_pixel(x1, y1, color); 
213A:  MOVFF  5AE,5BE
213E:  MOVFF  5AF,5BF
2142:  MOVFF  5B2,5C0
2146:  MOVLB  0
2148:  CALL   0FFC
....................  
....................          if(P < 0) 
214C:  MOVLB  5
214E:  BTFSC  xBA.7
2150:  BRA    2154
2152:  BRA    2164
....................          { 
....................             P  += dy; 
2154:  MOVF   xB3,W
2156:  ADDWF  xB9,F
2158:  MOVF   xB4,W
215A:  ADDWFC xBA,F
....................             x1 += addx; 
215C:  MOVF   xB7,W
215E:  ADDWF  xAE,W
2160:  MOVWF  xAE
....................          } 
....................          else 
2162:  BRA    2178
....................          { 
....................             P  += diff; 
2164:  MOVF   xBB,W
2166:  ADDWF  xB9,F
2168:  MOVF   xBC,W
216A:  ADDWFC xBA,F
....................             x1 += addx; 
216C:  MOVF   xB7,W
216E:  ADDWF  xAE,W
2170:  MOVWF  xAE
....................             y1 += addy; 
2172:  MOVF   xB8,W
2174:  ADDWF  xAF,W
2176:  MOVWF  xAF
....................          } 
....................       } 
2178:  INCF   xBD,F
217A:  BRA    2130
....................    } 
....................    else 
217C:  BRA    21EC
....................    { 
....................       dx *= 2; 
217E:  BCF    FD8.0
2180:  RLCF   xB5,F
2182:  RLCF   xB6,F
....................       P = dx - dy; 
2184:  MOVF   xB3,W
2186:  SUBWF  xB5,W
2188:  MOVWF  00
218A:  MOVF   xB4,W
218C:  SUBWFB xB6,W
218E:  MOVFF  00,5B9
2192:  MOVWF  xBA
....................       diff = P - dy; 
2194:  MOVF   xB3,W
2196:  SUBWF  xB9,W
2198:  MOVWF  xBB
219A:  MOVF   xB4,W
219C:  SUBWFB xBA,W
219E:  MOVWF  xBC
....................  
....................       for(; i<=dy; ++i) 
21A0:  MOVF   xB4,F
21A2:  BNZ   21AA
21A4:  MOVF   xBD,W
21A6:  SUBWF  xB3,W
21A8:  BNC   21EC
....................       { 
....................          glcd_pixel(x1, y1, color); 
21AA:  MOVFF  5AE,5BE
21AE:  MOVFF  5AF,5BF
21B2:  MOVFF  5B2,5C0
21B6:  MOVLB  0
21B8:  CALL   0FFC
....................  
....................          if(P < 0) 
21BC:  MOVLB  5
21BE:  BTFSC  xBA.7
21C0:  BRA    21C4
21C2:  BRA    21D4
....................          { 
....................             P  += dx; 
21C4:  MOVF   xB5,W
21C6:  ADDWF  xB9,F
21C8:  MOVF   xB6,W
21CA:  ADDWFC xBA,F
....................             y1 += addy; 
21CC:  MOVF   xB8,W
21CE:  ADDWF  xAF,W
21D0:  MOVWF  xAF
....................          } 
....................          else 
21D2:  BRA    21E8
....................          { 
....................             P  += diff; 
21D4:  MOVF   xBB,W
21D6:  ADDWF  xB9,F
21D8:  MOVF   xBC,W
21DA:  ADDWFC xBA,F
....................             x1 += addx; 
21DC:  MOVF   xB7,W
21DE:  ADDWF  xAE,W
21E0:  MOVWF  xAE
....................             y1 += addy; 
21E2:  MOVF   xB8,W
21E4:  ADDWF  xAF,W
21E6:  MOVWF  xAF
....................          } 
....................       } 
21E8:  INCF   xBD,F
21EA:  BRA    21A0
....................    } 
.................... } 
21EC:  MOVLB  0
21EE:  RETURN 0
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
21F0:  MOVLB  5
21F2:  MOVF   xA7,F
21F4:  BZ    2254
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
21F6:  MOVF   xA5,W
21F8:  SUBWF  xA3,W
21FA:  BC    2206
....................       { 
....................          xmin = x1; 
21FC:  MOVFF  5A3,5AA
....................          xmax = x2; 
2200:  MOVFF  5A5,5AB
....................       } 
....................       else 
2204:  BRA    220E
....................       { 
....................          xmin = x2; 
2206:  MOVFF  5A5,5AA
....................          xmax = x1; 
220A:  MOVFF  5A3,5AB
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
220E:  MOVF   xA6,W
2210:  SUBWF  xA4,W
2212:  BC    221E
....................       { 
....................          ymin = y1; 
2214:  MOVFF  5A4,5AC
....................          ymax = y2; 
2218:  MOVFF  5A6,5AD
....................       } 
....................       else 
221C:  BRA    2226
....................       { 
....................          ymin = y2; 
221E:  MOVFF  5A6,5AC
....................          ymax = y1; 
2222:  MOVFF  5A4,5AD
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
2226:  MOVF   xAA,W
2228:  SUBWF  xAB,W
222A:  BNC   2252
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
222C:  MOVFF  5AC,5A9
2230:  MOVF   xA9,W
2232:  SUBWF  xAD,W
2234:  BNC   224E
....................          { 
....................             glcd_pixel(xmin, i, color); 
2236:  MOVFF  5AA,5BE
223A:  MOVFF  5A9,5BF
223E:  MOVFF  5A8,5C0
2242:  MOVLB  0
2244:  CALL   0FFC
....................          } 
2248:  MOVLB  5
224A:  INCF   xA9,F
224C:  BRA    2230
....................       } 
224E:  INCF   xAA,F
2250:  BRA    2226
....................    } 
....................    else 
2252:  BRA    22B0
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
2254:  MOVFF  5A3,5AE
2258:  MOVFF  5A4,5AF
225C:  MOVFF  5A5,5B0
2260:  MOVFF  5A4,5B1
2264:  MOVFF  5A8,5B2
2268:  MOVLB  0
226A:  RCALL  20B2
....................       glcd_line(x1, y2, x2, y2, color); 
226C:  MOVFF  5A3,5AE
2270:  MOVFF  5A6,5AF
2274:  MOVFF  5A5,5B0
2278:  MOVFF  5A6,5B1
227C:  MOVFF  5A8,5B2
2280:  RCALL  20B2
....................       glcd_line(x1, y1, x1, y2, color); 
2282:  MOVFF  5A3,5AE
2286:  MOVFF  5A4,5AF
228A:  MOVFF  5A3,5B0
228E:  MOVFF  5A6,5B1
2292:  MOVFF  5A8,5B2
2296:  RCALL  20B2
....................       glcd_line(x2, y1, x2, y2, color); 
2298:  MOVFF  5A5,5AE
229C:  MOVFF  5A4,5AF
22A0:  MOVFF  5A5,5B0
22A4:  MOVFF  5A6,5B1
22A8:  MOVFF  5A8,5B2
22AC:  RCALL  20B2
22AE:  MOVLB  5
....................    } 
.................... } 
22B0:  MOVLB  0
22B2:  RETURN 0
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
10FE:  MOVFF  5A6,03
1102:  MOVLB  5
1104:  MOVFF  5A5,FE9
1108:  MOVFF  5A6,FEA
110C:  MOVF   FEF,F
110E:  BTFSC  FD8.2
1110:  BRA    12A2
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
1112:  MOVFF  5A6,03
1116:  MOVFF  5A5,FE9
111A:  MOVFF  5A6,FEA
111E:  MOVF   FEF,W
1120:  SUBLW  52
1122:  BNC   1168
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
1124:  MOVFF  5A6,03
1128:  MOVFF  5A5,FE9
112C:  MOVFF  5A6,FEA
1130:  MOVLW  20
1132:  SUBWF  FEF,W
1134:  MULLW  05
1136:  MOVF   FF3,W
1138:  CLRF   03
113A:  MOVWF  xB2
113C:  MOVLW  05
113E:  MOVWF  FEA
1140:  MOVLW  AD
1142:  MOVWF  FE9
1144:  CLRF   xB6
1146:  MOVFF  5B2,5B5
114A:  MOVLW  05
114C:  MOVWF  01
114E:  CLRF   FF7
1150:  MOVF   xB2,W
1152:  MOVLB  0
1154:  CALL   0004
1158:  TBLRD*-
115A:  TBLRD*+
115C:  MOVFF  FF5,FEE
1160:  DECFSZ 01,F
1162:  BRA    115A
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
1164:  BRA    11CA
1166:  MOVLB  5
1168:  MOVFF  5A6,03
116C:  MOVFF  5A5,FE9
1170:  MOVFF  5A6,FEA
1174:  MOVF   FEF,W
1176:  SUBLW  7E
1178:  BNC   11BE
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
117A:  MOVFF  5A6,03
117E:  MOVFF  5A5,FE9
1182:  MOVFF  5A6,FEA
1186:  MOVLW  53
1188:  SUBWF  FEF,W
118A:  MULLW  05
118C:  MOVF   FF3,W
118E:  CLRF   03
1190:  MOVWF  xB2
1192:  MOVLW  05
1194:  MOVWF  FEA
1196:  MOVLW  AD
1198:  MOVWF  FE9
119A:  CLRF   xB6
119C:  MOVFF  5B2,5B5
11A0:  MOVLW  05
11A2:  MOVWF  01
11A4:  CLRF   FF7
11A6:  MOVF   xB2,W
11A8:  MOVLB  0
11AA:  CALL   0114
11AE:  TBLRD*-
11B0:  TBLRD*+
11B2:  MOVFF  FF5,FEE
11B6:  DECFSZ 01,F
11B8:  BRA    11B0
....................       else 
11BA:  BRA    11CA
11BC:  MOVLB  5
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
11BE:  CLRF   xAD
11C0:  CLRF   xAE
11C2:  CLRF   xAF
11C4:  CLRF   xB0
11C6:  CLRF   xB1
11C8:  MOVLB  0
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
11CA:  MOVFF  5A6,03
11CE:  MOVLB  5
11D0:  MOVF   xA5,W
11D2:  MOVWF  FE9
11D4:  MOVFF  03,FEA
11D8:  MOVF   FEF,W
11DA:  XORLW  0A
11DC:  MOVLB  0
11DE:  BZ    11E6
11E0:  XORLW  07
11E2:  BZ    11F6
11E4:  BRA    11FC
....................          case '\n': 
....................             y += 7*size + 1; 
11E6:  MOVLB  5
11E8:  MOVF   xA7,W
11EA:  MULLW  07
11EC:  MOVF   FF3,W
11EE:  ADDLW  01
11F0:  ADDWF  xA4,F
....................             continue; 
11F2:  BRA    1294
11F4:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
11F6:  MOVLB  5
11F8:  CLRF   xA3
....................             continue; 
11FA:  BRA    1294
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
11FC:  MOVLB  5
11FE:  MOVF   xA7,W
1200:  MULLW  05
1202:  MOVF   FF3,W
1204:  ADDWF  xA3,W
1206:  SUBLW  7F
1208:  BC    1216
....................       { 
....................          x = 0;                           // Set x at far left position 
120A:  CLRF   xA3
....................          y += 7*size + 1;                 // Set y at next position down 
120C:  MOVF   xA7,W
120E:  MULLW  07
1210:  MOVF   FF3,W
1212:  ADDLW  01
1214:  ADDWF  xA4,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
1216:  CLRF   xA9
1218:  MOVF   xA9,W
121A:  SUBLW  04
121C:  BNC   1294
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
121E:  CLRF   xAA
1220:  MOVF   xAA,W
1222:  SUBLW  06
1224:  BNC   128C
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
1226:  CLRF   03
1228:  MOVF   xA9,W
122A:  ADDLW  AD
122C:  MOVWF  FE9
122E:  MOVLW  05
1230:  ADDWFC 03,W
1232:  MOVWF  FEA
1234:  MOVFF  FEF,5B2
1238:  MOVFF  5B2,00
123C:  MOVF   xAA,W
123E:  MOVWF  01
1240:  BZ    124A
1242:  BCF    FD8.0
1244:  RRCF   00,F
1246:  DECFSZ 01,F
1248:  BRA    1242
124A:  BTFSS  00.0
124C:  BRA    1288
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
124E:  CLRF   xAB
1250:  MOVF   xA7,W
1252:  SUBWF  xAB,W
1254:  BC    1288
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
1256:  CLRF   xAC
1258:  MOVF   xA7,W
125A:  SUBWF  xAC,W
125C:  BC    1284
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
125E:  MOVF   xAC,W
1260:  ADDWF  xA3,W
1262:  MOVWF  xB2
1264:  MOVF   xAA,W
1266:  MULWF  xA7
1268:  MOVF   FF3,W
126A:  ADDWF  xA4,W
126C:  ADDWF  xAB,W
126E:  MOVWF  xB3
1270:  MOVFF  5B2,5BE
1274:  MOVWF  xBF
1276:  MOVFF  5A8,5C0
127A:  MOVLB  0
127C:  RCALL  0FFC
....................                   } 
127E:  MOVLB  5
1280:  INCF   xAC,F
1282:  BRA    1258
....................                } 
1284:  INCF   xAB,F
1286:  BRA    1250
....................             } 
....................          } 
1288:  INCF   xAA,F
128A:  BRA    1220
....................       } 
128C:  INCF   xA9,F
128E:  MOVF   xA7,W
1290:  ADDWF  xA3,F
1292:  BRA    1218
....................    } 
1294:  INCF   xA5,F
1296:  BTFSC  FD8.2
1298:  INCF   xA6,F
129A:  INCF   xA3,F
129C:  MOVLB  0
129E:  BRA    10FE
12A0:  MOVLB  5
.................... } 
12A2:  MOVLB  0
12A4:  RETURN 0
....................  
.................... #endif 
....................  
.................... #include <internal_eeprom.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                          internal_eeprom.c                             //// 
.................... ////                                                                        //// 
.................... ////       Utilities to write various data types to internal eeprom         //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                        //// 
.................... ////   void write_int1_eeprom(address, int8 bitPosition, int1 data)         //// 
.................... ////     Call to write one bit of data                                      //// 
.................... ////                                                                        //// 
.................... ////   int1 read_int1_eeprom(address, int8 bitPosition)                     //// 
.................... ////     Call to read one bit of data                                       //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_int16_eeprom(address, int16 data)                         //// 
.................... ////     Call to write a 16 bit integer                                     //// 
.................... ////                                                                        //// 
.................... ////   void write_int16_eeprom(address, int16 data)                         //// 
.................... ////     Call to read a 16 bit integer                                      //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_int32_eeprom(address, int32 data)                         //// 
.................... ////     Call to write a 32 bit integer                                     //// 
.................... ////                                                                        //// 
.................... ////   int16 read_int32_eeprom(address)                                     //// 
.................... ////     Call to read a 32 bit integer                                      //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_float_eeprom(address, float data)                         //// 
.................... ////     Call to write a floating point number                              //// 
.................... ////                                                                        //// 
.................... ////   float read_float_eeprom(address)                                     //// 
.................... ////     Call to read a floating point number                               //// 
.................... ////                                                                        //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services               //// 
.................... //// This source code may only be used by licensed users of the CCS C       //// 
.................... //// compiler.  This source code may only be distributed to other licensed  //// 
.................... //// users of the CCS C compiler.  No other use, reproduction or            //// 
.................... //// distribution is permitted without written permission. Derivative       //// 
.................... //// programs created using this software in object code form are not       //// 
.................... //// restricted in any way.                                                 //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef INTERNAL_EEPROM_UTILITIES 
.................... #define INTERNAL_EEPROM_UTILITIES 
....................  
.................... // Used to adjust the address range 
.................... #ifndef INT_EEPROM_ADDRESS 
.................... #define INT_EEPROM_ADDRESS  int8 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //// Internal EEPROM Functions 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... // Purpose:    Write one bit to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The bit position (LSB == 0) 
.................... //             3) The bit to write 
.................... // Outputs:    None 
.................... void write_int1_eeprom(INT_EEPROM_ADDRESS address, int8 bitPosition, int1 data) 
.................... { 
....................    int8 stored_data; 
....................  
....................    stored_data = read_eeprom(address); 
....................  
....................    if(data) 
....................    { 
....................       bit_set(stored_data, bitPosition); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(stored_data, bitPosition); 
....................    } 
....................  
....................    write_eeprom(address, stored_data); 
.................... } 
....................  
....................  
.................... // Purpose:    Read one bit from internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The bit position (LSB == 0) 
.................... // Outputs:    The bit read from internal eeprom 
.................... int1 read_int1_eeprom(INT_EEPROM_ADDRESS address, int8 bitPosition) 
.................... { 
....................    return bit_test(read_eeprom(address), bitPosition); 
.................... } 
....................  
....................  
.................... // Purpose:    Write a 16 bit number to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The 16 bit number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_int16_eeprom(INT_EEPROM_ADDRESS address, int16 data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 2; ++i) 
*
3A76:  MOVLB  4
3A78:  CLRF   x74
3A7A:  MOVF   x74,W
3A7C:  SUBLW  01
3A7E:  BNC   3AD6
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
3A80:  MOVF   x74,W
3A82:  ADDWF  x71,W
3A84:  MOVWF  x75
3A86:  MOVLW  04
3A88:  MOVWF  x77
3A8A:  MOVLW  72
3A8C:  MOVWF  x76
3A8E:  MOVF   x74,W
3A90:  ADDWF  x76,W
3A92:  MOVWF  01
3A94:  MOVLW  00
3A96:  ADDWFC x77,W
3A98:  MOVWF  03
3A9A:  MOVF   01,W
3A9C:  MOVWF  FE9
3A9E:  MOVFF  03,FEA
3AA2:  MOVFF  FEF,476
3AA6:  MOVFF  475,FA9
3AAA:  MOVFF  476,FA8
3AAE:  BCF    FA6.6
3AB0:  BCF    FA6.7
3AB2:  BSF    FA6.2
3AB4:  MOVF   FF2,W
3AB6:  MOVWF  00
3AB8:  BCF    FF2.7
3ABA:  MOVLB  F
3ABC:  MOVLW  55
3ABE:  MOVWF  FA7
3AC0:  MOVLW  AA
3AC2:  MOVWF  FA7
3AC4:  BSF    FA6.1
3AC6:  BTFSC  FA6.1
3AC8:  BRA    3AC6
3ACA:  BCF    FA6.2
3ACC:  MOVF   00,W
3ACE:  IORWF  FF2,F
....................    } 
3AD0:  MOVLB  4
3AD2:  INCF   x74,F
3AD4:  BRA    3A7A
.................... } 
3AD6:  MOVLB  0
3AD8:  RETURN 0
....................  
....................  
.................... // Purpose:    Read a 16 bit number from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The 16 bit number read from internal eeprom 
.................... int16 read_int16_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8  i; 
....................    int16 data; 
....................  
....................    for(i = 0; i < 2; ++i) 
*
078C:  MOVLB  4
078E:  CLRF   x70
0790:  MOVF   x70,W
0792:  SUBLW  01
0794:  BNC   07D4
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
0796:  MOVLW  04
0798:  MOVWF  x74
079A:  MOVLW  71
079C:  MOVWF  x73
079E:  MOVF   x70,W
07A0:  ADDWF  x73,W
07A2:  MOVWF  01
07A4:  MOVLW  00
07A6:  ADDWFC x74,W
07A8:  MOVWF  03
07AA:  MOVF   01,W
07AC:  MOVWF  FE9
07AE:  MOVFF  03,FEA
07B2:  MOVF   x70,W
07B4:  ADDWF  x6F,W
07B6:  MOVWF  x75
07B8:  MOVFF  FF2,476
07BC:  BCF    FF2.7
07BE:  MOVFF  475,FA9
07C2:  BCF    FA6.6
07C4:  BCF    FA6.7
07C6:  BSF    FA6.0
07C8:  MOVF   FA8,W
07CA:  BTFSC  x76.7
07CC:  BSF    FF2.7
07CE:  MOVWF  FEF
....................    } 
07D0:  INCF   x70,F
07D2:  BRA    0790
....................  
....................    return(data); 
07D4:  MOVFF  471,01
07D8:  MOVFF  472,02
.................... } 
07DC:  MOVLB  0
07DE:  RETURN 0
....................  
....................  
.................... // Purpose:    Write a 32 bit integer to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The 32 bit number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_int32_eeprom(INT_EEPROM_ADDRESS address, int32 data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
....................    } 
.................... } 
....................  
....................  
.................... // Purpose:    Read a 32 bit integer from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The 32 bit integer read from internal eeprom 
.................... int32 read_int32_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8  i; 
....................    int32 data; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
....................    } 
....................  
....................    return data; 
.................... } 
....................  
....................  
.................... // Purpose:    Write a floating point number to internal eeprom 
.................... // Inputs:     1) An eeprom address. Four eeprom locations will be used. 
.................... //             2) The floating point number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_float_eeprom(INT_EEPROM_ADDRESS address, float data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
....................    } 
.................... } 
....................  
....................  
.................... // Purpose:    Read a floating point number from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The floating point number read from the internal eeprom 
.................... float read_float_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8 i; 
....................    float data; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
....................    } 
....................  
....................    return data; 
.................... } 
....................  
.................... #endif 
....................  
.................... //...................................................................................................    
....................    
....................  //Variaveis Globais 
....................    int16 tempo_on=0;          //incremento para controle de tempo do estrela triangulo 
....................    int   start_on=0;          //estado do modo estrela triangulo 
....................    int   filtro=0;            // filtro de tecla C0 e C1 
....................       
....................    float L1=0;                //Valor da string L1     
....................    int16 Offset_L1=0;         //offset sensor 1 
....................    float ref_L1=0;            //Referencia sensor 1 
....................    float L1_eq=0; 
....................    float L1_real=0; 
....................    int rep1=0; 
....................     
....................    float L2=0;                //Valor da string L2                     
....................    int16 Offset_L2=0;         //offset sensor 2 
....................    float ref_L2=0;            //Referencia sensor 2 
....................    float L2_eq=0; 
....................    float L2_real=0; 
....................    int rep2=0; 
....................     
....................    float L3=0;                 //Valor da string L3                     
....................    int16 Offset_L3=0;         //offset sensor 3 
....................    float ref_L3=0;            //Referencia sensor 3  
....................    float L3_eq=0; 
....................    float L3_real=0; 
....................    int rep3=0; 
....................   
....................    int16 mediaAD_L1=0;         //valor do ADC 1 
....................    int16 mediaAD_L2=0;         //valor do ADC 2 
....................    int16 mediaAD_L3=0;         //valor do ADC 3 
....................    float tensao=0;             //Auxiliar para valores de tensão dos sensores 
....................    int16 valor=0;              //Auxiliar para valores dos Conversores AD 
....................    int   rep=0;                //Auxiliar para repetiçoes (FOR) 
....................   
....................    int menu=0;                 //Telas de menu restrito 
....................    int menu_lib=0;             //Telas de menu liberado 
....................    int filtro_E0=0;            //Filtra a tecla de descida dos menus 
....................    int filtro_c3=0;            //Filtra a tecla de subida dos menus 
....................    int TempoET;                //Tempo do estrela triangulo 
....................    float TempoETreal;          //conversão do tempo de estrela triangulo para sugundos 
....................     
....................    int16 Pot_real=0;           // Valor da potencia real (Watts) 
....................    int   Pot_HP=0;             // Valor da potencia convertido em (HP) 
....................    int16 tensao_rede=220;      //tensão da rede 
....................    float corrente_media=0;     //valor da media das tres correntes (L1+L2+L3/3) 
....................    float corrente_eq=0;        //Valor da corrente real incrementada 
....................    float corrente_real=0;      //Media da corrente medida 
....................    int soma_corrente=0;        // 
....................    int16 leituraEeprom=0;      //Lê os valores salvos na eemprom para poder salvar se for mudado 
....................    int def_eeprom; 
....................     
....................  void leitura_sensores() 
....................  {  
....................   if (menu==0&&menu_lib==0) 
*
12C6:  MOVLB  4
12C8:  MOVF   x4F,F
12CA:  BTFSS  FD8.2
12CC:  GOTO   1BE0
12D0:  MOVF   x50,F
12D2:  BTFSS  FD8.2
12D4:  GOTO   1BE0
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
12D8:  MOVLB  5
12DA:  CLRF   xA3
12DC:  MOVLB  0
12DE:  CALL   04AA
....................     
....................    //------   LEITURA DO SENSOR DE string L1  -------- 
....................     
....................    set_adc_channel(0); 
12E2:  MOVLW  00
12E4:  MOVWF  01
12E6:  MOVF   FC2,W
12E8:  ANDLW  C7
12EA:  IORWF  01,W
12EC:  MOVWF  FC2
....................    delay_us(20); 
12EE:  MOVLW  1A
12F0:  MOVWF  00
12F2:  DECFSZ 00,F
12F4:  BRA    12F2
12F6:  NOP   
....................    mediaAD_L1=0; valor=0; tensao=0; 
12F8:  MOVLB  4
12FA:  CLRF   x43
12FC:  CLRF   x42
12FE:  CLRF   x4D
1300:  CLRF   x4C
1302:  CLRF   x4B
1304:  CLRF   x4A
1306:  CLRF   x49
1308:  CLRF   x48
....................     
....................    for(rep=1; rep<=8; rep++) 
130A:  MOVLW  01
130C:  MOVWF  x4E
130E:  MOVF   x4E,W
1310:  SUBLW  08
1312:  BNC   133C
....................    { 
....................      valor= read_adc(); 
1314:  BSF    FC2.2
1316:  BTFSC  FC2.2
1318:  BRA    1316
131A:  MOVFF  FC3,44C
131E:  MOVFF  FC4,44D
....................      delay_ms(4); 
1322:  MOVLW  04
1324:  MOVLB  5
1326:  MOVWF  xA3
1328:  MOVLB  0
132A:  CALL   037C
....................      mediaAD_L1= mediaAD_L1 + valor; 
132E:  MOVLB  4
1330:  MOVF   x4C,W
1332:  ADDWF  x42,F
1334:  MOVF   x4D,W
1336:  ADDWFC x43,F
....................    } 
1338:  INCF   x4E,F
133A:  BRA    130E
....................    mediaAD_L1= mediaAD_L1/8; 
133C:  RRCF   x43,F
133E:  RRCF   x42,F
1340:  RRCF   x43,F
1342:  RRCF   x42,F
1344:  RRCF   x43,F
1346:  RRCF   x42,F
1348:  MOVLW  1F
134A:  ANDWF  x43,F
....................    tensao=(float)mediaAD_L1*4.8828; 
134C:  MOVFF  443,5A4
1350:  MOVFF  442,5A3
1354:  MOVLB  0
1356:  CALL   07E0
135A:  MOVFF  00,476
135E:  MOVFF  01,477
1362:  MOVFF  02,478
1366:  MOVFF  03,479
136A:  MOVFF  03,5B3
136E:  MOVFF  02,5B2
1372:  MOVFF  01,5B1
1376:  MOVFF  00,5B0
137A:  MOVLW  E6
137C:  MOVLB  5
137E:  MOVWF  xB7
1380:  MOVLW  3F
1382:  MOVWF  xB6
1384:  MOVLW  1C
1386:  MOVWF  xB5
1388:  MOVLW  81
138A:  MOVWF  xB4
138C:  MOVLB  0
138E:  CALL   0816
1392:  MOVFF  03,44B
1396:  MOVFF  02,44A
139A:  MOVFF  01,449
139E:  MOVFF  00,448
....................    L1_real=(float) (tensao - Offset_L1)/ref_L1; 
13A2:  MOVFF  40E,5A4
13A6:  MOVFF  40D,5A3
13AA:  CALL   07E0
13AE:  BSF    FD8.1
13B0:  MOVFF  44B,5A6
13B4:  MOVFF  44A,5A5
13B8:  MOVFF  449,5A4
13BC:  MOVFF  448,5A3
13C0:  MOVFF  03,5AA
13C4:  MOVFF  02,5A9
13C8:  MOVFF  01,5A8
13CC:  MOVFF  00,5A7
13D0:  CALL   090C
13D4:  MOVFF  00,476
13D8:  MOVFF  01,477
13DC:  MOVFF  02,478
13E0:  MOVFF  03,479
13E4:  MOVFF  03,5AA
13E8:  MOVFF  02,5A9
13EC:  MOVFF  01,5A8
13F0:  MOVFF  00,5A7
13F4:  MOVFF  412,5AE
13F8:  MOVFF  411,5AD
13FC:  MOVFF  410,5AC
1400:  MOVFF  40F,5AB
1404:  CALL   0B84
1408:  MOVFF  03,41A
140C:  MOVFF  02,419
1410:  MOVFF  01,418
1414:  MOVFF  00,417
....................     
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep1++; 
1418:  MOVLB  4
141A:  INCF   x1B,F
....................    L1_eq=L1_eq+L1_real; 
141C:  BCF    FD8.1
141E:  MOVFF  416,5A6
1422:  MOVFF  415,5A5
1426:  MOVFF  414,5A4
142A:  MOVFF  413,5A3
142E:  MOVFF  41A,5AA
1432:  MOVFF  419,5A9
1436:  MOVFF  418,5A8
143A:  MOVFF  417,5A7
143E:  MOVLB  0
1440:  CALL   090C
1444:  MOVFF  03,416
1448:  MOVFF  02,415
144C:  MOVFF  01,414
1450:  MOVFF  00,413
....................   
....................    if(rep1>=10) 
1454:  MOVLB  4
1456:  MOVF   x1B,W
1458:  SUBLW  09
145A:  BC    14AC
....................    { 
....................     L1_eq = L1_eq/10;  
145C:  MOVFF  416,5AA
1460:  MOVFF  415,5A9
1464:  MOVFF  414,5A8
1468:  MOVFF  413,5A7
146C:  MOVLB  5
146E:  CLRF   xAE
1470:  CLRF   xAD
1472:  MOVLW  20
1474:  MOVWF  xAC
1476:  MOVLW  82
1478:  MOVWF  xAB
147A:  MOVLB  0
147C:  CALL   0B84
1480:  MOVFF  03,416
1484:  MOVFF  02,415
1488:  MOVFF  01,414
148C:  MOVFF  00,413
....................     L1 = L1_eq; 
1490:  MOVFF  416,40C
1494:  MOVFF  415,40B
1498:  MOVFF  414,40A
149C:  MOVFF  413,409
....................     rep1=0; 
14A0:  MOVLB  4
14A2:  CLRF   x1B
....................     L1_eq=0; 
14A4:  CLRF   x16
14A6:  CLRF   x15
14A8:  CLRF   x14
14AA:  CLRF   x13
....................    } 
....................     
....................     
....................    if (L1<0) 
14AC:  MOVFF  40C,5A6
14B0:  MOVFF  40B,5A5
14B4:  MOVFF  40A,5A4
14B8:  MOVFF  409,5A3
14BC:  MOVLB  5
14BE:  CLRF   xAA
14C0:  CLRF   xA9
14C2:  CLRF   xA8
14C4:  CLRF   xA7
14C6:  MOVLB  0
14C8:  RCALL  0CE2
14CA:  BNC   14D8
....................    { 
....................      L1=0; 
14CC:  MOVLB  4
14CE:  CLRF   x0C
14D0:  CLRF   x0B
14D2:  CLRF   x0A
14D4:  CLRF   x09
14D6:  MOVLB  0
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L1); // Converte adc em texto 
14D8:  MOVLW  04
14DA:  MOVLB  4
14DC:  MOVWF  x6E
14DE:  MOVLW  6F
14E0:  MOVWF  x6D
14E2:  MOVLW  89
14E4:  MOVWF  FE9
14E6:  MOVFF  40C,5A6
14EA:  MOVFF  40B,5A5
14EE:  MOVFF  40A,5A4
14F2:  MOVFF  409,5A3
14F6:  MOVLW  01
14F8:  MOVLB  5
14FA:  MOVWF  xA7
14FC:  MOVLB  0
14FE:  RCALL  0E56
....................  
....................    if(L1>=100) 
1500:  MOVLB  5
1502:  CLRF   xA6
1504:  CLRF   xA5
1506:  MOVLW  48
1508:  MOVWF  xA4
150A:  MOVLW  85
150C:  MOVWF  xA3
150E:  MOVFF  40C,5AA
1512:  MOVFF  40B,5A9
1516:  MOVFF  40A,5A8
151A:  MOVFF  409,5A7
151E:  MOVLB  0
1520:  CALL   0CE2
1524:  BC    1528
1526:  BNZ   1530
....................    { 
....................      string[6] = '\0'; 
1528:  MOVLB  4
152A:  CLRF   x75
....................      string[5] = 'A'; 
152C:  MOVLW  41
152E:  MOVWF  x74
....................    } 
....................    if(L1<100) 
1530:  MOVFF  40C,5A6
1534:  MOVFF  40B,5A5
1538:  MOVFF  40A,5A4
153C:  MOVFF  409,5A3
1540:  MOVLB  5
1542:  CLRF   xAA
1544:  CLRF   xA9
1546:  MOVLW  48
1548:  MOVWF  xA8
154A:  MOVLW  85
154C:  MOVWF  xA7
154E:  MOVLB  0
1550:  CALL   0CE2
1554:  BNC   155E
....................    { 
....................      string[5] = '\0'; 
1556:  MOVLB  4
1558:  CLRF   x74
....................      string[4] = 'A'; 
155A:  MOVLW  41
155C:  MOVWF  x73
....................    } 
....................    if(L1<10) 
155E:  MOVFF  40C,5A6
1562:  MOVFF  40B,5A5
1566:  MOVFF  40A,5A4
156A:  MOVFF  409,5A3
156E:  MOVLB  5
1570:  CLRF   xAA
1572:  CLRF   xA9
1574:  MOVLW  20
1576:  MOVWF  xA8
1578:  MOVLW  82
157A:  MOVWF  xA7
157C:  MOVLB  0
157E:  CALL   0CE2
1582:  BNC   158C
....................    { 
....................      string[4] = '\0'; 
1584:  MOVLB  4
1586:  CLRF   x73
....................      string[3] = 'A'; 
1588:  MOVLW  41
158A:  MOVWF  x72
....................    } 
....................     
....................    glcd_text57(18, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
158C:  MOVLW  12
158E:  MOVLB  5
1590:  MOVWF  xA3
1592:  MOVLW  01
1594:  MOVWF  xA4
1596:  MOVLW  04
1598:  MOVWF  xA6
159A:  MOVLW  6F
159C:  MOVWF  xA5
159E:  MOVLW  01
15A0:  MOVWF  xA7
15A2:  MOVWF  xA8
15A4:  MOVLB  0
15A6:  RCALL  10FE
....................       
....................    sprintf(string, "L1:"); // Converte char em texto 
15A8:  MOVLW  04
15AA:  MOVLB  4
15AC:  MOVWF  x6E
15AE:  MOVLW  6F
15B0:  MOVWF  x6D
15B2:  MOVLW  00
15B4:  MOVWF  FF6
15B6:  MOVLW  02
15B8:  MOVWF  FF7
15BA:  MOVLB  0
15BC:  RCALL  12A6
....................    string[3] = '\0'; 
15BE:  MOVLB  4
15C0:  CLRF   x72
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color)   
15C2:  MOVLW  01
15C4:  MOVLB  5
15C6:  MOVWF  xA3
15C8:  MOVWF  xA4
15CA:  MOVLW  04
15CC:  MOVWF  xA6
15CE:  MOVLW  6F
15D0:  MOVWF  xA5
15D2:  MOVLW  01
15D4:  MOVWF  xA7
15D6:  MOVWF  xA8
15D8:  MOVLB  0
15DA:  RCALL  10FE
....................       
....................    //------LEITURA DO SENSOR DE string L2  ------- 
....................       
....................    set_adc_channel(1); 
15DC:  MOVLW  08
15DE:  MOVWF  01
15E0:  MOVF   FC2,W
15E2:  ANDLW  C7
15E4:  IORWF  01,W
15E6:  MOVWF  FC2
....................    delay_us(20); 
15E8:  MOVLW  1A
15EA:  MOVWF  00
15EC:  DECFSZ 00,F
15EE:  BRA    15EC
15F0:  NOP   
....................    mediaAD_L2=0; valor=0; tensao=0; 
15F2:  MOVLB  4
15F4:  CLRF   x45
15F6:  CLRF   x44
15F8:  CLRF   x4D
15FA:  CLRF   x4C
15FC:  CLRF   x4B
15FE:  CLRF   x4A
1600:  CLRF   x49
1602:  CLRF   x48
....................     
....................    for(rep=1; rep<=8; rep++) 
1604:  MOVLW  01
1606:  MOVWF  x4E
1608:  MOVF   x4E,W
160A:  SUBLW  08
160C:  BNC   1636
....................    { 
....................      valor= read_adc(); 
160E:  BSF    FC2.2
1610:  BTFSC  FC2.2
1612:  BRA    1610
1614:  MOVFF  FC3,44C
1618:  MOVFF  FC4,44D
....................      delay_ms(4); 
161C:  MOVLW  04
161E:  MOVLB  5
1620:  MOVWF  xA3
1622:  MOVLB  0
1624:  CALL   037C
....................      mediaAD_L2 = mediaAD_L2 + valor; 
1628:  MOVLB  4
162A:  MOVF   x4C,W
162C:  ADDWF  x44,F
162E:  MOVF   x4D,W
1630:  ADDWFC x45,F
....................    } 
1632:  INCF   x4E,F
1634:  BRA    1608
....................    mediaAD_L2= mediaAD_L2/8; 
1636:  RRCF   x45,F
1638:  RRCF   x44,F
163A:  RRCF   x45,F
163C:  RRCF   x44,F
163E:  RRCF   x45,F
1640:  RRCF   x44,F
1642:  MOVLW  1F
1644:  ANDWF  x45,F
....................    tensao=(float)mediaAD_L2*4.8828; 
1646:  MOVFF  445,5A4
164A:  MOVFF  444,5A3
164E:  MOVLB  0
1650:  CALL   07E0
1654:  MOVFF  00,476
1658:  MOVFF  01,477
165C:  MOVFF  02,478
1660:  MOVFF  03,479
1664:  MOVFF  03,5B3
1668:  MOVFF  02,5B2
166C:  MOVFF  01,5B1
1670:  MOVFF  00,5B0
1674:  MOVLW  E6
1676:  MOVLB  5
1678:  MOVWF  xB7
167A:  MOVLW  3F
167C:  MOVWF  xB6
167E:  MOVLW  1C
1680:  MOVWF  xB5
1682:  MOVLW  81
1684:  MOVWF  xB4
1686:  MOVLB  0
1688:  CALL   0816
168C:  MOVFF  03,44B
1690:  MOVFF  02,44A
1694:  MOVFF  01,449
1698:  MOVFF  00,448
....................    L2_real=(float) (tensao - Offset_L2)/ref_L2; 
169C:  MOVFF  421,5A4
16A0:  MOVFF  420,5A3
16A4:  CALL   07E0
16A8:  BSF    FD8.1
16AA:  MOVFF  44B,5A6
16AE:  MOVFF  44A,5A5
16B2:  MOVFF  449,5A4
16B6:  MOVFF  448,5A3
16BA:  MOVFF  03,5AA
16BE:  MOVFF  02,5A9
16C2:  MOVFF  01,5A8
16C6:  MOVFF  00,5A7
16CA:  CALL   090C
16CE:  MOVFF  00,476
16D2:  MOVFF  01,477
16D6:  MOVFF  02,478
16DA:  MOVFF  03,479
16DE:  MOVFF  03,5AA
16E2:  MOVFF  02,5A9
16E6:  MOVFF  01,5A8
16EA:  MOVFF  00,5A7
16EE:  MOVFF  425,5AE
16F2:  MOVFF  424,5AD
16F6:  MOVFF  423,5AC
16FA:  MOVFF  422,5AB
16FE:  CALL   0B84
1702:  MOVFF  03,42D
1706:  MOVFF  02,42C
170A:  MOVFF  01,42B
170E:  MOVFF  00,42A
....................     
....................       //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep2++; 
1712:  MOVLB  4
1714:  INCF   x2E,F
....................    L2_eq=L2_eq+L2_real; 
1716:  BCF    FD8.1
1718:  MOVFF  429,5A6
171C:  MOVFF  428,5A5
1720:  MOVFF  427,5A4
1724:  MOVFF  426,5A3
1728:  MOVFF  42D,5AA
172C:  MOVFF  42C,5A9
1730:  MOVFF  42B,5A8
1734:  MOVFF  42A,5A7
1738:  MOVLB  0
173A:  CALL   090C
173E:  MOVFF  03,429
1742:  MOVFF  02,428
1746:  MOVFF  01,427
174A:  MOVFF  00,426
....................   
....................    if(rep2>=10) 
174E:  MOVLB  4
1750:  MOVF   x2E,W
1752:  SUBLW  09
1754:  BC    17A6
....................    { 
....................     L2_eq = L2_eq/10;  
1756:  MOVFF  429,5AA
175A:  MOVFF  428,5A9
175E:  MOVFF  427,5A8
1762:  MOVFF  426,5A7
1766:  MOVLB  5
1768:  CLRF   xAE
176A:  CLRF   xAD
176C:  MOVLW  20
176E:  MOVWF  xAC
1770:  MOVLW  82
1772:  MOVWF  xAB
1774:  MOVLB  0
1776:  CALL   0B84
177A:  MOVFF  03,429
177E:  MOVFF  02,428
1782:  MOVFF  01,427
1786:  MOVFF  00,426
....................     L2 = L2_eq; 
178A:  MOVFF  429,41F
178E:  MOVFF  428,41E
1792:  MOVFF  427,41D
1796:  MOVFF  426,41C
....................     rep2=0; 
179A:  MOVLB  4
179C:  CLRF   x2E
....................     L2_eq=0; 
179E:  CLRF   x29
17A0:  CLRF   x28
17A2:  CLRF   x27
17A4:  CLRF   x26
....................    } 
....................     
....................            
....................    if (L2<0) 
17A6:  MOVFF  41F,5A6
17AA:  MOVFF  41E,5A5
17AE:  MOVFF  41D,5A4
17B2:  MOVFF  41C,5A3
17B6:  MOVLB  5
17B8:  CLRF   xAA
17BA:  CLRF   xA9
17BC:  CLRF   xA8
17BE:  CLRF   xA7
17C0:  MOVLB  0
17C2:  CALL   0CE2
17C6:  BNC   17D2
....................    { 
....................      L2=0; 
17C8:  MOVLB  4
17CA:  CLRF   x1F
17CC:  CLRF   x1E
17CE:  CLRF   x1D
17D0:  CLRF   x1C
....................    } 
....................       
....................    sprintf(string, "%.1f", (float)L2); // Converte adc em texto 
17D2:  MOVLW  04
17D4:  MOVLB  4
17D6:  MOVWF  x6E
17D8:  MOVLW  6F
17DA:  MOVWF  x6D
17DC:  MOVLW  89
17DE:  MOVWF  FE9
17E0:  MOVFF  41F,5A6
17E4:  MOVFF  41E,5A5
17E8:  MOVFF  41D,5A4
17EC:  MOVFF  41C,5A3
17F0:  MOVLW  01
17F2:  MOVLB  5
17F4:  MOVWF  xA7
17F6:  MOVLB  0
17F8:  CALL   0E56
....................       
....................    if(L2>=100) 
17FC:  MOVLB  5
17FE:  CLRF   xA6
1800:  CLRF   xA5
1802:  MOVLW  48
1804:  MOVWF  xA4
1806:  MOVLW  85
1808:  MOVWF  xA3
180A:  MOVFF  41F,5AA
180E:  MOVFF  41E,5A9
1812:  MOVFF  41D,5A8
1816:  MOVFF  41C,5A7
181A:  MOVLB  0
181C:  CALL   0CE2
1820:  BC    1824
1822:  BNZ   182C
....................    { 
....................      string[6] = '\0'; 
1824:  MOVLB  4
1826:  CLRF   x75
....................      string[5] = 'A'; 
1828:  MOVLW  41
182A:  MOVWF  x74
....................    } 
....................    if(L2<100) 
182C:  MOVFF  41F,5A6
1830:  MOVFF  41E,5A5
1834:  MOVFF  41D,5A4
1838:  MOVFF  41C,5A3
183C:  MOVLB  5
183E:  CLRF   xAA
1840:  CLRF   xA9
1842:  MOVLW  48
1844:  MOVWF  xA8
1846:  MOVLW  85
1848:  MOVWF  xA7
184A:  MOVLB  0
184C:  CALL   0CE2
1850:  BNC   185A
....................    { 
....................      string[5] = '\0'; 
1852:  MOVLB  4
1854:  CLRF   x74
....................      string[4] = 'A'; 
1856:  MOVLW  41
1858:  MOVWF  x73
....................    } 
....................    if(L2<10) 
185A:  MOVFF  41F,5A6
185E:  MOVFF  41E,5A5
1862:  MOVFF  41D,5A4
1866:  MOVFF  41C,5A3
186A:  MOVLB  5
186C:  CLRF   xAA
186E:  CLRF   xA9
1870:  MOVLW  20
1872:  MOVWF  xA8
1874:  MOVLW  82
1876:  MOVWF  xA7
1878:  MOVLB  0
187A:  CALL   0CE2
187E:  BNC   1888
....................    { 
....................      string[4] = '\0'; 
1880:  MOVLB  4
1882:  CLRF   x73
....................      string[3] = 'A'; 
1884:  MOVLW  41
1886:  MOVWF  x72
....................    } 
....................       
....................    glcd_text57(18, 10, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
1888:  MOVLW  12
188A:  MOVLB  5
188C:  MOVWF  xA3
188E:  MOVLW  0A
1890:  MOVWF  xA4
1892:  MOVLW  04
1894:  MOVWF  xA6
1896:  MOVLW  6F
1898:  MOVWF  xA5
189A:  MOVLW  01
189C:  MOVWF  xA7
189E:  MOVWF  xA8
18A0:  MOVLB  0
18A2:  RCALL  10FE
....................     
....................    sprintf(string, "L2:"); // converte char em texto 
18A4:  MOVLW  04
18A6:  MOVLB  4
18A8:  MOVWF  x6E
18AA:  MOVLW  6F
18AC:  MOVWF  x6D
18AE:  MOVLW  04
18B0:  MOVWF  FF6
18B2:  MOVLW  02
18B4:  MOVWF  FF7
18B6:  MOVLB  0
18B8:  RCALL  12A6
....................    string[3] = '\0'; 
18BA:  MOVLB  4
18BC:  CLRF   x72
....................    glcd_text57(1, 10, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
18BE:  MOVLW  01
18C0:  MOVLB  5
18C2:  MOVWF  xA3
18C4:  MOVLW  0A
18C6:  MOVWF  xA4
18C8:  MOVLW  04
18CA:  MOVWF  xA6
18CC:  MOVLW  6F
18CE:  MOVWF  xA5
18D0:  MOVLW  01
18D2:  MOVWF  xA7
18D4:  MOVWF  xA8
18D6:  MOVLB  0
18D8:  RCALL  10FE
....................       
....................      
....................   //------LEITURA DO SENSOR DE string L3  -------- 
....................      
....................    set_adc_channel(2); 
18DA:  MOVLW  10
18DC:  MOVWF  01
18DE:  MOVF   FC2,W
18E0:  ANDLW  C7
18E2:  IORWF  01,W
18E4:  MOVWF  FC2
....................    delay_us(20); 
18E6:  MOVLW  1A
18E8:  MOVWF  00
18EA:  DECFSZ 00,F
18EC:  BRA    18EA
18EE:  NOP   
....................    mediaAD_L3=0; valor=0; tensao=0; 
18F0:  MOVLB  4
18F2:  CLRF   x47
18F4:  CLRF   x46
18F6:  CLRF   x4D
18F8:  CLRF   x4C
18FA:  CLRF   x4B
18FC:  CLRF   x4A
18FE:  CLRF   x49
1900:  CLRF   x48
....................     
....................    for(rep=1; rep<=8; rep++) 
1902:  MOVLW  01
1904:  MOVWF  x4E
1906:  MOVF   x4E,W
1908:  SUBLW  08
190A:  BNC   1934
....................    { 
....................      valor= read_adc(); 
190C:  BSF    FC2.2
190E:  BTFSC  FC2.2
1910:  BRA    190E
1912:  MOVFF  FC3,44C
1916:  MOVFF  FC4,44D
....................      delay_ms(4); 
191A:  MOVLW  04
191C:  MOVLB  5
191E:  MOVWF  xA3
1920:  MOVLB  0
1922:  CALL   037C
....................      mediaAD_L3= mediaAD_L3 + valor; 
1926:  MOVLB  4
1928:  MOVF   x4C,W
192A:  ADDWF  x46,F
192C:  MOVF   x4D,W
192E:  ADDWFC x47,F
....................    } 
1930:  INCF   x4E,F
1932:  BRA    1906
....................    mediaAD_L3= mediaAD_L3/8; 
1934:  RRCF   x47,F
1936:  RRCF   x46,F
1938:  RRCF   x47,F
193A:  RRCF   x46,F
193C:  RRCF   x47,F
193E:  RRCF   x46,F
1940:  MOVLW  1F
1942:  ANDWF  x47,F
....................    tensao=(float)mediaAD_L3*4.8828; 
1944:  MOVFF  447,5A4
1948:  MOVFF  446,5A3
194C:  MOVLB  0
194E:  CALL   07E0
1952:  MOVFF  00,476
1956:  MOVFF  01,477
195A:  MOVFF  02,478
195E:  MOVFF  03,479
1962:  MOVFF  03,5B3
1966:  MOVFF  02,5B2
196A:  MOVFF  01,5B1
196E:  MOVFF  00,5B0
1972:  MOVLW  E6
1974:  MOVLB  5
1976:  MOVWF  xB7
1978:  MOVLW  3F
197A:  MOVWF  xB6
197C:  MOVLW  1C
197E:  MOVWF  xB5
1980:  MOVLW  81
1982:  MOVWF  xB4
1984:  MOVLB  0
1986:  CALL   0816
198A:  MOVFF  03,44B
198E:  MOVFF  02,44A
1992:  MOVFF  01,449
1996:  MOVFF  00,448
....................    L3_real=(float) (tensao - Offset_L3)/ref_L3; 
199A:  MOVFF  434,5A4
199E:  MOVFF  433,5A3
19A2:  CALL   07E0
19A6:  BSF    FD8.1
19A8:  MOVFF  44B,5A6
19AC:  MOVFF  44A,5A5
19B0:  MOVFF  449,5A4
19B4:  MOVFF  448,5A3
19B8:  MOVFF  03,5AA
19BC:  MOVFF  02,5A9
19C0:  MOVFF  01,5A8
19C4:  MOVFF  00,5A7
19C8:  CALL   090C
19CC:  MOVFF  00,476
19D0:  MOVFF  01,477
19D4:  MOVFF  02,478
19D8:  MOVFF  03,479
19DC:  MOVFF  03,5AA
19E0:  MOVFF  02,5A9
19E4:  MOVFF  01,5A8
19E8:  MOVFF  00,5A7
19EC:  MOVFF  438,5AE
19F0:  MOVFF  437,5AD
19F4:  MOVFF  436,5AC
19F8:  MOVFF  435,5AB
19FC:  CALL   0B84
1A00:  MOVFF  03,440
1A04:  MOVFF  02,43F
1A08:  MOVFF  01,43E
1A0C:  MOVFF  00,43D
....................       
....................    rep3++; 
1A10:  MOVLB  4
1A12:  INCF   x41,F
....................    L3_eq=L3_eq+L3_real; 
1A14:  BCF    FD8.1
1A16:  MOVFF  43C,5A6
1A1A:  MOVFF  43B,5A5
1A1E:  MOVFF  43A,5A4
1A22:  MOVFF  439,5A3
1A26:  MOVFF  440,5AA
1A2A:  MOVFF  43F,5A9
1A2E:  MOVFF  43E,5A8
1A32:  MOVFF  43D,5A7
1A36:  MOVLB  0
1A38:  CALL   090C
1A3C:  MOVFF  03,43C
1A40:  MOVFF  02,43B
1A44:  MOVFF  01,43A
1A48:  MOVFF  00,439
....................   
....................    if(rep3>=10) 
1A4C:  MOVLB  4
1A4E:  MOVF   x41,W
1A50:  SUBLW  09
1A52:  BC    1AA4
....................    { 
....................     L3_eq = L3_eq/10;  
1A54:  MOVFF  43C,5AA
1A58:  MOVFF  43B,5A9
1A5C:  MOVFF  43A,5A8
1A60:  MOVFF  439,5A7
1A64:  MOVLB  5
1A66:  CLRF   xAE
1A68:  CLRF   xAD
1A6A:  MOVLW  20
1A6C:  MOVWF  xAC
1A6E:  MOVLW  82
1A70:  MOVWF  xAB
1A72:  MOVLB  0
1A74:  CALL   0B84
1A78:  MOVFF  03,43C
1A7C:  MOVFF  02,43B
1A80:  MOVFF  01,43A
1A84:  MOVFF  00,439
....................     L3 = L3_eq; 
1A88:  MOVFF  43C,432
1A8C:  MOVFF  43B,431
1A90:  MOVFF  43A,430
1A94:  MOVFF  439,42F
....................     rep3=0; 
1A98:  MOVLB  4
1A9A:  CLRF   x41
....................     L3_eq=0; 
1A9C:  CLRF   x3C
1A9E:  CLRF   x3B
1AA0:  CLRF   x3A
1AA2:  CLRF   x39
....................    } 
....................     
....................       
....................    if (L3<0) 
1AA4:  MOVFF  432,5A6
1AA8:  MOVFF  431,5A5
1AAC:  MOVFF  430,5A4
1AB0:  MOVFF  42F,5A3
1AB4:  MOVLB  5
1AB6:  CLRF   xAA
1AB8:  CLRF   xA9
1ABA:  CLRF   xA8
1ABC:  CLRF   xA7
1ABE:  MOVLB  0
1AC0:  CALL   0CE2
1AC4:  BNC   1AD0
....................    { 
....................       L3=0; 
1AC6:  MOVLB  4
1AC8:  CLRF   x32
1ACA:  CLRF   x31
1ACC:  CLRF   x30
1ACE:  CLRF   x2F
....................    } 
....................       
....................    sprintf(string, "%.1f", (float)L3); // Converts adc em texto 
1AD0:  MOVLW  04
1AD2:  MOVLB  4
1AD4:  MOVWF  x6E
1AD6:  MOVLW  6F
1AD8:  MOVWF  x6D
1ADA:  MOVLW  89
1ADC:  MOVWF  FE9
1ADE:  MOVFF  432,5A6
1AE2:  MOVFF  431,5A5
1AE6:  MOVFF  430,5A4
1AEA:  MOVFF  42F,5A3
1AEE:  MOVLW  01
1AF0:  MOVLB  5
1AF2:  MOVWF  xA7
1AF4:  MOVLB  0
1AF6:  CALL   0E56
....................    if(L3>=100) 
1AFA:  MOVLB  5
1AFC:  CLRF   xA6
1AFE:  CLRF   xA5
1B00:  MOVLW  48
1B02:  MOVWF  xA4
1B04:  MOVLW  85
1B06:  MOVWF  xA3
1B08:  MOVFF  432,5AA
1B0C:  MOVFF  431,5A9
1B10:  MOVFF  430,5A8
1B14:  MOVFF  42F,5A7
1B18:  MOVLB  0
1B1A:  CALL   0CE2
1B1E:  BC    1B22
1B20:  BNZ   1B2A
....................    { 
....................      string[6] = '\0'; 
1B22:  MOVLB  4
1B24:  CLRF   x75
....................      string[5] = 'A'; 
1B26:  MOVLW  41
1B28:  MOVWF  x74
....................    } 
....................    if(L3<100) 
1B2A:  MOVFF  432,5A6
1B2E:  MOVFF  431,5A5
1B32:  MOVFF  430,5A4
1B36:  MOVFF  42F,5A3
1B3A:  MOVLB  5
1B3C:  CLRF   xAA
1B3E:  CLRF   xA9
1B40:  MOVLW  48
1B42:  MOVWF  xA8
1B44:  MOVLW  85
1B46:  MOVWF  xA7
1B48:  MOVLB  0
1B4A:  CALL   0CE2
1B4E:  BNC   1B58
....................    { 
....................      string[5] = '\0'; 
1B50:  MOVLB  4
1B52:  CLRF   x74
....................      string[4] = 'A'; 
1B54:  MOVLW  41
1B56:  MOVWF  x73
....................    } 
....................    if(L3<10) 
1B58:  MOVFF  432,5A6
1B5C:  MOVFF  431,5A5
1B60:  MOVFF  430,5A4
1B64:  MOVFF  42F,5A3
1B68:  MOVLB  5
1B6A:  CLRF   xAA
1B6C:  CLRF   xA9
1B6E:  MOVLW  20
1B70:  MOVWF  xA8
1B72:  MOVLW  82
1B74:  MOVWF  xA7
1B76:  MOVLB  0
1B78:  CALL   0CE2
1B7C:  BNC   1B86
....................    { 
....................      string[4] = '\0'; 
1B7E:  MOVLB  4
1B80:  CLRF   x73
....................      string[3] = 'A'; 
1B82:  MOVLW  41
1B84:  MOVWF  x72
....................    } 
....................       
....................    glcd_text57(18, 19, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
1B86:  MOVLW  12
1B88:  MOVLB  5
1B8A:  MOVWF  xA3
1B8C:  MOVLW  13
1B8E:  MOVWF  xA4
1B90:  MOVLW  04
1B92:  MOVWF  xA6
1B94:  MOVLW  6F
1B96:  MOVWF  xA5
1B98:  MOVLW  01
1B9A:  MOVWF  xA7
1B9C:  MOVWF  xA8
1B9E:  MOVLB  0
1BA0:  CALL   10FE
....................       
....................    sprintf(string, "L3:"); // converte char em texto 
1BA4:  MOVLW  04
1BA6:  MOVLB  4
1BA8:  MOVWF  x6E
1BAA:  MOVLW  6F
1BAC:  MOVWF  x6D
1BAE:  MOVLW  08
1BB0:  MOVWF  FF6
1BB2:  MOVLW  02
1BB4:  MOVWF  FF7
1BB6:  MOVLB  0
1BB8:  CALL   12A6
....................    string[3] = '\0'; 
1BBC:  MOVLB  4
1BBE:  CLRF   x72
....................    glcd_text57(1, 19, string, 1, on);//printf (linha, coluna, string,tamanho, color)   
1BC0:  MOVLW  01
1BC2:  MOVLB  5
1BC4:  MOVWF  xA3
1BC6:  MOVLW  13
1BC8:  MOVWF  xA4
1BCA:  MOVLW  04
1BCC:  MOVWF  xA6
1BCE:  MOVLW  6F
1BD0:  MOVWF  xA5
1BD2:  MOVLW  01
1BD4:  MOVWF  xA7
1BD6:  MOVWF  xA8
1BD8:  MOVLB  0
1BDA:  CALL   10FE
1BDE:  MOVLB  4
....................      
....................   // glcd_update();//update glcd 
....................    
....................   } //if menu 
....................     
....................  }//leitura sensores 
1BE0:  MOVLB  0
1BE2:  GOTO   3D18 (RETURN)
....................     
....................  void controle_saidas() 
.................... { 
....................   
....................  if(menu_lib==0||menu>=1) 
*
39E6:  MOVLB  4
39E8:  MOVF   x50,F
39EA:  BZ    39F2
39EC:  MOVF   x4F,W
39EE:  SUBLW  00
39F0:  BC    3A70
....................  { 
....................   if(!input (pin_D0)) 
39F2:  BSF    F95.0
39F4:  BTFSC  F83.0
39F6:  BRA    39FA
....................   { 
....................     start_on=0; 
39F8:  CLRF   x07
....................   } 
....................   if(!input(pin_D1)&&input(pin_D0)&&filtro==0) 
39FA:  BSF    F95.1
39FC:  BTFSC  F83.1
39FE:  BRA    3A10
3A00:  BSF    F95.0
3A02:  BTFSS  F83.0
3A04:  BRA    3A10
3A06:  MOVF   x08,F
3A08:  BNZ   3A10
....................   { 
....................     start_on=1; 
3A0A:  MOVLW  01
3A0C:  MOVWF  x07
....................     filtro++; 
3A0E:  INCF   x08,F
....................   } 
....................   if(start_on==1) 
3A10:  DECFSZ x07,W
3A12:  BRA    3A26
....................   { 
....................     output_high(pin_C4); 
3A14:  BCF    F94.4
3A16:  BSF    F8B.4
....................     output_high(pin_D3); 
3A18:  BCF    F95.3
3A1A:  BSF    F8C.3
....................     output_low(pin_D2); 
3A1C:  BCF    F95.2
3A1E:  BCF    F8C.2
....................     tempo_on++;                                     
3A20:  INCF   x05,F
3A22:  BTFSC  FD8.2
3A24:  INCF   x06,F
....................   } 
....................   if(tempo_on==TempoET&&start_on==1)        
3A26:  MOVF   x53,W
3A28:  SUBWF  x05,W
3A2A:  BNZ   3A48
3A2C:  MOVF   x06,F
3A2E:  BNZ   3A48
3A30:  DECFSZ x07,W
3A32:  BRA    3A48
....................   {  
....................     output_high(pin_C4); 
3A34:  BCF    F94.4
3A36:  BSF    F8B.4
....................     output_low(pin_D3); 
3A38:  BCF    F95.3
3A3A:  BCF    F8C.3
....................     output_high(pin_D2); 
3A3C:  BCF    F95.2
3A3E:  BSF    F8C.2
....................     start_on=2; 
3A40:  MOVLW  02
3A42:  MOVWF  x07
....................     tempo_on=0; 
3A44:  CLRF   x06
3A46:  CLRF   x05
....................   }  
....................   if(start_on==2) 
3A48:  MOVF   x07,W
3A4A:  SUBLW  02
3A4C:  BNZ   3A5A
....................   { 
....................     output_high(pin_C4); 
3A4E:  BCF    F94.4
3A50:  BSF    F8B.4
....................     output_low(pin_D3); 
3A52:  BCF    F95.3
3A54:  BCF    F8C.3
....................     output_high(pin_D2); 
3A56:  BCF    F95.2
3A58:  BSF    F8C.2
....................   } 
....................         
....................   if(start_on==0) 
3A5A:  MOVF   x07,F
3A5C:  BNZ   3A70
....................   { 
....................     output_low(pin_C4); 
3A5E:  BCF    F94.4
3A60:  BCF    F8B.4
....................     output_low(pin_D3); 
3A62:  BCF    F95.3
3A64:  BCF    F8C.3
....................     output_low(pin_D2); 
3A66:  BCF    F95.2
3A68:  BCF    F8C.2
....................     tempo_on=0;   
3A6A:  CLRF   x06
3A6C:  CLRF   x05
....................     filtro=0; 
3A6E:  CLRF   x08
....................   } 
....................  } //if controletring 
.................... } //controle_saidas 
3A70:  MOVLB  0
3A72:  GOTO   3D26 (RETURN)
....................  
....................  void controle_menu() 
....................  { 
....................   glcd_fillScreen(OFF);//clear glcd 
*
23AA:  MOVLB  5
23AC:  CLRF   xA3
23AE:  MOVLB  0
23B0:  CALL   04AA
....................   if(!input(pin_E0)&&menu>0&&menu<6&&filtro_E0==0) // Condição de menu depois de menu=1 
23B4:  BSF    F96.0
23B6:  BTFSC  F84.0
23B8:  BRA    23E2
23BA:  MOVLB  4
23BC:  MOVF   x4F,F
23BE:  BTFSS  FD8.2
23C0:  BRA    23C6
23C2:  MOVLB  0
23C4:  BRA    23E2
23C6:  MOVF   x4F,W
23C8:  SUBLW  05
23CA:  BTFSC  FD8.0
23CC:  BRA    23D2
23CE:  MOVLB  0
23D0:  BRA    23E2
23D2:  MOVF   x51,F
23D4:  BTFSC  FD8.2
23D6:  BRA    23DC
23D8:  MOVLB  0
23DA:  BRA    23E2
....................   { 
....................    menu++; 
23DC:  INCF   x4F,F
....................    filtro_E0++; 
23DE:  INCF   x51,F
23E0:  MOVLB  0
....................   } 
....................   if(!input(pin_E0)&&menu_lib==0&&filtro_E0==0&&menu==0) //  
23E2:  BSF    F96.0
23E4:  BTFSC  F84.0
23E6:  BRA    240E
23E8:  MOVLB  4
23EA:  MOVF   x50,F
23EC:  BTFSC  FD8.2
23EE:  BRA    23F4
23F0:  MOVLB  0
23F2:  BRA    240E
23F4:  MOVF   x51,F
23F6:  BTFSC  FD8.2
23F8:  BRA    23FE
23FA:  MOVLB  0
23FC:  BRA    240E
23FE:  MOVF   x4F,F
2400:  BTFSC  FD8.2
2402:  BRA    2408
2404:  MOVLB  0
2406:  BRA    240E
....................   { 
....................    menu_lib++; 
2408:  INCF   x50,F
....................    filtro_E0++; 
240A:  INCF   x51,F
240C:  MOVLB  0
....................   } 
....................    
....................   if(!input(pin_E0)&&menu_lib==1&&menu==0) // Condição de menu depois de menu=1 
240E:  BSF    F96.0
2410:  BTFSC  F84.0
2412:  BRA    242C
2414:  MOVLB  4
2416:  DECFSZ x50,W
2418:  BRA    241C
241A:  BRA    2420
241C:  MOVLB  0
241E:  BRA    242C
2420:  MOVF   x4F,F
2422:  BTFSC  FD8.2
2424:  BRA    242A
2426:  MOVLB  0
2428:  BRA    242C
....................   { 
....................    filtro_E0++; 
242A:  INCF   x51,F
....................   } 
....................    
....................   if(filtro_E0>20) //Condição para entrar no primeiro menu de calibrações 
242C:  MOVLB  4
242E:  MOVF   x51,W
2430:  SUBLW  14
2432:  BC    2438
....................   { 
....................    menu=1; 
2434:  MOVLW  01
2436:  MOVWF  x4F
....................   } 
....................   
....................   if(input(pin_E0)) //Filtra tecla de descida  
2438:  BSF    F96.0
243A:  BTFSS  F84.0
243C:  BRA    2440
....................   { 
....................    filtro_E0=0; 
243E:  CLRF   x51
....................   } 
....................    
....................   if(!input(pin_C3)&&menu>0&&filtro_c3==0) // Sobe Menu 
2440:  BSF    F94.3
2442:  BTFSC  F82.3
2444:  BRA    2452
2446:  MOVF   x4F,F
2448:  BZ    2452
244A:  MOVF   x52,F
244C:  BNZ   2452
....................   { 
....................    menu--; 
244E:  DECF   x4F,F
....................    filtro_c3++; 
2450:  INCF   x52,F
....................   } 
....................    if(!input(pin_C3)&&menu_lib>0&&filtro_c3==0) // Sobe Menu 
2452:  BSF    F94.3
2454:  BTFSC  F82.3
2456:  BRA    2464
2458:  MOVF   x50,F
245A:  BZ    2464
245C:  MOVF   x52,F
245E:  BNZ   2464
....................   { 
....................    menu_lib--; 
2460:  DECF   x50,F
....................    filtro_c3++; 
2462:  INCF   x52,F
....................   } 
....................    
....................   if(input(pin_C3)) // Filtra tecla de subida 
2464:  BSF    F94.3
2466:  BTFSS  F82.3
2468:  BRA    246C
....................   { 
....................    filtro_c3=0; 
246A:  CLRF   x52
....................   } 
....................      
....................   if(menu_lib==1&&menu==0)  //Menu de ajuste do tempo de estrela / triangulo 
246C:  DECFSZ x50,W
246E:  BRA    25BC
2470:  MOVF   x4F,F
2472:  BTFSS  FD8.2
2474:  BRA    25BC
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
2476:  MOVLB  5
2478:  CLRF   xA3
247A:  MOVLB  0
247C:  CALL   04AA
....................     
....................    char string[41]; 
....................    sprintf(string, "Defina o tempo do    Estrela / Triangulo"); // converte char em texto 
2480:  MOVLW  04
2482:  MOVLB  4
2484:  MOVWF  x6E
2486:  MOVLW  6F
2488:  MOVWF  x6D
248A:  MOVLW  0C
248C:  MOVWF  FF6
248E:  MOVLW  02
2490:  MOVWF  FF7
2492:  MOVLB  0
2494:  CALL   12A6
....................    string[40] = '\0'; 
2498:  MOVLB  4
249A:  CLRF   x97
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
249C:  MOVLW  01
249E:  MOVLB  5
24A0:  MOVWF  xA3
24A2:  MOVWF  xA4
24A4:  MOVLW  04
24A6:  MOVWF  xA6
24A8:  MOVLW  6F
24AA:  MOVWF  xA5
24AC:  MOVLW  01
24AE:  MOVWF  xA7
24B0:  MOVWF  xA8
24B2:  MOVLB  0
24B4:  CALL   10FE
....................     
....................    sprintf(string, "Tempo:"); // converte char em texto 
24B8:  MOVLW  04
24BA:  MOVLB  4
24BC:  MOVWF  x6E
24BE:  MOVLW  6F
24C0:  MOVWF  x6D
24C2:  MOVLW  36
24C4:  MOVWF  FF6
24C6:  MOVLW  02
24C8:  MOVWF  FF7
24CA:  MOVLB  0
24CC:  CALL   12A6
....................    string[6] = '\0'; 
24D0:  MOVLB  4
24D2:  CLRF   x75
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
24D4:  MOVLW  01
24D6:  MOVLB  5
24D8:  MOVWF  xA3
24DA:  MOVLW  19
24DC:  MOVWF  xA4
24DE:  MOVLW  04
24E0:  MOVWF  xA6
24E2:  MOVLW  6F
24E4:  MOVWF  xA5
24E6:  MOVLW  01
24E8:  MOVWF  xA7
24EA:  MOVWF  xA8
24EC:  MOVLB  0
24EE:  CALL   10FE
....................     
....................    sprintf(string, "%.1f",TempoETreal); // Converte adc em texto 
24F2:  MOVLW  04
24F4:  MOVLB  4
24F6:  MOVWF  x6E
24F8:  MOVLW  6F
24FA:  MOVWF  x6D
24FC:  MOVLW  89
24FE:  MOVWF  FE9
2500:  MOVFF  457,5A6
2504:  MOVFF  456,5A5
2508:  MOVFF  455,5A4
250C:  MOVFF  454,5A3
2510:  MOVLW  01
2512:  MOVLB  5
2514:  MOVWF  xA7
2516:  MOVLB  0
2518:  CALL   0E56
....................    string[4] = '\0'; 
251C:  MOVLB  4
251E:  CLRF   x73
....................    string[3] = 's'; 
2520:  MOVLW  73
2522:  MOVWF  x72
....................     
....................  
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2524:  MOVLW  32
2526:  MOVLB  5
2528:  MOVWF  xA3
252A:  MOVLW  19
252C:  MOVWF  xA4
252E:  MOVLW  04
2530:  MOVWF  xA6
2532:  MOVLW  6F
2534:  MOVWF  xA5
2536:  MOVLW  01
2538:  MOVWF  xA7
253A:  MOVWF  xA8
253C:  MOVLB  0
253E:  CALL   10FE
....................     
....................    if(!input(pin_E1)&&TempoET<45) //incrementa && valor maximo 
2542:  BSF    F96.1
2544:  BTFSC  F84.1
2546:  BRA    255A
2548:  MOVLB  4
254A:  MOVF   x53,W
254C:  SUBLW  2C
254E:  BTFSC  FD8.0
2550:  BRA    2556
2552:  MOVLB  0
2554:  BRA    255A
....................    { 
....................     TempoET++; 
2556:  INCF   x53,F
2558:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&TempoET>5) //decrementa && valor minimo 
255A:  BSF    F94.2
255C:  BTFSC  F82.2
255E:  BRA    2570
2560:  MOVLB  4
2562:  MOVF   x53,W
2564:  SUBLW  05
2566:  BTFSS  FD8.0
2568:  BRA    256E
256A:  MOVLB  0
256C:  BRA    2570
....................    { 
....................     TempoET--; 
256E:  DECF   x53,F
....................    } 
....................    TempoETreal = TempoET/4.54; //converte em segungos 
2570:  MOVLB  5
2572:  CLRF   xA4
2574:  MOVFF  453,5A3
2578:  MOVLB  0
257A:  CALL   07E0
257E:  MOVFF  03,5AA
2582:  MOVFF  02,5A9
2586:  MOVFF  01,5A8
258A:  MOVFF  00,5A7
258E:  MOVLW  AE
2590:  MOVLB  5
2592:  MOVWF  xAE
2594:  MOVLW  47
2596:  MOVWF  xAD
2598:  MOVLW  11
259A:  MOVWF  xAC
259C:  MOVLW  81
259E:  MOVWF  xAB
25A0:  MOVLB  0
25A2:  CALL   0B84
25A6:  MOVFF  03,457
25AA:  MOVFF  02,456
25AE:  MOVFF  01,455
25B2:  MOVFF  00,454
....................     
....................    glcd_update();//update glcd 
25B6:  CALL   05E6
25BA:  MOVLB  4
....................    
....................   } //if menu_lib=1 
....................  
....................   if(menu==1)  //Menu de calibração do sensor L1 (offset) 
25BC:  DECFSZ x4F,W
25BE:  BRA    2766
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
25C0:  MOVLB  5
25C2:  CLRF   xA3
25C4:  MOVLB  0
25C6:  CALL   04AA
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L1"); // converte char em texto 
25CA:  MOVLW  04
25CC:  MOVLB  4
25CE:  MOVWF  x6E
25D0:  MOVLW  98
25D2:  MOVWF  x6D
25D4:  MOVLW  3E
25D6:  MOVWF  FF6
25D8:  MOVLW  02
25DA:  MOVWF  FF7
25DC:  MOVLB  0
25DE:  CALL   12A6
....................    string[40] = '\0'; 
25E2:  MOVLB  4
25E4:  CLRF   xC0
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
25E6:  MOVLW  01
25E8:  MOVLB  5
25EA:  MOVWF  xA3
25EC:  MOVWF  xA4
25EE:  MOVLW  04
25F0:  MOVWF  xA6
25F2:  MOVLW  98
25F4:  MOVWF  xA5
25F6:  MOVLW  01
25F8:  MOVWF  xA7
25FA:  MOVWF  xA8
25FC:  MOVLB  0
25FE:  CALL   10FE
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
2602:  MOVLB  5
2604:  CLRF   xA3
2606:  MOVLW  18
2608:  MOVWF  xA4
260A:  MOVLW  50
260C:  MOVWF  xA5
260E:  MOVLW  20
2610:  MOVWF  xA6
2612:  MOVLW  01
2614:  MOVWF  xA7
2616:  MOVWF  xA8
2618:  MOVLB  0
261A:  RCALL  21F0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
261C:  MOVLW  04
261E:  MOVLB  4
2620:  MOVWF  x6E
2622:  MOVLW  98
2624:  MOVWF  x6D
2626:  MOVLW  60
2628:  MOVWF  FF6
262A:  MOVLW  02
262C:  MOVWF  FF7
262E:  MOVLB  0
2630:  CALL   12A6
....................    glcd_text57(1, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2634:  MOVLW  01
2636:  MOVLB  5
2638:  MOVWF  xA3
263A:  MOVLW  19
263C:  MOVWF  xA4
263E:  MOVLW  04
2640:  MOVWF  xA6
2642:  MOVLW  98
2644:  MOVWF  xA5
2646:  MOVLW  01
2648:  MOVWF  xA7
264A:  CLRF   xA8
264C:  MOVLB  0
264E:  CALL   10FE
....................     
....................    sprintf(string, "%ld",Offset_L1); // Converte adc em texto 
2652:  MOVLW  04
2654:  MOVLB  4
2656:  MOVWF  x6E
2658:  MOVLW  98
265A:  MOVWF  x6D
265C:  MOVLW  10
265E:  MOVWF  FE9
2660:  MOVFF  40E,5A4
2664:  MOVFF  40D,5A3
2668:  MOVLB  0
266A:  RCALL  22B4
....................    glcd_text57(50, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
266C:  MOVLW  32
266E:  MOVLB  5
2670:  MOVWF  xA3
2672:  MOVLW  19
2674:  MOVWF  xA4
2676:  MOVLW  04
2678:  MOVWF  xA6
267A:  MOVLW  98
267C:  MOVWF  xA5
267E:  MOVLW  01
2680:  MOVWF  xA7
2682:  CLRF   xA8
2684:  MOVLB  0
2686:  CALL   10FE
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
268A:  MOVLW  04
268C:  MOVLB  4
268E:  MOVWF  x6E
2690:  MOVLW  98
2692:  MOVWF  x6D
2694:  MOVLW  68
2696:  MOVWF  FF6
2698:  MOVLW  02
269A:  MOVWF  FF7
269C:  MOVLB  0
269E:  CALL   12A6
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
26A2:  MOVLW  01
26A4:  MOVLB  5
26A6:  MOVWF  xA3
26A8:  MOVLW  23
26AA:  MOVWF  xA4
26AC:  MOVLW  04
26AE:  MOVWF  xA6
26B0:  MOVLW  98
26B2:  MOVWF  xA5
26B4:  MOVLW  01
26B6:  MOVWF  xA7
26B8:  MOVWF  xA8
26BA:  MOVLB  0
26BC:  CALL   10FE
....................     
....................    sprintf(string, "%f",ref_L1); // Converte adc em texto 
26C0:  MOVLW  04
26C2:  MOVLB  4
26C4:  MOVWF  x6E
26C6:  MOVLW  98
26C8:  MOVWF  x6D
26CA:  MOVLW  89
26CC:  MOVWF  FE9
26CE:  MOVFF  412,5A6
26D2:  MOVFF  411,5A5
26D6:  MOVFF  410,5A4
26DA:  MOVFF  40F,5A3
26DE:  MOVLW  02
26E0:  MOVLB  5
26E2:  MOVWF  xA7
26E4:  MOVLB  0
26E6:  CALL   0E56
....................    glcd_text57(50, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
26EA:  MOVLW  32
26EC:  MOVLB  5
26EE:  MOVWF  xA3
26F0:  MOVLW  23
26F2:  MOVWF  xA4
26F4:  MOVLW  04
26F6:  MOVWF  xA6
26F8:  MOVLW  98
26FA:  MOVWF  xA5
26FC:  MOVLW  01
26FE:  MOVWF  xA7
2700:  MOVWF  xA8
2702:  MOVLB  0
2704:  CALL   10FE
....................     
....................    if(!input(pin_E1)&&Offset_L1<5000) //incrementa && valor maximo 
2708:  BSF    F96.1
270A:  BTFSC  F84.1
270C:  BRA    2732
270E:  MOVLB  4
2710:  MOVF   x0E,W
2712:  SUBLW  13
2714:  BTFSC  FD8.0
2716:  BRA    271C
2718:  MOVLB  0
271A:  BRA    2732
271C:  BNZ   272A
271E:  MOVF   x0D,W
2720:  SUBLW  87
2722:  BTFSC  FD8.0
2724:  BRA    272A
2726:  MOVLB  0
2728:  BRA    2732
....................    { 
....................      Offset_L1++; 
272A:  INCF   x0D,F
272C:  BTFSC  FD8.2
272E:  INCF   x0E,F
2730:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&Offset_L1>2000) //decrementa && valor minimo 
2732:  BSF    F94.2
2734:  BTFSC  F82.2
2736:  BRA    2760
2738:  MOVLB  4
273A:  MOVF   x0E,W
273C:  SUBLW  06
273E:  BTFSS  FD8.0
2740:  BRA    2746
2742:  MOVLB  0
2744:  BRA    2760
2746:  XORLW  FF
2748:  BNZ   2756
274A:  MOVF   x0D,W
274C:  SUBLW  D0
274E:  BTFSS  FD8.0
2750:  BRA    2756
2752:  MOVLB  0
2754:  BRA    2760
....................    { 
....................      Offset_L1--; 
2756:  MOVF   x0D,W
2758:  BTFSC  FD8.2
275A:  DECF   x0E,F
275C:  DECF   x0D,F
275E:  MOVLB  0
....................    } 
....................    glcd_update();//update glcd 
2760:  CALL   05E6
2764:  MOVLB  4
....................    
....................   }//if menu=2 
....................    
....................   if(menu==2)  //Menu de calibração do sensor L1 (Ref) 
2766:  MOVF   x4F,W
2768:  SUBLW  02
276A:  BTFSS  FD8.2
276C:  BRA    2988
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
276E:  MOVLB  5
2770:  CLRF   xA3
2772:  MOVLB  0
2774:  CALL   04AA
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L1"); // converte char em texto 
2778:  MOVLW  04
277A:  MOVLB  4
277C:  MOVWF  x6E
277E:  MOVLW  C1
2780:  MOVWF  x6D
2782:  MOVLW  6E
2784:  MOVWF  FF6
2786:  MOVLW  02
2788:  MOVWF  FF7
278A:  MOVLB  0
278C:  CALL   12A6
....................    string[40] = '\0'; 
2790:  MOVLB  4
2792:  CLRF   xE9
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2794:  MOVLW  01
2796:  MOVLB  5
2798:  MOVWF  xA3
279A:  MOVWF  xA4
279C:  MOVLW  04
279E:  MOVWF  xA6
27A0:  MOVLW  C1
27A2:  MOVWF  xA5
27A4:  MOVLW  01
27A6:  MOVWF  xA7
27A8:  MOVWF  xA8
27AA:  MOVLB  0
27AC:  CALL   10FE
....................     
....................    glcd_rect(0, 34, 80, 42, yes, on); 
27B0:  MOVLB  5
27B2:  CLRF   xA3
27B4:  MOVLW  22
27B6:  MOVWF  xA4
27B8:  MOVLW  50
27BA:  MOVWF  xA5
27BC:  MOVLW  2A
27BE:  MOVWF  xA6
27C0:  MOVLW  01
27C2:  MOVWF  xA7
27C4:  MOVWF  xA8
27C6:  MOVLB  0
27C8:  RCALL  21F0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
27CA:  MOVLW  04
27CC:  MOVLB  4
27CE:  MOVWF  x6E
27D0:  MOVLW  C1
27D2:  MOVWF  x6D
27D4:  MOVLW  90
27D6:  MOVWF  FF6
27D8:  MOVLW  02
27DA:  MOVWF  FF7
27DC:  MOVLB  0
27DE:  CALL   12A6
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
27E2:  MOVLW  01
27E4:  MOVLB  5
27E6:  MOVWF  xA3
27E8:  MOVLW  19
27EA:  MOVWF  xA4
27EC:  MOVLW  04
27EE:  MOVWF  xA6
27F0:  MOVLW  C1
27F2:  MOVWF  xA5
27F4:  MOVLW  01
27F6:  MOVWF  xA7
27F8:  MOVWF  xA8
27FA:  MOVLB  0
27FC:  CALL   10FE
....................     
....................    sprintf(string, "%ld",Offset_L1); // Converte adc em texto 
2800:  MOVLW  04
2802:  MOVLB  4
2804:  MOVWF  x6E
2806:  MOVLW  C1
2808:  MOVWF  x6D
280A:  MOVLW  10
280C:  MOVWF  FE9
280E:  MOVFF  40E,5A4
2812:  MOVFF  40D,5A3
2816:  MOVLB  0
2818:  RCALL  22B4
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
281A:  MOVLW  32
281C:  MOVLB  5
281E:  MOVWF  xA3
2820:  MOVLW  19
2822:  MOVWF  xA4
2824:  MOVLW  04
2826:  MOVWF  xA6
2828:  MOVLW  C1
282A:  MOVWF  xA5
282C:  MOVLW  01
282E:  MOVWF  xA7
2830:  MOVWF  xA8
2832:  MOVLB  0
2834:  CALL   10FE
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
2838:  MOVLW  04
283A:  MOVLB  4
283C:  MOVWF  x6E
283E:  MOVLW  C1
2840:  MOVWF  x6D
2842:  MOVLW  98
2844:  MOVWF  FF6
2846:  MOVLW  02
2848:  MOVWF  FF7
284A:  MOVLB  0
284C:  CALL   12A6
....................    glcd_text57(1, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2850:  MOVLW  01
2852:  MOVLB  5
2854:  MOVWF  xA3
2856:  MOVLW  23
2858:  MOVWF  xA4
285A:  MOVLW  04
285C:  MOVWF  xA6
285E:  MOVLW  C1
2860:  MOVWF  xA5
2862:  MOVLW  01
2864:  MOVWF  xA7
2866:  CLRF   xA8
2868:  MOVLB  0
286A:  CALL   10FE
....................     
....................    sprintf(string, "%1.2f",ref_L1); // Converte adc em texto 
286E:  MOVLW  04
2870:  MOVLB  4
2872:  MOVWF  x6E
2874:  MOVLW  C1
2876:  MOVWF  x6D
2878:  MOVLW  89
287A:  MOVWF  FE9
287C:  MOVFF  412,5A6
2880:  MOVFF  411,5A5
2884:  MOVFF  410,5A4
2888:  MOVFF  40F,5A3
288C:  MOVLW  02
288E:  MOVLB  5
2890:  MOVWF  xA7
2892:  MOVLB  0
2894:  CALL   0E56
....................    glcd_text57(50, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2898:  MOVLW  32
289A:  MOVLB  5
289C:  MOVWF  xA3
289E:  MOVLW  23
28A0:  MOVWF  xA4
28A2:  MOVLW  04
28A4:  MOVWF  xA6
28A6:  MOVLW  C1
28A8:  MOVWF  xA5
28AA:  MOVLW  01
28AC:  MOVWF  xA7
28AE:  CLRF   xA8
28B0:  MOVLB  0
28B2:  CALL   10FE
....................     
....................     
....................    if(!input(pin_E1)&&ref_L1<30) //incrementa && valor maximo 
28B6:  BSF    F96.1
28B8:  BTFSC  F84.1
28BA:  BRA    291C
28BC:  MOVFF  412,5A6
28C0:  MOVFF  411,5A5
28C4:  MOVFF  410,5A4
28C8:  MOVFF  40F,5A3
28CC:  MOVLB  5
28CE:  CLRF   xAA
28D0:  CLRF   xA9
28D2:  MOVLW  70
28D4:  MOVWF  xA8
28D6:  MOVLW  83
28D8:  MOVWF  xA7
28DA:  MOVLB  0
28DC:  CALL   0CE2
28E0:  BNC   291C
....................    { 
....................      ref_L1=ref_L1+0.1; 
28E2:  BCF    FD8.1
28E4:  MOVFF  412,5A6
28E8:  MOVFF  411,5A5
28EC:  MOVFF  410,5A4
28F0:  MOVFF  40F,5A3
28F4:  MOVLW  CD
28F6:  MOVLB  5
28F8:  MOVWF  xAA
28FA:  MOVLW  CC
28FC:  MOVWF  xA9
28FE:  MOVLW  4C
2900:  MOVWF  xA8
2902:  MOVLW  7B
2904:  MOVWF  xA7
2906:  MOVLB  0
2908:  CALL   090C
290C:  MOVFF  03,412
2910:  MOVFF  02,411
2914:  MOVFF  01,410
2918:  MOVFF  00,40F
....................    } 
....................    if(!input(pin_C2)&&ref_L1>5) //decrementa && valor minimo 
291C:  BSF    F94.2
291E:  BTFSC  F82.2
2920:  BRA    2982
2922:  MOVLB  5
2924:  CLRF   xA6
2926:  CLRF   xA5
2928:  MOVLW  20
292A:  MOVWF  xA4
292C:  MOVLW  81
292E:  MOVWF  xA3
2930:  MOVFF  412,5AA
2934:  MOVFF  411,5A9
2938:  MOVFF  410,5A8
293C:  MOVFF  40F,5A7
2940:  MOVLB  0
2942:  CALL   0CE2
2946:  BNC   2982
....................    { 
....................      ref_L1=ref_L1-0.1; 
2948:  BSF    FD8.1
294A:  MOVFF  412,5A6
294E:  MOVFF  411,5A5
2952:  MOVFF  410,5A4
2956:  MOVFF  40F,5A3
295A:  MOVLW  CD
295C:  MOVLB  5
295E:  MOVWF  xAA
2960:  MOVLW  CC
2962:  MOVWF  xA9
2964:  MOVLW  4C
2966:  MOVWF  xA8
2968:  MOVLW  7B
296A:  MOVWF  xA7
296C:  MOVLB  0
296E:  CALL   090C
2972:  MOVFF  03,412
2976:  MOVFF  02,411
297A:  MOVFF  01,410
297E:  MOVFF  00,40F
....................    } 
....................     
....................    glcd_update();//update glcd 
2982:  CALL   05E6
2986:  MOVLB  4
....................    
....................   }//if menu=3 
....................  
....................   if(menu==1||menu==2) //Strings em comum - calibração do sensor L1  
2988:  DECFSZ x4F,W
298A:  BRA    298E
298C:  BRA    2996
298E:  MOVF   x4F,W
2990:  SUBLW  02
2992:  BTFSS  FD8.2
2994:  BRA    2C6C
....................   { 
....................    //Leitura do sensor L1 para tela de calibração 
....................     
....................    set_adc_channel(0); 
2996:  MOVLW  00
2998:  MOVWF  01
299A:  MOVF   FC2,W
299C:  ANDLW  C7
299E:  IORWF  01,W
29A0:  MOVWF  FC2
....................    delay_us(20); 
29A2:  MOVLW  1A
29A4:  MOVWF  00
29A6:  DECFSZ 00,F
29A8:  BRA    29A6
29AA:  NOP   
....................    mediaAD_L1=0; valor=0; tensao=0; 
29AC:  CLRF   x43
29AE:  CLRF   x42
29B0:  CLRF   x4D
29B2:  CLRF   x4C
29B4:  CLRF   x4B
29B6:  CLRF   x4A
29B8:  CLRF   x49
29BA:  CLRF   x48
....................     
....................    for(rep=1; rep<=8; rep++) 
29BC:  MOVLW  01
29BE:  MOVWF  x4E
29C0:  MOVF   x4E,W
29C2:  SUBLW  08
29C4:  BNC   29EA
....................    { 
....................      valor= read_adc(); 
29C6:  BSF    FC2.2
29C8:  BTFSC  FC2.2
29CA:  BRA    29C8
29CC:  MOVFF  FC3,44C
29D0:  MOVFF  FC4,44D
....................      delay_us(20); 
29D4:  MOVLW  1A
29D6:  MOVWF  00
29D8:  DECFSZ 00,F
29DA:  BRA    29D8
29DC:  NOP   
....................      mediaAD_L1= mediaAD_L1 + valor; 
29DE:  MOVF   x4C,W
29E0:  ADDWF  x42,F
29E2:  MOVF   x4D,W
29E4:  ADDWFC x43,F
....................    } 
29E6:  INCF   x4E,F
29E8:  BRA    29C0
....................    mediaAD_L1= mediaAD_L1/8; 
29EA:  RRCF   x43,F
29EC:  RRCF   x42,F
29EE:  RRCF   x43,F
29F0:  RRCF   x42,F
29F2:  RRCF   x43,F
29F4:  RRCF   x42,F
29F6:  MOVLW  1F
29F8:  ANDWF  x43,F
....................    tensao=(float)mediaAD_L1*4.8828; 
29FA:  MOVFF  443,5A4
29FE:  MOVFF  442,5A3
2A02:  MOVLB  0
2A04:  CALL   07E0
2A08:  MOVFF  00,5A3
2A0C:  MOVFF  01,5A4
2A10:  MOVFF  02,5A5
2A14:  MOVFF  03,5A6
2A18:  MOVFF  03,5B3
2A1C:  MOVFF  02,5B2
2A20:  MOVFF  01,5B1
2A24:  MOVFF  00,5B0
2A28:  MOVLW  E6
2A2A:  MOVLB  5
2A2C:  MOVWF  xB7
2A2E:  MOVLW  3F
2A30:  MOVWF  xB6
2A32:  MOVLW  1C
2A34:  MOVWF  xB5
2A36:  MOVLW  81
2A38:  MOVWF  xB4
2A3A:  MOVLB  0
2A3C:  CALL   0816
2A40:  MOVFF  03,44B
2A44:  MOVFF  02,44A
2A48:  MOVFF  01,449
2A4C:  MOVFF  00,448
....................    L1_real=(float) (tensao - Offset_L1)/ref_L1; 
2A50:  MOVFF  40E,5A4
2A54:  MOVFF  40D,5A3
2A58:  CALL   07E0
2A5C:  BSF    FD8.1
2A5E:  MOVFF  44B,5A6
2A62:  MOVFF  44A,5A5
2A66:  MOVFF  449,5A4
2A6A:  MOVFF  448,5A3
2A6E:  MOVFF  03,5AA
2A72:  MOVFF  02,5A9
2A76:  MOVFF  01,5A8
2A7A:  MOVFF  00,5A7
2A7E:  CALL   090C
2A82:  MOVFF  00,5A3
2A86:  MOVFF  01,5A4
2A8A:  MOVFF  02,5A5
2A8E:  MOVFF  03,5A6
2A92:  MOVFF  03,5AA
2A96:  MOVFF  02,5A9
2A9A:  MOVFF  01,5A8
2A9E:  MOVFF  00,5A7
2AA2:  MOVFF  412,5AE
2AA6:  MOVFF  411,5AD
2AAA:  MOVFF  410,5AC
2AAE:  MOVFF  40F,5AB
2AB2:  CALL   0B84
2AB6:  MOVFF  03,41A
2ABA:  MOVFF  02,419
2ABE:  MOVFF  01,418
2AC2:  MOVFF  00,417
....................     
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep1++; 
2AC6:  MOVLB  4
2AC8:  INCF   x1B,F
....................    L1_eq=L1_eq+L1_real; 
2ACA:  BCF    FD8.1
2ACC:  MOVFF  416,5A6
2AD0:  MOVFF  415,5A5
2AD4:  MOVFF  414,5A4
2AD8:  MOVFF  413,5A3
2ADC:  MOVFF  41A,5AA
2AE0:  MOVFF  419,5A9
2AE4:  MOVFF  418,5A8
2AE8:  MOVFF  417,5A7
2AEC:  MOVLB  0
2AEE:  CALL   090C
2AF2:  MOVFF  03,416
2AF6:  MOVFF  02,415
2AFA:  MOVFF  01,414
2AFE:  MOVFF  00,413
....................   
....................    if(rep1>=10) 
2B02:  MOVLB  4
2B04:  MOVF   x1B,W
2B06:  SUBLW  09
2B08:  BC    2B5A
....................    { 
....................     L1_eq = L1_eq/10;  
2B0A:  MOVFF  416,5AA
2B0E:  MOVFF  415,5A9
2B12:  MOVFF  414,5A8
2B16:  MOVFF  413,5A7
2B1A:  MOVLB  5
2B1C:  CLRF   xAE
2B1E:  CLRF   xAD
2B20:  MOVLW  20
2B22:  MOVWF  xAC
2B24:  MOVLW  82
2B26:  MOVWF  xAB
2B28:  MOVLB  0
2B2A:  CALL   0B84
2B2E:  MOVFF  03,416
2B32:  MOVFF  02,415
2B36:  MOVFF  01,414
2B3A:  MOVFF  00,413
....................     L1 = L1_eq; 
2B3E:  MOVFF  416,40C
2B42:  MOVFF  415,40B
2B46:  MOVFF  414,40A
2B4A:  MOVFF  413,409
....................     rep1=0; 
2B4E:  MOVLB  4
2B50:  CLRF   x1B
....................     L1_eq=0; 
2B52:  CLRF   x16
2B54:  CLRF   x15
2B56:  CLRF   x14
2B58:  CLRF   x13
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L1); // Converte adc em texto 
2B5A:  MOVLW  04
2B5C:  MOVWF  x6E
2B5E:  MOVLW  EA
2B60:  MOVWF  x6D
2B62:  MOVLW  89
2B64:  MOVWF  FE9
2B66:  MOVFF  40C,5A6
2B6A:  MOVFF  40B,5A5
2B6E:  MOVFF  40A,5A4
2B72:  MOVFF  409,5A3
2B76:  MOVLW  01
2B78:  MOVLB  5
2B7A:  MOVWF  xA7
2B7C:  MOVLB  0
2B7E:  CALL   0E56
....................  
....................    if(L1>=100) 
2B82:  MOVLB  5
2B84:  CLRF   xA6
2B86:  CLRF   xA5
2B88:  MOVLW  48
2B8A:  MOVWF  xA4
2B8C:  MOVLW  85
2B8E:  MOVWF  xA3
2B90:  MOVFF  40C,5AA
2B94:  MOVFF  40B,5A9
2B98:  MOVFF  40A,5A8
2B9C:  MOVFF  409,5A7
2BA0:  MOVLB  0
2BA2:  CALL   0CE2
2BA6:  BC    2BAA
2BA8:  BNZ   2BB2
....................    { 
....................      string[6] = '\0'; 
2BAA:  MOVLB  4
2BAC:  CLRF   xF0
....................      string[5] = 'A'; 
2BAE:  MOVLW  41
2BB0:  MOVWF  xEF
....................    } 
....................    if(L1<100) 
2BB2:  MOVFF  40C,5A6
2BB6:  MOVFF  40B,5A5
2BBA:  MOVFF  40A,5A4
2BBE:  MOVFF  409,5A3
2BC2:  MOVLB  5
2BC4:  CLRF   xAA
2BC6:  CLRF   xA9
2BC8:  MOVLW  48
2BCA:  MOVWF  xA8
2BCC:  MOVLW  85
2BCE:  MOVWF  xA7
2BD0:  MOVLB  0
2BD2:  CALL   0CE2
2BD6:  BNC   2BE0
....................    { 
....................      string[5] = '\0'; 
2BD8:  MOVLB  4
2BDA:  CLRF   xEF
....................      string[4] = 'A'; 
2BDC:  MOVLW  41
2BDE:  MOVWF  xEE
....................    } 
....................    if(L1<10) 
2BE0:  MOVFF  40C,5A6
2BE4:  MOVFF  40B,5A5
2BE8:  MOVFF  40A,5A4
2BEC:  MOVFF  409,5A3
2BF0:  MOVLB  5
2BF2:  CLRF   xAA
2BF4:  CLRF   xA9
2BF6:  MOVLW  20
2BF8:  MOVWF  xA8
2BFA:  MOVLW  82
2BFC:  MOVWF  xA7
2BFE:  MOVLB  0
2C00:  CALL   0CE2
2C04:  BNC   2C0E
....................    { 
....................      string[4] = '\0'; 
2C06:  MOVLB  4
2C08:  CLRF   xEE
....................      string[3] = 'A'; 
2C0A:  MOVLW  41
2C0C:  MOVWF  xED
....................    } 
....................     
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
2C0E:  MOVLW  12
2C10:  MOVLB  5
2C12:  MOVWF  xA3
2C14:  MOVLW  2D
2C16:  MOVWF  xA4
2C18:  MOVLW  04
2C1A:  MOVWF  xA6
2C1C:  MOVLW  EA
2C1E:  MOVWF  xA5
2C20:  MOVLW  01
2C22:  MOVWF  xA7
2C24:  MOVWF  xA8
2C26:  MOVLB  0
2C28:  CALL   10FE
....................      
....................    sprintf(string, "L1:"); // Converte char em texto 
2C2C:  MOVLW  04
2C2E:  MOVLB  4
2C30:  MOVWF  x6E
2C32:  MOVLW  EA
2C34:  MOVWF  x6D
2C36:  MOVLW  9E
2C38:  MOVWF  FF6
2C3A:  MOVLW  02
2C3C:  MOVWF  FF7
2C3E:  MOVLB  0
2C40:  CALL   12A6
....................    string[3] = '\0'; 
2C44:  MOVLB  4
2C46:  CLRF   xED
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2C48:  MOVLW  01
2C4A:  MOVLB  5
2C4C:  MOVWF  xA3
2C4E:  MOVLW  2D
2C50:  MOVWF  xA4
2C52:  MOVLW  04
2C54:  MOVWF  xA6
2C56:  MOVLW  EA
2C58:  MOVWF  xA5
2C5A:  MOVLW  01
2C5C:  MOVWF  xA7
2C5E:  MOVWF  xA8
2C60:  MOVLB  0
2C62:  CALL   10FE
....................     
....................    glcd_update();//update glcd 
2C66:  CALL   05E6
2C6A:  MOVLB  4
....................    
....................   }//if menu = 2 ou 3 
....................    
....................   if(menu==3)  //Menu de calibração do sensor L2 (offset) 
2C6C:  MOVF   x4F,W
2C6E:  SUBLW  03
2C70:  BTFSS  FD8.2
2C72:  BRA    2E1C
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
2C74:  MOVLB  5
2C76:  CLRF   xA3
2C78:  MOVLB  0
2C7A:  CALL   04AA
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L2"); // converte char em texto 
2C7E:  MOVLW  04
2C80:  MOVLB  4
2C82:  MOVWF  x6E
2C84:  MOVLW  F1
2C86:  MOVWF  x6D
2C88:  MOVLW  A2
2C8A:  MOVWF  FF6
2C8C:  MOVLW  02
2C8E:  MOVWF  FF7
2C90:  MOVLB  0
2C92:  CALL   12A6
....................    string[40] = '\0'; 
2C96:  MOVLB  5
2C98:  CLRF   x19
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2C9A:  MOVLW  01
2C9C:  MOVWF  xA3
2C9E:  MOVWF  xA4
2CA0:  MOVLW  04
2CA2:  MOVWF  xA6
2CA4:  MOVLW  F1
2CA6:  MOVWF  xA5
2CA8:  MOVLW  01
2CAA:  MOVWF  xA7
2CAC:  MOVWF  xA8
2CAE:  MOVLB  0
2CB0:  CALL   10FE
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
2CB4:  MOVLB  5
2CB6:  CLRF   xA3
2CB8:  MOVLW  18
2CBA:  MOVWF  xA4
2CBC:  MOVLW  50
2CBE:  MOVWF  xA5
2CC0:  MOVLW  20
2CC2:  MOVWF  xA6
2CC4:  MOVLW  01
2CC6:  MOVWF  xA7
2CC8:  MOVWF  xA8
2CCA:  MOVLB  0
2CCC:  CALL   21F0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
2CD0:  MOVLW  04
2CD2:  MOVLB  4
2CD4:  MOVWF  x6E
2CD6:  MOVLW  F1
2CD8:  MOVWF  x6D
2CDA:  MOVLW  C4
2CDC:  MOVWF  FF6
2CDE:  MOVLW  02
2CE0:  MOVWF  FF7
2CE2:  MOVLB  0
2CE4:  CALL   12A6
....................    glcd_text57(1, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2CE8:  MOVLW  01
2CEA:  MOVLB  5
2CEC:  MOVWF  xA3
2CEE:  MOVLW  19
2CF0:  MOVWF  xA4
2CF2:  MOVLW  04
2CF4:  MOVWF  xA6
2CF6:  MOVLW  F1
2CF8:  MOVWF  xA5
2CFA:  MOVLW  01
2CFC:  MOVWF  xA7
2CFE:  CLRF   xA8
2D00:  MOVLB  0
2D02:  CALL   10FE
....................     
....................    sprintf(string, "%ld",Offset_L2); // Converte adc em texto 
2D06:  MOVLW  04
2D08:  MOVLB  4
2D0A:  MOVWF  x6E
2D0C:  MOVLW  F1
2D0E:  MOVWF  x6D
2D10:  MOVLW  10
2D12:  MOVWF  FE9
2D14:  MOVFF  421,5A4
2D18:  MOVFF  420,5A3
2D1C:  MOVLB  0
2D1E:  CALL   22B4
....................    glcd_text57(50, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2D22:  MOVLW  32
2D24:  MOVLB  5
2D26:  MOVWF  xA3
2D28:  MOVLW  19
2D2A:  MOVWF  xA4
2D2C:  MOVLW  04
2D2E:  MOVWF  xA6
2D30:  MOVLW  F1
2D32:  MOVWF  xA5
2D34:  MOVLW  01
2D36:  MOVWF  xA7
2D38:  CLRF   xA8
2D3A:  MOVLB  0
2D3C:  CALL   10FE
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
2D40:  MOVLW  04
2D42:  MOVLB  4
2D44:  MOVWF  x6E
2D46:  MOVLW  F1
2D48:  MOVWF  x6D
2D4A:  MOVLW  CC
2D4C:  MOVWF  FF6
2D4E:  MOVLW  02
2D50:  MOVWF  FF7
2D52:  MOVLB  0
2D54:  CALL   12A6
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2D58:  MOVLW  01
2D5A:  MOVLB  5
2D5C:  MOVWF  xA3
2D5E:  MOVLW  23
2D60:  MOVWF  xA4
2D62:  MOVLW  04
2D64:  MOVWF  xA6
2D66:  MOVLW  F1
2D68:  MOVWF  xA5
2D6A:  MOVLW  01
2D6C:  MOVWF  xA7
2D6E:  MOVWF  xA8
2D70:  MOVLB  0
2D72:  CALL   10FE
....................     
....................    sprintf(string, "%f",ref_L2); // Converte adc em texto 
2D76:  MOVLW  04
2D78:  MOVLB  4
2D7A:  MOVWF  x6E
2D7C:  MOVLW  F1
2D7E:  MOVWF  x6D
2D80:  MOVLW  89
2D82:  MOVWF  FE9
2D84:  MOVFF  425,5A6
2D88:  MOVFF  424,5A5
2D8C:  MOVFF  423,5A4
2D90:  MOVFF  422,5A3
2D94:  MOVLW  02
2D96:  MOVLB  5
2D98:  MOVWF  xA7
2D9A:  MOVLB  0
2D9C:  CALL   0E56
....................    glcd_text57(50, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2DA0:  MOVLW  32
2DA2:  MOVLB  5
2DA4:  MOVWF  xA3
2DA6:  MOVLW  23
2DA8:  MOVWF  xA4
2DAA:  MOVLW  04
2DAC:  MOVWF  xA6
2DAE:  MOVLW  F1
2DB0:  MOVWF  xA5
2DB2:  MOVLW  01
2DB4:  MOVWF  xA7
2DB6:  MOVWF  xA8
2DB8:  MOVLB  0
2DBA:  CALL   10FE
....................     
....................    if(!input(pin_E1)&&Offset_L2<5000) //incrementa && valor maximo 
2DBE:  BSF    F96.1
2DC0:  BTFSC  F84.1
2DC2:  BRA    2DE8
2DC4:  MOVLB  4
2DC6:  MOVF   x21,W
2DC8:  SUBLW  13
2DCA:  BTFSC  FD8.0
2DCC:  BRA    2DD2
2DCE:  MOVLB  0
2DD0:  BRA    2DE8
2DD2:  BNZ   2DE0
2DD4:  MOVF   x20,W
2DD6:  SUBLW  87
2DD8:  BTFSC  FD8.0
2DDA:  BRA    2DE0
2DDC:  MOVLB  0
2DDE:  BRA    2DE8
....................    { 
....................      Offset_L2++; 
2DE0:  INCF   x20,F
2DE2:  BTFSC  FD8.2
2DE4:  INCF   x21,F
2DE6:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&Offset_L2>2000) //decrementa && valor minimo 
2DE8:  BSF    F94.2
2DEA:  BTFSC  F82.2
2DEC:  BRA    2E16
2DEE:  MOVLB  4
2DF0:  MOVF   x21,W
2DF2:  SUBLW  06
2DF4:  BTFSS  FD8.0
2DF6:  BRA    2DFC
2DF8:  MOVLB  0
2DFA:  BRA    2E16
2DFC:  XORLW  FF
2DFE:  BNZ   2E0C
2E00:  MOVF   x20,W
2E02:  SUBLW  D0
2E04:  BTFSS  FD8.0
2E06:  BRA    2E0C
2E08:  MOVLB  0
2E0A:  BRA    2E16
....................    { 
....................      Offset_L2--; 
2E0C:  MOVF   x20,W
2E0E:  BTFSC  FD8.2
2E10:  DECF   x21,F
2E12:  DECF   x20,F
2E14:  MOVLB  0
....................    } 
....................    glcd_update();//update glcd 
2E16:  CALL   05E6
2E1A:  MOVLB  4
....................    
....................   }//if menu=4 
....................    
....................   if(menu==4)  //Menu de calibração do sensor L2 (Ref) 
2E1C:  MOVF   x4F,W
2E1E:  SUBLW  04
2E20:  BTFSS  FD8.2
2E22:  BRA    3040
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
2E24:  MOVLB  5
2E26:  CLRF   xA3
2E28:  MOVLB  0
2E2A:  CALL   04AA
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L2"); // converte char em texto 
2E2E:  MOVLW  05
2E30:  MOVLB  4
2E32:  MOVWF  x6E
2E34:  MOVLW  1A
2E36:  MOVWF  x6D
2E38:  MOVLW  D2
2E3A:  MOVWF  FF6
2E3C:  MOVLW  02
2E3E:  MOVWF  FF7
2E40:  MOVLB  0
2E42:  CALL   12A6
....................    string[40] = '\0'; 
2E46:  MOVLB  5
2E48:  CLRF   x42
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2E4A:  MOVLW  01
2E4C:  MOVWF  xA3
2E4E:  MOVWF  xA4
2E50:  MOVLW  05
2E52:  MOVWF  xA6
2E54:  MOVLW  1A
2E56:  MOVWF  xA5
2E58:  MOVLW  01
2E5A:  MOVWF  xA7
2E5C:  MOVWF  xA8
2E5E:  MOVLB  0
2E60:  CALL   10FE
....................     
....................    glcd_rect(0, 34, 80, 42, yes, on); 
2E64:  MOVLB  5
2E66:  CLRF   xA3
2E68:  MOVLW  22
2E6A:  MOVWF  xA4
2E6C:  MOVLW  50
2E6E:  MOVWF  xA5
2E70:  MOVLW  2A
2E72:  MOVWF  xA6
2E74:  MOVLW  01
2E76:  MOVWF  xA7
2E78:  MOVWF  xA8
2E7A:  MOVLB  0
2E7C:  CALL   21F0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
2E80:  MOVLW  05
2E82:  MOVLB  4
2E84:  MOVWF  x6E
2E86:  MOVLW  1A
2E88:  MOVWF  x6D
2E8A:  MOVLW  F4
2E8C:  MOVWF  FF6
2E8E:  MOVLW  02
2E90:  MOVWF  FF7
2E92:  MOVLB  0
2E94:  CALL   12A6
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2E98:  MOVLW  01
2E9A:  MOVLB  5
2E9C:  MOVWF  xA3
2E9E:  MOVLW  19
2EA0:  MOVWF  xA4
2EA2:  MOVLW  05
2EA4:  MOVWF  xA6
2EA6:  MOVLW  1A
2EA8:  MOVWF  xA5
2EAA:  MOVLW  01
2EAC:  MOVWF  xA7
2EAE:  MOVWF  xA8
2EB0:  MOVLB  0
2EB2:  CALL   10FE
....................     
....................    sprintf(string, "%ld",Offset_L2); // Converte adc em texto 
2EB6:  MOVLW  05
2EB8:  MOVLB  4
2EBA:  MOVWF  x6E
2EBC:  MOVLW  1A
2EBE:  MOVWF  x6D
2EC0:  MOVLW  10
2EC2:  MOVWF  FE9
2EC4:  MOVFF  421,5A4
2EC8:  MOVFF  420,5A3
2ECC:  MOVLB  0
2ECE:  CALL   22B4
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2ED2:  MOVLW  32
2ED4:  MOVLB  5
2ED6:  MOVWF  xA3
2ED8:  MOVLW  19
2EDA:  MOVWF  xA4
2EDC:  MOVLW  05
2EDE:  MOVWF  xA6
2EE0:  MOVLW  1A
2EE2:  MOVWF  xA5
2EE4:  MOVLW  01
2EE6:  MOVWF  xA7
2EE8:  MOVWF  xA8
2EEA:  MOVLB  0
2EEC:  CALL   10FE
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
2EF0:  MOVLW  05
2EF2:  MOVLB  4
2EF4:  MOVWF  x6E
2EF6:  MOVLW  1A
2EF8:  MOVWF  x6D
2EFA:  MOVLW  FC
2EFC:  MOVWF  FF6
2EFE:  MOVLW  02
2F00:  MOVWF  FF7
2F02:  MOVLB  0
2F04:  CALL   12A6
....................    glcd_text57(1, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2F08:  MOVLW  01
2F0A:  MOVLB  5
2F0C:  MOVWF  xA3
2F0E:  MOVLW  23
2F10:  MOVWF  xA4
2F12:  MOVLW  05
2F14:  MOVWF  xA6
2F16:  MOVLW  1A
2F18:  MOVWF  xA5
2F1A:  MOVLW  01
2F1C:  MOVWF  xA7
2F1E:  CLRF   xA8
2F20:  MOVLB  0
2F22:  CALL   10FE
....................     
....................    sprintf(string, "%1.2f",ref_L2); // Converte adc em texto 
2F26:  MOVLW  05
2F28:  MOVLB  4
2F2A:  MOVWF  x6E
2F2C:  MOVLW  1A
2F2E:  MOVWF  x6D
2F30:  MOVLW  89
2F32:  MOVWF  FE9
2F34:  MOVFF  425,5A6
2F38:  MOVFF  424,5A5
2F3C:  MOVFF  423,5A4
2F40:  MOVFF  422,5A3
2F44:  MOVLW  02
2F46:  MOVLB  5
2F48:  MOVWF  xA7
2F4A:  MOVLB  0
2F4C:  CALL   0E56
....................    glcd_text57(50, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2F50:  MOVLW  32
2F52:  MOVLB  5
2F54:  MOVWF  xA3
2F56:  MOVLW  23
2F58:  MOVWF  xA4
2F5A:  MOVLW  05
2F5C:  MOVWF  xA6
2F5E:  MOVLW  1A
2F60:  MOVWF  xA5
2F62:  MOVLW  01
2F64:  MOVWF  xA7
2F66:  CLRF   xA8
2F68:  MOVLB  0
2F6A:  CALL   10FE
....................     
....................     
....................    if(!input(pin_E1)&&ref_L2<30) //incrementa && valor maximo 
2F6E:  BSF    F96.1
2F70:  BTFSC  F84.1
2F72:  BRA    2FD4
2F74:  MOVFF  425,5A6
2F78:  MOVFF  424,5A5
2F7C:  MOVFF  423,5A4
2F80:  MOVFF  422,5A3
2F84:  MOVLB  5
2F86:  CLRF   xAA
2F88:  CLRF   xA9
2F8A:  MOVLW  70
2F8C:  MOVWF  xA8
2F8E:  MOVLW  83
2F90:  MOVWF  xA7
2F92:  MOVLB  0
2F94:  CALL   0CE2
2F98:  BNC   2FD4
....................    { 
....................      ref_L2=ref_L2+0.1; 
2F9A:  BCF    FD8.1
2F9C:  MOVFF  425,5A6
2FA0:  MOVFF  424,5A5
2FA4:  MOVFF  423,5A4
2FA8:  MOVFF  422,5A3
2FAC:  MOVLW  CD
2FAE:  MOVLB  5
2FB0:  MOVWF  xAA
2FB2:  MOVLW  CC
2FB4:  MOVWF  xA9
2FB6:  MOVLW  4C
2FB8:  MOVWF  xA8
2FBA:  MOVLW  7B
2FBC:  MOVWF  xA7
2FBE:  MOVLB  0
2FC0:  CALL   090C
2FC4:  MOVFF  03,425
2FC8:  MOVFF  02,424
2FCC:  MOVFF  01,423
2FD0:  MOVFF  00,422
....................    } 
....................    if(!input(pin_C2)&&ref_L2>5) //decrementa && valor minimo 
2FD4:  BSF    F94.2
2FD6:  BTFSC  F82.2
2FD8:  BRA    303A
2FDA:  MOVLB  5
2FDC:  CLRF   xA6
2FDE:  CLRF   xA5
2FE0:  MOVLW  20
2FE2:  MOVWF  xA4
2FE4:  MOVLW  81
2FE6:  MOVWF  xA3
2FE8:  MOVFF  425,5AA
2FEC:  MOVFF  424,5A9
2FF0:  MOVFF  423,5A8
2FF4:  MOVFF  422,5A7
2FF8:  MOVLB  0
2FFA:  CALL   0CE2
2FFE:  BNC   303A
....................    { 
....................      ref_L2=ref_L2-0.1; 
3000:  BSF    FD8.1
3002:  MOVFF  425,5A6
3006:  MOVFF  424,5A5
300A:  MOVFF  423,5A4
300E:  MOVFF  422,5A3
3012:  MOVLW  CD
3014:  MOVLB  5
3016:  MOVWF  xAA
3018:  MOVLW  CC
301A:  MOVWF  xA9
301C:  MOVLW  4C
301E:  MOVWF  xA8
3020:  MOVLW  7B
3022:  MOVWF  xA7
3024:  MOVLB  0
3026:  CALL   090C
302A:  MOVFF  03,425
302E:  MOVFF  02,424
3032:  MOVFF  01,423
3036:  MOVFF  00,422
....................    } 
....................     
....................    glcd_update();//update glcd 
303A:  CALL   05E6
303E:  MOVLB  4
....................    
....................   }//if menu=5 
....................  
....................   if(menu==3||menu==4) //Strings em comum - calibração do sensor L2  
3040:  MOVF   x4F,W
3042:  SUBLW  03
3044:  BZ    304E
3046:  MOVF   x4F,W
3048:  SUBLW  04
304A:  BTFSS  FD8.2
304C:  BRA    3326
....................   { 
....................    //Leitura do sensor L1 para tela de calibração 
....................     
....................    set_adc_channel(1); 
304E:  MOVLW  08
3050:  MOVWF  01
3052:  MOVF   FC2,W
3054:  ANDLW  C7
3056:  IORWF  01,W
3058:  MOVWF  FC2
....................    delay_us(20); 
305A:  MOVLW  1A
305C:  MOVWF  00
305E:  DECFSZ 00,F
3060:  BRA    305E
3062:  NOP   
....................    mediaAD_L2=0; valor=0; tensao=0; 
3064:  CLRF   x45
3066:  CLRF   x44
3068:  CLRF   x4D
306A:  CLRF   x4C
306C:  CLRF   x4B
306E:  CLRF   x4A
3070:  CLRF   x49
3072:  CLRF   x48
....................     
....................    for(rep=1; rep<=8; rep++) 
3074:  MOVLW  01
3076:  MOVWF  x4E
3078:  MOVF   x4E,W
307A:  SUBLW  08
307C:  BNC   30A6
....................    { 
....................      valor= read_adc(); 
307E:  BSF    FC2.2
3080:  BTFSC  FC2.2
3082:  BRA    3080
3084:  MOVFF  FC3,44C
3088:  MOVFF  FC4,44D
....................      delay_ms(4); 
308C:  MOVLW  04
308E:  MOVLB  5
3090:  MOVWF  xA3
3092:  MOVLB  0
3094:  CALL   037C
....................      mediaAD_L2= mediaAD_L2 + valor; 
3098:  MOVLB  4
309A:  MOVF   x4C,W
309C:  ADDWF  x44,F
309E:  MOVF   x4D,W
30A0:  ADDWFC x45,F
....................    } 
30A2:  INCF   x4E,F
30A4:  BRA    3078
....................    mediaAD_L2= mediaAD_L2/8; 
30A6:  RRCF   x45,F
30A8:  RRCF   x44,F
30AA:  RRCF   x45,F
30AC:  RRCF   x44,F
30AE:  RRCF   x45,F
30B0:  RRCF   x44,F
30B2:  MOVLW  1F
30B4:  ANDWF  x45,F
....................    tensao=(float)mediaAD_L2*4.8828; 
30B6:  MOVFF  445,5A4
30BA:  MOVFF  444,5A3
30BE:  MOVLB  0
30C0:  CALL   07E0
30C4:  MOVFF  00,5A3
30C8:  MOVFF  01,5A4
30CC:  MOVFF  02,5A5
30D0:  MOVFF  03,5A6
30D4:  MOVFF  03,5B3
30D8:  MOVFF  02,5B2
30DC:  MOVFF  01,5B1
30E0:  MOVFF  00,5B0
30E4:  MOVLW  E6
30E6:  MOVLB  5
30E8:  MOVWF  xB7
30EA:  MOVLW  3F
30EC:  MOVWF  xB6
30EE:  MOVLW  1C
30F0:  MOVWF  xB5
30F2:  MOVLW  81
30F4:  MOVWF  xB4
30F6:  MOVLB  0
30F8:  CALL   0816
30FC:  MOVFF  03,44B
3100:  MOVFF  02,44A
3104:  MOVFF  01,449
3108:  MOVFF  00,448
....................    L2_real=(float) (tensao - Offset_L2)/ref_L2; 
310C:  MOVFF  421,5A4
3110:  MOVFF  420,5A3
3114:  CALL   07E0
3118:  BSF    FD8.1
311A:  MOVFF  44B,5A6
311E:  MOVFF  44A,5A5
3122:  MOVFF  449,5A4
3126:  MOVFF  448,5A3
312A:  MOVFF  03,5AA
312E:  MOVFF  02,5A9
3132:  MOVFF  01,5A8
3136:  MOVFF  00,5A7
313A:  CALL   090C
313E:  MOVFF  00,5A3
3142:  MOVFF  01,5A4
3146:  MOVFF  02,5A5
314A:  MOVFF  03,5A6
314E:  MOVFF  03,5AA
3152:  MOVFF  02,5A9
3156:  MOVFF  01,5A8
315A:  MOVFF  00,5A7
315E:  MOVFF  425,5AE
3162:  MOVFF  424,5AD
3166:  MOVFF  423,5AC
316A:  MOVFF  422,5AB
316E:  CALL   0B84
3172:  MOVFF  03,42D
3176:  MOVFF  02,42C
317A:  MOVFF  01,42B
317E:  MOVFF  00,42A
....................     
....................       //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep2++; 
3182:  MOVLB  4
3184:  INCF   x2E,F
....................    L2_eq=L2_eq+L2_real; 
3186:  BCF    FD8.1
3188:  MOVFF  429,5A6
318C:  MOVFF  428,5A5
3190:  MOVFF  427,5A4
3194:  MOVFF  426,5A3
3198:  MOVFF  42D,5AA
319C:  MOVFF  42C,5A9
31A0:  MOVFF  42B,5A8
31A4:  MOVFF  42A,5A7
31A8:  MOVLB  0
31AA:  CALL   090C
31AE:  MOVFF  03,429
31B2:  MOVFF  02,428
31B6:  MOVFF  01,427
31BA:  MOVFF  00,426
....................   
....................    if(rep2>=10) 
31BE:  MOVLB  4
31C0:  MOVF   x2E,W
31C2:  SUBLW  09
31C4:  BC    3216
....................    { 
....................     L2_eq = L2_eq/10;  
31C6:  MOVFF  429,5AA
31CA:  MOVFF  428,5A9
31CE:  MOVFF  427,5A8
31D2:  MOVFF  426,5A7
31D6:  MOVLB  5
31D8:  CLRF   xAE
31DA:  CLRF   xAD
31DC:  MOVLW  20
31DE:  MOVWF  xAC
31E0:  MOVLW  82
31E2:  MOVWF  xAB
31E4:  MOVLB  0
31E6:  CALL   0B84
31EA:  MOVFF  03,429
31EE:  MOVFF  02,428
31F2:  MOVFF  01,427
31F6:  MOVFF  00,426
....................     L2 = L2_eq; 
31FA:  MOVFF  429,41F
31FE:  MOVFF  428,41E
3202:  MOVFF  427,41D
3206:  MOVFF  426,41C
....................     rep2=0; 
320A:  MOVLB  4
320C:  CLRF   x2E
....................     L2_eq=0; 
320E:  CLRF   x29
3210:  CLRF   x28
3212:  CLRF   x27
3214:  CLRF   x26
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L2); // Converte adc em texto 
3216:  MOVLW  05
3218:  MOVWF  x6E
321A:  MOVLW  43
321C:  MOVWF  x6D
321E:  MOVLW  89
3220:  MOVWF  FE9
3222:  MOVFF  41F,5A6
3226:  MOVFF  41E,5A5
322A:  MOVFF  41D,5A4
322E:  MOVFF  41C,5A3
3232:  MOVLW  01
3234:  MOVLB  5
3236:  MOVWF  xA7
3238:  MOVLB  0
323A:  CALL   0E56
....................  
....................    if(L2>=100) 
323E:  MOVLB  5
3240:  CLRF   xA6
3242:  CLRF   xA5
3244:  MOVLW  48
3246:  MOVWF  xA4
3248:  MOVLW  85
324A:  MOVWF  xA3
324C:  MOVFF  41F,5AA
3250:  MOVFF  41E,5A9
3254:  MOVFF  41D,5A8
3258:  MOVFF  41C,5A7
325C:  MOVLB  0
325E:  CALL   0CE2
3262:  BC    3266
3264:  BNZ   326E
....................    { 
....................      string[6] = '\0'; 
3266:  MOVLB  5
3268:  CLRF   x49
....................      string[5] = 'A'; 
326A:  MOVLW  41
326C:  MOVWF  x48
....................    } 
....................    if(L2<100) 
326E:  MOVFF  41F,5A6
3272:  MOVFF  41E,5A5
3276:  MOVFF  41D,5A4
327A:  MOVFF  41C,5A3
327E:  MOVLB  5
3280:  CLRF   xAA
3282:  CLRF   xA9
3284:  MOVLW  48
3286:  MOVWF  xA8
3288:  MOVLW  85
328A:  MOVWF  xA7
328C:  MOVLB  0
328E:  CALL   0CE2
3292:  BNC   329C
....................    { 
....................      string[5] = '\0'; 
3294:  MOVLB  5
3296:  CLRF   x48
....................      string[4] = 'A'; 
3298:  MOVLW  41
329A:  MOVWF  x47
....................    } 
....................    if(L2<10) 
329C:  MOVFF  41F,5A6
32A0:  MOVFF  41E,5A5
32A4:  MOVFF  41D,5A4
32A8:  MOVFF  41C,5A3
32AC:  MOVLB  5
32AE:  CLRF   xAA
32B0:  CLRF   xA9
32B2:  MOVLW  20
32B4:  MOVWF  xA8
32B6:  MOVLW  82
32B8:  MOVWF  xA7
32BA:  MOVLB  0
32BC:  CALL   0CE2
32C0:  BNC   32CA
....................    { 
....................      string[4] = '\0'; 
32C2:  MOVLB  5
32C4:  CLRF   x47
....................      string[3] = 'A'; 
32C6:  MOVLW  41
32C8:  MOVWF  x46
....................    } 
....................     
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
32CA:  MOVLW  12
32CC:  MOVLB  5
32CE:  MOVWF  xA3
32D0:  MOVLW  2D
32D2:  MOVWF  xA4
32D4:  MOVLW  05
32D6:  MOVWF  xA6
32D8:  MOVLW  43
32DA:  MOVWF  xA5
32DC:  MOVLW  01
32DE:  MOVWF  xA7
32E0:  MOVWF  xA8
32E2:  MOVLB  0
32E4:  CALL   10FE
....................       
....................    sprintf(string, "L2:"); // Converte char em texto 
32E8:  MOVLW  05
32EA:  MOVLB  4
32EC:  MOVWF  x6E
32EE:  MOVLW  43
32F0:  MOVWF  x6D
32F2:  MOVLW  02
32F4:  MOVWF  FF6
32F6:  MOVLW  03
32F8:  MOVWF  FF7
32FA:  MOVLB  0
32FC:  CALL   12A6
....................    string[3] = '\0'; 
3300:  MOVLB  5
3302:  CLRF   x46
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3304:  MOVLW  01
3306:  MOVWF  xA3
3308:  MOVLW  2D
330A:  MOVWF  xA4
330C:  MOVLW  05
330E:  MOVWF  xA6
3310:  MOVLW  43
3312:  MOVWF  xA5
3314:  MOVLW  01
3316:  MOVWF  xA7
3318:  MOVWF  xA8
331A:  MOVLB  0
331C:  CALL   10FE
....................     
....................    glcd_update();//update glcd 
3320:  CALL   05E6
3324:  MOVLB  4
....................    
....................   }//if menu = 4 ou 5 
....................    
....................   if(menu==5)  //Menu de calibração do sensor L3 (offset) 
3326:  MOVF   x4F,W
3328:  SUBLW  05
332A:  BTFSS  FD8.2
332C:  BRA    34D6
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
332E:  MOVLB  5
3330:  CLRF   xA3
3332:  MOVLB  0
3334:  CALL   04AA
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L3"); // converte char em texto 
3338:  MOVLW  05
333A:  MOVLB  4
333C:  MOVWF  x6E
333E:  MOVLW  4A
3340:  MOVWF  x6D
3342:  MOVLW  06
3344:  MOVWF  FF6
3346:  MOVLW  03
3348:  MOVWF  FF7
334A:  MOVLB  0
334C:  CALL   12A6
....................    string[40] = '\0'; 
3350:  MOVLB  5
3352:  CLRF   x72
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3354:  MOVLW  01
3356:  MOVWF  xA3
3358:  MOVWF  xA4
335A:  MOVLW  05
335C:  MOVWF  xA6
335E:  MOVLW  4A
3360:  MOVWF  xA5
3362:  MOVLW  01
3364:  MOVWF  xA7
3366:  MOVWF  xA8
3368:  MOVLB  0
336A:  CALL   10FE
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
336E:  MOVLB  5
3370:  CLRF   xA3
3372:  MOVLW  18
3374:  MOVWF  xA4
3376:  MOVLW  50
3378:  MOVWF  xA5
337A:  MOVLW  20
337C:  MOVWF  xA6
337E:  MOVLW  01
3380:  MOVWF  xA7
3382:  MOVWF  xA8
3384:  MOVLB  0
3386:  CALL   21F0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
338A:  MOVLW  05
338C:  MOVLB  4
338E:  MOVWF  x6E
3390:  MOVLW  4A
3392:  MOVWF  x6D
3394:  MOVLW  28
3396:  MOVWF  FF6
3398:  MOVLW  03
339A:  MOVWF  FF7
339C:  MOVLB  0
339E:  CALL   12A6
....................    glcd_text57(1, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
33A2:  MOVLW  01
33A4:  MOVLB  5
33A6:  MOVWF  xA3
33A8:  MOVLW  19
33AA:  MOVWF  xA4
33AC:  MOVLW  05
33AE:  MOVWF  xA6
33B0:  MOVLW  4A
33B2:  MOVWF  xA5
33B4:  MOVLW  01
33B6:  MOVWF  xA7
33B8:  CLRF   xA8
33BA:  MOVLB  0
33BC:  CALL   10FE
....................     
....................    sprintf(string, "%ld",Offset_L3); // Converte adc em texto 
33C0:  MOVLW  05
33C2:  MOVLB  4
33C4:  MOVWF  x6E
33C6:  MOVLW  4A
33C8:  MOVWF  x6D
33CA:  MOVLW  10
33CC:  MOVWF  FE9
33CE:  MOVFF  434,5A4
33D2:  MOVFF  433,5A3
33D6:  MOVLB  0
33D8:  CALL   22B4
....................    glcd_text57(50, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
33DC:  MOVLW  32
33DE:  MOVLB  5
33E0:  MOVWF  xA3
33E2:  MOVLW  19
33E4:  MOVWF  xA4
33E6:  MOVLW  05
33E8:  MOVWF  xA6
33EA:  MOVLW  4A
33EC:  MOVWF  xA5
33EE:  MOVLW  01
33F0:  MOVWF  xA7
33F2:  CLRF   xA8
33F4:  MOVLB  0
33F6:  CALL   10FE
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
33FA:  MOVLW  05
33FC:  MOVLB  4
33FE:  MOVWF  x6E
3400:  MOVLW  4A
3402:  MOVWF  x6D
3404:  MOVLW  30
3406:  MOVWF  FF6
3408:  MOVLW  03
340A:  MOVWF  FF7
340C:  MOVLB  0
340E:  CALL   12A6
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3412:  MOVLW  01
3414:  MOVLB  5
3416:  MOVWF  xA3
3418:  MOVLW  23
341A:  MOVWF  xA4
341C:  MOVLW  05
341E:  MOVWF  xA6
3420:  MOVLW  4A
3422:  MOVWF  xA5
3424:  MOVLW  01
3426:  MOVWF  xA7
3428:  MOVWF  xA8
342A:  MOVLB  0
342C:  CALL   10FE
....................     
....................    sprintf(string, "%f",ref_L3); // Converte adc em texto 
3430:  MOVLW  05
3432:  MOVLB  4
3434:  MOVWF  x6E
3436:  MOVLW  4A
3438:  MOVWF  x6D
343A:  MOVLW  89
343C:  MOVWF  FE9
343E:  MOVFF  438,5A6
3442:  MOVFF  437,5A5
3446:  MOVFF  436,5A4
344A:  MOVFF  435,5A3
344E:  MOVLW  02
3450:  MOVLB  5
3452:  MOVWF  xA7
3454:  MOVLB  0
3456:  CALL   0E56
....................    glcd_text57(50, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
345A:  MOVLW  32
345C:  MOVLB  5
345E:  MOVWF  xA3
3460:  MOVLW  23
3462:  MOVWF  xA4
3464:  MOVLW  05
3466:  MOVWF  xA6
3468:  MOVLW  4A
346A:  MOVWF  xA5
346C:  MOVLW  01
346E:  MOVWF  xA7
3470:  MOVWF  xA8
3472:  MOVLB  0
3474:  CALL   10FE
....................     
....................    if(!input(pin_E1)&&Offset_L3<5000) //incrementa && valor maximo 
3478:  BSF    F96.1
347A:  BTFSC  F84.1
347C:  BRA    34A2
347E:  MOVLB  4
3480:  MOVF   x34,W
3482:  SUBLW  13
3484:  BTFSC  FD8.0
3486:  BRA    348C
3488:  MOVLB  0
348A:  BRA    34A2
348C:  BNZ   349A
348E:  MOVF   x33,W
3490:  SUBLW  87
3492:  BTFSC  FD8.0
3494:  BRA    349A
3496:  MOVLB  0
3498:  BRA    34A2
....................    { 
....................      Offset_L3++; 
349A:  INCF   x33,F
349C:  BTFSC  FD8.2
349E:  INCF   x34,F
34A0:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&Offset_L3>2000) //decrementa && valor minimo 
34A2:  BSF    F94.2
34A4:  BTFSC  F82.2
34A6:  BRA    34D0
34A8:  MOVLB  4
34AA:  MOVF   x34,W
34AC:  SUBLW  06
34AE:  BTFSS  FD8.0
34B0:  BRA    34B6
34B2:  MOVLB  0
34B4:  BRA    34D0
34B6:  XORLW  FF
34B8:  BNZ   34C6
34BA:  MOVF   x33,W
34BC:  SUBLW  D0
34BE:  BTFSS  FD8.0
34C0:  BRA    34C6
34C2:  MOVLB  0
34C4:  BRA    34D0
....................    { 
....................      Offset_L3--; 
34C6:  MOVF   x33,W
34C8:  BTFSC  FD8.2
34CA:  DECF   x34,F
34CC:  DECF   x33,F
34CE:  MOVLB  0
....................    } 
....................    glcd_update();//update glcd 
34D0:  CALL   05E6
34D4:  MOVLB  4
....................    
....................   }//if menu=6 
....................    
....................   if(menu==6)  //Menu de calibração do sensor L3 (Ref) 
34D6:  MOVF   x4F,W
34D8:  SUBLW  06
34DA:  BTFSS  FD8.2
34DC:  BRA    36FA
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
34DE:  MOVLB  5
34E0:  CLRF   xA3
34E2:  MOVLB  0
34E4:  CALL   04AA
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L3"); // converte char em texto 
34E8:  MOVLW  05
34EA:  MOVLB  4
34EC:  MOVWF  x6E
34EE:  MOVLW  73
34F0:  MOVWF  x6D
34F2:  MOVLW  36
34F4:  MOVWF  FF6
34F6:  MOVLW  03
34F8:  MOVWF  FF7
34FA:  MOVLB  0
34FC:  CALL   12A6
....................    string[40] = '\0'; 
3500:  MOVLB  5
3502:  CLRF   x9B
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3504:  MOVLW  01
3506:  MOVWF  xA3
3508:  MOVWF  xA4
350A:  MOVLW  05
350C:  MOVWF  xA6
350E:  MOVLW  73
3510:  MOVWF  xA5
3512:  MOVLW  01
3514:  MOVWF  xA7
3516:  MOVWF  xA8
3518:  MOVLB  0
351A:  CALL   10FE
....................     
....................    glcd_rect(0, 34, 80, 42, yes, on); 
351E:  MOVLB  5
3520:  CLRF   xA3
3522:  MOVLW  22
3524:  MOVWF  xA4
3526:  MOVLW  50
3528:  MOVWF  xA5
352A:  MOVLW  2A
352C:  MOVWF  xA6
352E:  MOVLW  01
3530:  MOVWF  xA7
3532:  MOVWF  xA8
3534:  MOVLB  0
3536:  CALL   21F0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
353A:  MOVLW  05
353C:  MOVLB  4
353E:  MOVWF  x6E
3540:  MOVLW  73
3542:  MOVWF  x6D
3544:  MOVLW  58
3546:  MOVWF  FF6
3548:  MOVLW  03
354A:  MOVWF  FF7
354C:  MOVLB  0
354E:  CALL   12A6
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3552:  MOVLW  01
3554:  MOVLB  5
3556:  MOVWF  xA3
3558:  MOVLW  19
355A:  MOVWF  xA4
355C:  MOVLW  05
355E:  MOVWF  xA6
3560:  MOVLW  73
3562:  MOVWF  xA5
3564:  MOVLW  01
3566:  MOVWF  xA7
3568:  MOVWF  xA8
356A:  MOVLB  0
356C:  CALL   10FE
....................     
....................    sprintf(string, "%ld",Offset_L3); // Converte adc em texto 
3570:  MOVLW  05
3572:  MOVLB  4
3574:  MOVWF  x6E
3576:  MOVLW  73
3578:  MOVWF  x6D
357A:  MOVLW  10
357C:  MOVWF  FE9
357E:  MOVFF  434,5A4
3582:  MOVFF  433,5A3
3586:  MOVLB  0
3588:  CALL   22B4
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
358C:  MOVLW  32
358E:  MOVLB  5
3590:  MOVWF  xA3
3592:  MOVLW  19
3594:  MOVWF  xA4
3596:  MOVLW  05
3598:  MOVWF  xA6
359A:  MOVLW  73
359C:  MOVWF  xA5
359E:  MOVLW  01
35A0:  MOVWF  xA7
35A2:  MOVWF  xA8
35A4:  MOVLB  0
35A6:  CALL   10FE
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
35AA:  MOVLW  05
35AC:  MOVLB  4
35AE:  MOVWF  x6E
35B0:  MOVLW  73
35B2:  MOVWF  x6D
35B4:  MOVLW  60
35B6:  MOVWF  FF6
35B8:  MOVLW  03
35BA:  MOVWF  FF7
35BC:  MOVLB  0
35BE:  CALL   12A6
....................    glcd_text57(1, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
35C2:  MOVLW  01
35C4:  MOVLB  5
35C6:  MOVWF  xA3
35C8:  MOVLW  23
35CA:  MOVWF  xA4
35CC:  MOVLW  05
35CE:  MOVWF  xA6
35D0:  MOVLW  73
35D2:  MOVWF  xA5
35D4:  MOVLW  01
35D6:  MOVWF  xA7
35D8:  CLRF   xA8
35DA:  MOVLB  0
35DC:  CALL   10FE
....................     
....................    sprintf(string, "%1.2f",ref_L3); // Converte adc em texto 
35E0:  MOVLW  05
35E2:  MOVLB  4
35E4:  MOVWF  x6E
35E6:  MOVLW  73
35E8:  MOVWF  x6D
35EA:  MOVLW  89
35EC:  MOVWF  FE9
35EE:  MOVFF  438,5A6
35F2:  MOVFF  437,5A5
35F6:  MOVFF  436,5A4
35FA:  MOVFF  435,5A3
35FE:  MOVLW  02
3600:  MOVLB  5
3602:  MOVWF  xA7
3604:  MOVLB  0
3606:  CALL   0E56
....................    glcd_text57(50, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
360A:  MOVLW  32
360C:  MOVLB  5
360E:  MOVWF  xA3
3610:  MOVLW  23
3612:  MOVWF  xA4
3614:  MOVLW  05
3616:  MOVWF  xA6
3618:  MOVLW  73
361A:  MOVWF  xA5
361C:  MOVLW  01
361E:  MOVWF  xA7
3620:  CLRF   xA8
3622:  MOVLB  0
3624:  CALL   10FE
....................     
....................     
....................    if(!input(pin_E1)&&ref_L3<30) //incrementa && valor maximo 
3628:  BSF    F96.1
362A:  BTFSC  F84.1
362C:  BRA    368E
362E:  MOVFF  438,5A6
3632:  MOVFF  437,5A5
3636:  MOVFF  436,5A4
363A:  MOVFF  435,5A3
363E:  MOVLB  5
3640:  CLRF   xAA
3642:  CLRF   xA9
3644:  MOVLW  70
3646:  MOVWF  xA8
3648:  MOVLW  83
364A:  MOVWF  xA7
364C:  MOVLB  0
364E:  CALL   0CE2
3652:  BNC   368E
....................    { 
....................      ref_L3=ref_L3+0.1; 
3654:  BCF    FD8.1
3656:  MOVFF  438,5A6
365A:  MOVFF  437,5A5
365E:  MOVFF  436,5A4
3662:  MOVFF  435,5A3
3666:  MOVLW  CD
3668:  MOVLB  5
366A:  MOVWF  xAA
366C:  MOVLW  CC
366E:  MOVWF  xA9
3670:  MOVLW  4C
3672:  MOVWF  xA8
3674:  MOVLW  7B
3676:  MOVWF  xA7
3678:  MOVLB  0
367A:  CALL   090C
367E:  MOVFF  03,438
3682:  MOVFF  02,437
3686:  MOVFF  01,436
368A:  MOVFF  00,435
....................    } 
....................    if(!input(pin_C2)&&ref_L3>5) //decrementa && valor minimo 
368E:  BSF    F94.2
3690:  BTFSC  F82.2
3692:  BRA    36F4
3694:  MOVLB  5
3696:  CLRF   xA6
3698:  CLRF   xA5
369A:  MOVLW  20
369C:  MOVWF  xA4
369E:  MOVLW  81
36A0:  MOVWF  xA3
36A2:  MOVFF  438,5AA
36A6:  MOVFF  437,5A9
36AA:  MOVFF  436,5A8
36AE:  MOVFF  435,5A7
36B2:  MOVLB  0
36B4:  CALL   0CE2
36B8:  BNC   36F4
....................    { 
....................      ref_L3=ref_L3-0.1; 
36BA:  BSF    FD8.1
36BC:  MOVFF  438,5A6
36C0:  MOVFF  437,5A5
36C4:  MOVFF  436,5A4
36C8:  MOVFF  435,5A3
36CC:  MOVLW  CD
36CE:  MOVLB  5
36D0:  MOVWF  xAA
36D2:  MOVLW  CC
36D4:  MOVWF  xA9
36D6:  MOVLW  4C
36D8:  MOVWF  xA8
36DA:  MOVLW  7B
36DC:  MOVWF  xA7
36DE:  MOVLB  0
36E0:  CALL   090C
36E4:  MOVFF  03,438
36E8:  MOVFF  02,437
36EC:  MOVFF  01,436
36F0:  MOVFF  00,435
....................    } 
....................     
....................    glcd_update();//update glcd 
36F4:  CALL   05E6
36F8:  MOVLB  4
....................    
....................   }//if menu=7 
....................  
....................   if(menu==5||menu==6) //Strings em comum - calibração do sensor L3  
36FA:  MOVF   x4F,W
36FC:  SUBLW  05
36FE:  BZ    3708
3700:  MOVF   x4F,W
3702:  SUBLW  06
3704:  BTFSS  FD8.2
3706:  BRA    39E0
....................   { 
....................    //Leitura do sensor L1 para tela de calibração 
....................     
....................    set_adc_channel(2); 
3708:  MOVLW  10
370A:  MOVWF  01
370C:  MOVF   FC2,W
370E:  ANDLW  C7
3710:  IORWF  01,W
3712:  MOVWF  FC2
....................    delay_us(20); 
3714:  MOVLW  1A
3716:  MOVWF  00
3718:  DECFSZ 00,F
371A:  BRA    3718
371C:  NOP   
....................    mediaAD_L3=0; valor=0; tensao=0; 
371E:  CLRF   x47
3720:  CLRF   x46
3722:  CLRF   x4D
3724:  CLRF   x4C
3726:  CLRF   x4B
3728:  CLRF   x4A
372A:  CLRF   x49
372C:  CLRF   x48
....................     
....................    for(rep=1; rep<=8; rep++) 
372E:  MOVLW  01
3730:  MOVWF  x4E
3732:  MOVF   x4E,W
3734:  SUBLW  08
3736:  BNC   3760
....................    { 
....................      valor= read_adc(); 
3738:  BSF    FC2.2
373A:  BTFSC  FC2.2
373C:  BRA    373A
373E:  MOVFF  FC3,44C
3742:  MOVFF  FC4,44D
....................      delay_ms(4); 
3746:  MOVLW  04
3748:  MOVLB  5
374A:  MOVWF  xA3
374C:  MOVLB  0
374E:  CALL   037C
....................      mediaAD_L3= mediaAD_L3 + valor; 
3752:  MOVLB  4
3754:  MOVF   x4C,W
3756:  ADDWF  x46,F
3758:  MOVF   x4D,W
375A:  ADDWFC x47,F
....................    } 
375C:  INCF   x4E,F
375E:  BRA    3732
....................    mediaAD_L3= mediaAD_L3/8; 
3760:  RRCF   x47,F
3762:  RRCF   x46,F
3764:  RRCF   x47,F
3766:  RRCF   x46,F
3768:  RRCF   x47,F
376A:  RRCF   x46,F
376C:  MOVLW  1F
376E:  ANDWF  x47,F
....................    tensao=(float)mediaAD_L3*4.8828; 
3770:  MOVFF  447,5A4
3774:  MOVFF  446,5A3
3778:  MOVLB  0
377A:  CALL   07E0
377E:  MOVFF  00,5A3
3782:  MOVFF  01,5A4
3786:  MOVFF  02,5A5
378A:  MOVFF  03,5A6
378E:  MOVFF  03,5B3
3792:  MOVFF  02,5B2
3796:  MOVFF  01,5B1
379A:  MOVFF  00,5B0
379E:  MOVLW  E6
37A0:  MOVLB  5
37A2:  MOVWF  xB7
37A4:  MOVLW  3F
37A6:  MOVWF  xB6
37A8:  MOVLW  1C
37AA:  MOVWF  xB5
37AC:  MOVLW  81
37AE:  MOVWF  xB4
37B0:  MOVLB  0
37B2:  CALL   0816
37B6:  MOVFF  03,44B
37BA:  MOVFF  02,44A
37BE:  MOVFF  01,449
37C2:  MOVFF  00,448
....................    L3_real=(float) (tensao - Offset_L3)/ref_L3; 
37C6:  MOVFF  434,5A4
37CA:  MOVFF  433,5A3
37CE:  CALL   07E0
37D2:  BSF    FD8.1
37D4:  MOVFF  44B,5A6
37D8:  MOVFF  44A,5A5
37DC:  MOVFF  449,5A4
37E0:  MOVFF  448,5A3
37E4:  MOVFF  03,5AA
37E8:  MOVFF  02,5A9
37EC:  MOVFF  01,5A8
37F0:  MOVFF  00,5A7
37F4:  CALL   090C
37F8:  MOVFF  00,5A3
37FC:  MOVFF  01,5A4
3800:  MOVFF  02,5A5
3804:  MOVFF  03,5A6
3808:  MOVFF  03,5AA
380C:  MOVFF  02,5A9
3810:  MOVFF  01,5A8
3814:  MOVFF  00,5A7
3818:  MOVFF  438,5AE
381C:  MOVFF  437,5AD
3820:  MOVFF  436,5AC
3824:  MOVFF  435,5AB
3828:  CALL   0B84
382C:  MOVFF  03,440
3830:  MOVFF  02,43F
3834:  MOVFF  01,43E
3838:  MOVFF  00,43D
....................       
....................    rep3++; 
383C:  MOVLB  4
383E:  INCF   x41,F
....................    L3_eq=L3_eq+L3_real; 
3840:  BCF    FD8.1
3842:  MOVFF  43C,5A6
3846:  MOVFF  43B,5A5
384A:  MOVFF  43A,5A4
384E:  MOVFF  439,5A3
3852:  MOVFF  440,5AA
3856:  MOVFF  43F,5A9
385A:  MOVFF  43E,5A8
385E:  MOVFF  43D,5A7
3862:  MOVLB  0
3864:  CALL   090C
3868:  MOVFF  03,43C
386C:  MOVFF  02,43B
3870:  MOVFF  01,43A
3874:  MOVFF  00,439
....................   
....................    if(rep3>=10) 
3878:  MOVLB  4
387A:  MOVF   x41,W
387C:  SUBLW  09
387E:  BC    38D0
....................    { 
....................     L3_eq = L3_eq/10;  
3880:  MOVFF  43C,5AA
3884:  MOVFF  43B,5A9
3888:  MOVFF  43A,5A8
388C:  MOVFF  439,5A7
3890:  MOVLB  5
3892:  CLRF   xAE
3894:  CLRF   xAD
3896:  MOVLW  20
3898:  MOVWF  xAC
389A:  MOVLW  82
389C:  MOVWF  xAB
389E:  MOVLB  0
38A0:  CALL   0B84
38A4:  MOVFF  03,43C
38A8:  MOVFF  02,43B
38AC:  MOVFF  01,43A
38B0:  MOVFF  00,439
....................     L3 = L3_eq; 
38B4:  MOVFF  43C,432
38B8:  MOVFF  43B,431
38BC:  MOVFF  43A,430
38C0:  MOVFF  439,42F
....................     rep3=0; 
38C4:  MOVLB  4
38C6:  CLRF   x41
....................     L3_eq=0; 
38C8:  CLRF   x3C
38CA:  CLRF   x3B
38CC:  CLRF   x3A
38CE:  CLRF   x39
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L3); // Converte adc em texto 
38D0:  MOVLW  05
38D2:  MOVWF  x6E
38D4:  MOVLW  9C
38D6:  MOVWF  x6D
38D8:  MOVLW  89
38DA:  MOVWF  FE9
38DC:  MOVFF  432,5A6
38E0:  MOVFF  431,5A5
38E4:  MOVFF  430,5A4
38E8:  MOVFF  42F,5A3
38EC:  MOVLW  01
38EE:  MOVLB  5
38F0:  MOVWF  xA7
38F2:  MOVLB  0
38F4:  CALL   0E56
....................  
....................    if(L3>=100) 
38F8:  MOVLB  5
38FA:  CLRF   xA6
38FC:  CLRF   xA5
38FE:  MOVLW  48
3900:  MOVWF  xA4
3902:  MOVLW  85
3904:  MOVWF  xA3
3906:  MOVFF  432,5AA
390A:  MOVFF  431,5A9
390E:  MOVFF  430,5A8
3912:  MOVFF  42F,5A7
3916:  MOVLB  0
3918:  CALL   0CE2
391C:  BC    3920
391E:  BNZ   3928
....................    { 
....................      string[6] = '\0'; 
3920:  MOVLB  5
3922:  CLRF   xA2
....................      string[5] = 'A'; 
3924:  MOVLW  41
3926:  MOVWF  xA1
....................    } 
....................    if(L3<100) 
3928:  MOVFF  432,5A6
392C:  MOVFF  431,5A5
3930:  MOVFF  430,5A4
3934:  MOVFF  42F,5A3
3938:  MOVLB  5
393A:  CLRF   xAA
393C:  CLRF   xA9
393E:  MOVLW  48
3940:  MOVWF  xA8
3942:  MOVLW  85
3944:  MOVWF  xA7
3946:  MOVLB  0
3948:  CALL   0CE2
394C:  BNC   3956
....................    { 
....................      string[5] = '\0'; 
394E:  MOVLB  5
3950:  CLRF   xA1
....................      string[4] = 'A'; 
3952:  MOVLW  41
3954:  MOVWF  xA0
....................    } 
....................    if(L3<10) 
3956:  MOVFF  432,5A6
395A:  MOVFF  431,5A5
395E:  MOVFF  430,5A4
3962:  MOVFF  42F,5A3
3966:  MOVLB  5
3968:  CLRF   xAA
396A:  CLRF   xA9
396C:  MOVLW  20
396E:  MOVWF  xA8
3970:  MOVLW  82
3972:  MOVWF  xA7
3974:  MOVLB  0
3976:  CALL   0CE2
397A:  BNC   3984
....................    { 
....................      string[4] = '\0'; 
397C:  MOVLB  5
397E:  CLRF   xA0
....................      string[3] = 'A'; 
3980:  MOVLW  41
3982:  MOVWF  x9F
....................    } 
....................     
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
3984:  MOVLW  12
3986:  MOVLB  5
3988:  MOVWF  xA3
398A:  MOVLW  2D
398C:  MOVWF  xA4
398E:  MOVLW  05
3990:  MOVWF  xA6
3992:  MOVLW  9C
3994:  MOVWF  xA5
3996:  MOVLW  01
3998:  MOVWF  xA7
399A:  MOVWF  xA8
399C:  MOVLB  0
399E:  CALL   10FE
....................       
....................    sprintf(string, "L3:"); // Converte char em texto 
39A2:  MOVLW  05
39A4:  MOVLB  4
39A6:  MOVWF  x6E
39A8:  MOVLW  9C
39AA:  MOVWF  x6D
39AC:  MOVLW  66
39AE:  MOVWF  FF6
39B0:  MOVLW  03
39B2:  MOVWF  FF7
39B4:  MOVLB  0
39B6:  CALL   12A6
....................    string[3] = '\0'; 
39BA:  MOVLB  5
39BC:  CLRF   x9F
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
39BE:  MOVLW  01
39C0:  MOVWF  xA3
39C2:  MOVLW  2D
39C4:  MOVWF  xA4
39C6:  MOVLW  05
39C8:  MOVWF  xA6
39CA:  MOVLW  9C
39CC:  MOVWF  xA5
39CE:  MOVLW  01
39D0:  MOVWF  xA7
39D2:  MOVWF  xA8
39D4:  MOVLB  0
39D6:  CALL   10FE
....................     
....................    glcd_update();//update glcd 
39DA:  CALL   05E6
39DE:  MOVLB  4
....................    
....................   }//if menu = 6 ou 7 
....................    
....................  
.................... }//controle_menu 
39E0:  MOVLB  0
39E2:  GOTO   3D24 (RETURN)
....................  
....................  void calculos_potencia() 
....................  { 
....................   if (menu==0&&menu_lib==0) 
*
1D5C:  MOVLB  4
1D5E:  MOVF   x4F,F
1D60:  BTFSS  FD8.2
1D62:  BRA    20AC
1D64:  MOVF   x50,F
1D66:  BTFSS  FD8.2
1D68:  BRA    20AC
....................   { 
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    corrente_media=0; 
1D6A:  CLRF   x60
1D6C:  CLRF   x5F
1D6E:  CLRF   x5E
1D70:  CLRF   x5D
....................    corrente_media= L1+L2+L3; 
1D72:  BCF    FD8.1
1D74:  MOVFF  40C,5A6
1D78:  MOVFF  40B,5A5
1D7C:  MOVFF  40A,5A4
1D80:  MOVFF  409,5A3
1D84:  MOVFF  41F,5AA
1D88:  MOVFF  41E,5A9
1D8C:  MOVFF  41D,5A8
1D90:  MOVFF  41C,5A7
1D94:  MOVLB  0
1D96:  CALL   090C
1D9A:  MOVFF  00,479
1D9E:  MOVFF  01,47A
1DA2:  MOVFF  02,47B
1DA6:  MOVFF  03,47C
1DAA:  BCF    FD8.1
1DAC:  MOVFF  03,5A6
1DB0:  MOVFF  02,5A5
1DB4:  MOVFF  01,5A4
1DB8:  MOVFF  00,5A3
1DBC:  MOVFF  432,5AA
1DC0:  MOVFF  431,5A9
1DC4:  MOVFF  430,5A8
1DC8:  MOVFF  42F,5A7
1DCC:  CALL   090C
1DD0:  MOVFF  03,460
1DD4:  MOVFF  02,45F
1DD8:  MOVFF  01,45E
1DDC:  MOVFF  00,45D
....................    corrente_media= corrente_media/3; 
1DE0:  MOVFF  460,5AA
1DE4:  MOVFF  45F,5A9
1DE8:  MOVFF  45E,5A8
1DEC:  MOVFF  45D,5A7
1DF0:  MOVLB  5
1DF2:  CLRF   xAE
1DF4:  CLRF   xAD
1DF6:  MOVLW  40
1DF8:  MOVWF  xAC
1DFA:  MOVLW  80
1DFC:  MOVWF  xAB
1DFE:  MOVLB  0
1E00:  CALL   0B84
1E04:  MOVFF  03,460
1E08:  MOVFF  02,45F
1E0C:  MOVFF  01,45E
1E10:  MOVFF  00,45D
....................     
....................    soma_corrente++; 
1E14:  MOVLB  4
1E16:  INCF   x69,F
....................    corrente_eq=corrente_eq+corrente_media; 
1E18:  BCF    FD8.1
1E1A:  MOVFF  464,5A6
1E1E:  MOVFF  463,5A5
1E22:  MOVFF  462,5A4
1E26:  MOVFF  461,5A3
1E2A:  MOVFF  460,5AA
1E2E:  MOVFF  45F,5A9
1E32:  MOVFF  45E,5A8
1E36:  MOVFF  45D,5A7
1E3A:  MOVLB  0
1E3C:  CALL   090C
1E40:  MOVFF  03,464
1E44:  MOVFF  02,463
1E48:  MOVFF  01,462
1E4C:  MOVFF  00,461
....................     
....................    if(soma_corrente==10) 
1E50:  MOVLB  4
1E52:  MOVF   x69,W
1E54:  SUBLW  0A
1E56:  BNZ   1EA8
....................    { 
....................     corrente_eq = corrente_eq/10;  
1E58:  MOVFF  464,5AA
1E5C:  MOVFF  463,5A9
1E60:  MOVFF  462,5A8
1E64:  MOVFF  461,5A7
1E68:  MOVLB  5
1E6A:  CLRF   xAE
1E6C:  CLRF   xAD
1E6E:  MOVLW  20
1E70:  MOVWF  xAC
1E72:  MOVLW  82
1E74:  MOVWF  xAB
1E76:  MOVLB  0
1E78:  CALL   0B84
1E7C:  MOVFF  03,464
1E80:  MOVFF  02,463
1E84:  MOVFF  01,462
1E88:  MOVFF  00,461
....................     corrente_real = corrente_eq; 
1E8C:  MOVFF  464,468
1E90:  MOVFF  463,467
1E94:  MOVFF  462,466
1E98:  MOVFF  461,465
....................     soma_corrente=0; 
1E9C:  MOVLB  4
1E9E:  CLRF   x69
....................     corrente_eq=0; 
1EA0:  CLRF   x64
1EA2:  CLRF   x63
1EA4:  CLRF   x62
1EA6:  CLRF   x61
....................    } 
....................     
....................    //calcula potencia real em Watts 
....................    pot_real=tensao_rede*corrente_real; 
1EA8:  MOVFF  45C,5A4
1EAC:  MOVFF  45B,5A3
1EB0:  MOVLB  0
1EB2:  CALL   07E0
1EB6:  MOVFF  03,5B3
1EBA:  MOVFF  02,5B2
1EBE:  MOVFF  01,5B1
1EC2:  MOVFF  00,5B0
1EC6:  MOVFF  468,5B7
1ECA:  MOVFF  467,5B6
1ECE:  MOVFF  466,5B5
1ED2:  MOVFF  465,5B4
1ED6:  CALL   0816
1EDA:  MOVFF  03,47C
1EDE:  MOVFF  02,47B
1EE2:  MOVFF  01,47A
1EE6:  MOVFF  00,479
1EEA:  RCALL  1BE6
1EEC:  MOVFF  02,459
1EF0:  MOVFF  01,458
....................    
....................    char string[10];   
....................    sprintf(string, "%.1lf", (float)pot_real); // Converte adc em texto 
1EF4:  MOVFF  459,5A4
1EF8:  MOVFF  458,5A3
1EFC:  CALL   07E0
1F00:  MOVFF  00,479
1F04:  MOVFF  01,47A
1F08:  MOVFF  02,47B
1F0C:  MOVFF  03,47C
1F10:  MOVLW  04
1F12:  MOVLB  4
1F14:  MOVWF  x6E
1F16:  MOVLW  6F
1F18:  MOVWF  x6D
1F1A:  MOVLW  89
1F1C:  MOVWF  FE9
1F1E:  MOVFF  03,5A6
1F22:  MOVFF  02,5A5
1F26:  MOVFF  01,5A4
1F2A:  MOVFF  00,5A3
1F2E:  MOVLW  01
1F30:  MOVLB  5
1F32:  MOVWF  xA7
1F34:  MOVLB  0
1F36:  CALL   0E56
....................  
....................    if(pot_real>10000) 
1F3A:  MOVLB  4
1F3C:  MOVF   x59,W
1F3E:  SUBLW  26
1F40:  BC    1F52
1F42:  XORLW  FF
1F44:  BNZ   1F4C
1F46:  MOVF   x58,W
1F48:  SUBLW  10
1F4A:  BC    1F52
....................    { 
....................      string[8] = '\0'; 
1F4C:  CLRF   x77
....................      string[7] = 'W'; 
1F4E:  MOVLW  57
1F50:  MOVWF  x76
....................    } 
....................     
....................    if(pot_real<10000) 
1F52:  MOVF   x59,W
1F54:  SUBLW  27
1F56:  BNC   1F66
1F58:  BNZ   1F60
1F5A:  MOVF   x58,W
1F5C:  SUBLW  0F
1F5E:  BNC   1F66
....................    { 
....................      string[7] = '\0'; 
1F60:  CLRF   x76
....................      string[6] = 'W'; 
1F62:  MOVLW  57
1F64:  MOVWF  x75
....................    } 
....................  
....................    if(pot_real<1000) 
1F66:  MOVF   x59,W
1F68:  SUBLW  03
1F6A:  BNC   1F7A
1F6C:  BNZ   1F74
1F6E:  MOVF   x58,W
1F70:  SUBLW  E7
1F72:  BNC   1F7A
....................    { 
....................      string[6] = '\0'; 
1F74:  CLRF   x75
....................      string[5] = 'W'; 
1F76:  MOVLW  57
1F78:  MOVWF  x74
....................    } 
....................    if(pot_real<100) 
1F7A:  MOVF   x59,F
1F7C:  BNZ   1F8A
1F7E:  MOVF   x58,W
1F80:  SUBLW  63
1F82:  BNC   1F8A
....................    { 
....................      string[5] = '\0'; 
1F84:  CLRF   x74
....................      string[4] = 'W'; 
1F86:  MOVLW  57
1F88:  MOVWF  x73
....................    } 
....................    if(pot_real<10) 
1F8A:  MOVF   x59,F
1F8C:  BNZ   1F9A
1F8E:  MOVF   x58,W
1F90:  SUBLW  09
1F92:  BNC   1F9A
....................    { 
....................      string[4] = '\0'; 
1F94:  CLRF   x73
....................      string[3] = 'W'; 
1F96:  MOVLW  57
1F98:  MOVWF  x72
....................    } 
....................     
....................    glcd_text57(60, 40, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
1F9A:  MOVLW  3C
1F9C:  MOVLB  5
1F9E:  MOVWF  xA3
1FA0:  MOVLW  28
1FA2:  MOVWF  xA4
1FA4:  MOVLW  04
1FA6:  MOVWF  xA6
1FA8:  MOVLW  6F
1FAA:  MOVWF  xA5
1FAC:  MOVLW  01
1FAE:  MOVWF  xA7
1FB0:  MOVWF  xA8
1FB2:  MOVLB  0
1FB4:  CALL   10FE
....................       
....................    sprintf(string, "P(Real)="); // Converte char em texto 
1FB8:  MOVLW  04
1FBA:  MOVLB  4
1FBC:  MOVWF  x6E
1FBE:  MOVLW  6F
1FC0:  MOVWF  x6D
1FC2:  MOVLW  6A
1FC4:  MOVWF  FF6
1FC6:  MOVLW  03
1FC8:  MOVWF  FF7
1FCA:  MOVLB  0
1FCC:  CALL   12A6
....................    string[8] = '\0'; 
1FD0:  MOVLB  4
1FD2:  CLRF   x77
....................    glcd_text57(1, 40, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
1FD4:  MOVLW  01
1FD6:  MOVLB  5
1FD8:  MOVWF  xA3
1FDA:  MOVLW  28
1FDC:  MOVWF  xA4
1FDE:  MOVLW  04
1FE0:  MOVWF  xA6
1FE2:  MOVLW  6F
1FE4:  MOVWF  xA5
1FE6:  MOVLW  01
1FE8:  MOVWF  xA7
1FEA:  MOVWF  xA8
1FEC:  MOVLB  0
1FEE:  CALL   10FE
....................     
....................     
....................     
....................    //Calcula potenia em HP 
....................    pot_HP = 2*(pot_real/746); 
1FF2:  MOVFF  459,47A
1FF6:  MOVFF  458,479
1FFA:  MOVLW  02
1FFC:  MOVLB  4
1FFE:  MOVWF  x7C
2000:  MOVLW  EA
2002:  MOVWF  x7B
2004:  MOVLB  0
2006:  BRA    1C22
2008:  MOVFF  02,03
200C:  MOVFF  01,02
2010:  BCF    FD8.0
2012:  RLCF   02,F
2014:  RLCF   03,F
2016:  MOVFF  02,45A
201A:  MOVLB  4
....................       
....................    sprintf(string, "%2.0d", pot_HP); // Converte adc em texto 
201C:  MOVLW  04
201E:  MOVWF  x6E
2020:  MOVLW  6F
2022:  MOVWF  x6D
2024:  MOVFF  45A,479
2028:  MOVLW  11
202A:  MOVWF  x7A
202C:  MOVLB  0
202E:  BRA    1C96
....................    if(pot_HP<100) 
2030:  MOVLB  4
2032:  MOVF   x5A,W
2034:  SUBLW  63
2036:  BNC   2042
....................    { 
....................      string[5] = '\0'; 
2038:  CLRF   x74
....................      string[4] = 'P'; 
203A:  MOVLW  50
203C:  MOVWF  x73
....................      string[3] = 'H'; 
203E:  MOVLW  48
2040:  MOVWF  x72
....................    } 
....................    if(pot_HP<10) 
2042:  MOVF   x5A,W
2044:  SUBLW  09
2046:  BNC   2052
....................    { 
....................      string[4] = '\0'; 
2048:  CLRF   x73
....................      string[3] = 'P'; 
204A:  MOVLW  50
204C:  MOVWF  x72
....................      string[2] = 'H'; 
204E:  MOVLW  48
2050:  MOVWF  x71
....................    } 
....................     
....................    glcd_text57(53, 50, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
2052:  MOVLW  35
2054:  MOVLB  5
2056:  MOVWF  xA3
2058:  MOVLW  32
205A:  MOVWF  xA4
205C:  MOVLW  04
205E:  MOVWF  xA6
2060:  MOVLW  6F
2062:  MOVWF  xA5
2064:  MOVLW  01
2066:  MOVWF  xA7
2068:  MOVWF  xA8
206A:  MOVLB  0
206C:  CALL   10FE
....................       
....................    sprintf(string, "P(HP)="); // Converte char em texto 
2070:  MOVLW  04
2072:  MOVLB  4
2074:  MOVWF  x6E
2076:  MOVLW  6F
2078:  MOVWF  x6D
207A:  MOVLW  74
207C:  MOVWF  FF6
207E:  MOVLW  03
2080:  MOVWF  FF7
2082:  MOVLB  0
2084:  CALL   12A6
....................    string[8] = '\0'; 
2088:  MOVLB  4
208A:  CLRF   x77
....................    glcd_text57(1, 50, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
208C:  MOVLW  01
208E:  MOVLB  5
2090:  MOVWF  xA3
2092:  MOVLW  32
2094:  MOVWF  xA4
2096:  MOVLW  04
2098:  MOVWF  xA6
209A:  MOVLW  6F
209C:  MOVWF  xA5
209E:  MOVLW  01
20A0:  MOVWF  xA7
20A2:  MOVWF  xA8
20A4:  MOVLB  0
20A6:  CALL   10FE
20AA:  MOVLB  4
....................  
....................   } //if menu=0 
....................  } //void calculos_potencia 
20AC:  MOVLB  0
20AE:  GOTO   3D1C (RETURN)
....................   
....................   
.................... //............................................................................................................... 
.................... void main(void) 
.................... { 
*
3ADA:  CLRF   FF8
3ADC:  BCF    FD0.7
3ADE:  CLRF   FEA
3AE0:  CLRF   FE9
3AE2:  BCF    F94.2
3AE4:  BSF    F8B.2
3AE6:  MOVLB  4
3AE8:  CLRF   x06
3AEA:  CLRF   x05
3AEC:  CLRF   x07
3AEE:  CLRF   x08
3AF0:  CLRF   x0C
3AF2:  CLRF   x0B
3AF4:  CLRF   x0A
3AF6:  CLRF   x09
3AF8:  CLRF   x0E
3AFA:  CLRF   x0D
3AFC:  CLRF   x12
3AFE:  CLRF   x11
3B00:  CLRF   x10
3B02:  CLRF   x0F
3B04:  CLRF   x16
3B06:  CLRF   x15
3B08:  CLRF   x14
3B0A:  CLRF   x13
3B0C:  CLRF   x1A
3B0E:  CLRF   x19
3B10:  CLRF   x18
3B12:  CLRF   x17
3B14:  CLRF   x1B
3B16:  CLRF   x1F
3B18:  CLRF   x1E
3B1A:  CLRF   x1D
3B1C:  CLRF   x1C
3B1E:  CLRF   x21
3B20:  CLRF   x20
3B22:  CLRF   x25
3B24:  CLRF   x24
3B26:  CLRF   x23
3B28:  CLRF   x22
3B2A:  CLRF   x29
3B2C:  CLRF   x28
3B2E:  CLRF   x27
3B30:  CLRF   x26
3B32:  CLRF   x2D
3B34:  CLRF   x2C
3B36:  CLRF   x2B
3B38:  CLRF   x2A
3B3A:  CLRF   x2E
3B3C:  CLRF   x32
3B3E:  CLRF   x31
3B40:  CLRF   x30
3B42:  CLRF   x2F
3B44:  CLRF   x34
3B46:  CLRF   x33
3B48:  CLRF   x38
3B4A:  CLRF   x37
3B4C:  CLRF   x36
3B4E:  CLRF   x35
3B50:  CLRF   x3C
3B52:  CLRF   x3B
3B54:  CLRF   x3A
3B56:  CLRF   x39
3B58:  CLRF   x40
3B5A:  CLRF   x3F
3B5C:  CLRF   x3E
3B5E:  CLRF   x3D
3B60:  CLRF   x41
3B62:  CLRF   x43
3B64:  CLRF   x42
3B66:  CLRF   x45
3B68:  CLRF   x44
3B6A:  CLRF   x47
3B6C:  CLRF   x46
3B6E:  CLRF   x4B
3B70:  CLRF   x4A
3B72:  CLRF   x49
3B74:  CLRF   x48
3B76:  CLRF   x4D
3B78:  CLRF   x4C
3B7A:  CLRF   x4E
3B7C:  CLRF   x4F
3B7E:  CLRF   x50
3B80:  CLRF   x51
3B82:  CLRF   x52
3B84:  CLRF   x59
3B86:  CLRF   x58
3B88:  CLRF   x5A
3B8A:  CLRF   x5C
3B8C:  MOVLW  DC
3B8E:  MOVWF  x5B
3B90:  CLRF   x60
3B92:  CLRF   x5F
3B94:  CLRF   x5E
3B96:  CLRF   x5D
3B98:  CLRF   x64
3B9A:  CLRF   x63
3B9C:  CLRF   x62
3B9E:  CLRF   x61
3BA0:  CLRF   x68
3BA2:  CLRF   x67
3BA4:  CLRF   x66
3BA6:  CLRF   x65
3BA8:  CLRF   x69
3BAA:  CLRF   x6B
3BAC:  CLRF   x6A
3BAE:  CLRF   x6E
3BB0:  CLRF   x6D
3BB2:  BSF    FC1.0
3BB4:  BSF    FC1.1
3BB6:  BSF    FC1.2
3BB8:  BCF    FC1.3
....................     
....................    setup_ADC_ports (AN0_AN1_AN3);         //Habilita portas Analógicas 
3BBA:  BCF    FC1.0
3BBC:  BCF    FC1.1
3BBE:  BSF    FC1.2
3BC0:  BCF    FC1.3
....................    setup_ADC(ADC_CLOCK_INTERNAL);         //Conversor AD em 4MHz (CLOCK INTERNO) 
3BC2:  BCF    FC1.6
3BC4:  BSF    FC2.6
3BC6:  BSF    FC2.7
3BC8:  BSF    FC1.7
3BCA:  BSF    FC2.0
....................    glcd_init_graph();                     //glcd modo graphico 
3BCC:  MOVLB  0
3BCE:  GOTO   06F2
....................    glcd_fillScreen(off);                  //glcd clear full pixel 0 
3BD2:  MOVLB  5
3BD4:  CLRF   xA3
3BD6:  MOVLB  0
3BD8:  CALL   04AA
....................    glcd_update();                         //glcd update   
3BDC:  CALL   05E6
....................    enable_interrupts(int_rda);            //Habilita interrupções 
3BE0:  BSF    F9D.5
....................    enable_interrupts(global);             //Habilita interrupções globais 
3BE2:  MOVLW  C0
3BE4:  IORWF  FF2,F
....................     
....................     
....................    // LÊ VALORES ANTES SALVOS NA MEMORIA EEPROM 
....................    TempoET=              read_eeprom (1);             
3BE6:  MOVFF  FF2,46F
3BEA:  BCF    FF2.7
3BEC:  MOVLW  01
3BEE:  MOVWF  FA9
3BF0:  BCF    FA6.6
3BF2:  BCF    FA6.7
3BF4:  BSF    FA6.0
3BF6:  MOVF   FA8,W
3BF8:  MOVLB  4
3BFA:  BTFSC  x6F.7
3BFC:  BSF    FF2.7
3BFE:  MOVWF  x53
....................    offset_L1=            read_int16_eeprom (10); 
3C00:  MOVLW  0A
3C02:  MOVWF  x6F
3C04:  MOVLB  0
3C06:  CALL   078C
3C0A:  MOVFF  02,40E
3C0E:  MOVFF  01,40D
....................    ref_L1=               read_int16_eeprom (20); 
3C12:  MOVLW  14
3C14:  MOVLB  4
3C16:  MOVWF  x6F
3C18:  MOVLB  0
3C1A:  CALL   078C
3C1E:  MOVFF  02,5A4
3C22:  MOVFF  01,5A3
3C26:  CALL   07E0
3C2A:  MOVFF  03,412
3C2E:  MOVFF  02,411
3C32:  MOVFF  01,410
3C36:  MOVFF  00,40F
....................    offset_L2=            read_int16_eeprom (30); 
3C3A:  MOVLW  1E
3C3C:  MOVLB  4
3C3E:  MOVWF  x6F
3C40:  MOVLB  0
3C42:  CALL   078C
3C46:  MOVFF  02,421
3C4A:  MOVFF  01,420
....................    ref_L2=               read_int16_eeprom (40); 
3C4E:  MOVLW  28
3C50:  MOVLB  4
3C52:  MOVWF  x6F
3C54:  MOVLB  0
3C56:  CALL   078C
3C5A:  MOVFF  02,5A4
3C5E:  MOVFF  01,5A3
3C62:  CALL   07E0
3C66:  MOVFF  03,425
3C6A:  MOVFF  02,424
3C6E:  MOVFF  01,423
3C72:  MOVFF  00,422
....................    offset_L3=            read_int16_eeprom (50); 
3C76:  MOVLW  32
3C78:  MOVLB  4
3C7A:  MOVWF  x6F
3C7C:  MOVLB  0
3C7E:  CALL   078C
3C82:  MOVFF  02,434
3C86:  MOVFF  01,433
....................    ref_L3=               read_int16_eeprom (60); 
3C8A:  MOVLW  3C
3C8C:  MOVLB  4
3C8E:  MOVWF  x6F
3C90:  MOVLB  0
3C92:  CALL   078C
3C96:  MOVFF  02,5A4
3C9A:  MOVFF  01,5A3
3C9E:  CALL   07E0
3CA2:  MOVFF  03,438
3CA6:  MOVFF  02,437
3CAA:  MOVFF  01,436
3CAE:  MOVFF  00,435
....................     
....................    def_eeprom=          read_eeprom (2); 
3CB2:  MOVFF  FF2,46F
3CB6:  BCF    FF2.7
3CB8:  MOVLW  02
3CBA:  MOVWF  FA9
3CBC:  BCF    FA6.6
3CBE:  BCF    FA6.7
3CC0:  BSF    FA6.0
3CC2:  MOVF   FA8,W
3CC4:  MOVLB  4
3CC6:  BTFSC  x6F.7
3CC8:  BSF    FF2.7
3CCA:  MOVWF  x6C
....................     
....................    //Valores default de calibração 
....................    if(def_eeprom!=0) 
3CCC:  MOVF   x6C,F
3CCE:  BZ    3D12
....................    { 
....................     Offset_L1=2500;       //offset sensor 1 
3CD0:  MOVLW  09
3CD2:  MOVWF  x0E
3CD4:  MOVLW  C4
3CD6:  MOVWF  x0D
....................     ref_L1=10;            //Referencia sensor 1 
3CD8:  CLRF   x12
3CDA:  CLRF   x11
3CDC:  MOVLW  20
3CDE:  MOVWF  x10
3CE0:  MOVLW  82
3CE2:  MOVWF  x0F
....................     Offset_L2=2491;       //offset sensor 2 
3CE4:  MOVLW  09
3CE6:  MOVWF  x21
3CE8:  MOVLW  BB
3CEA:  MOVWF  x20
....................     ref_L2=10;      
3CEC:  CLRF   x25
3CEE:  CLRF   x24
3CF0:  MOVLW  20
3CF2:  MOVWF  x23
3CF4:  MOVLW  82
3CF6:  MOVWF  x22
....................     Offset_L3=2486;       //offset sensor 2 
3CF8:  MOVLW  09
3CFA:  MOVWF  x34
3CFC:  MOVLW  B6
3CFE:  MOVWF  x33
....................     ref_L3=10;            //Referencia sensor 2 
3D00:  CLRF   x38
3D02:  CLRF   x37
3D04:  MOVLW  20
3D06:  MOVWF  x36
3D08:  MOVLW  82
3D0A:  MOVWF  x35
....................     TempoET=25; 
3D0C:  MOVLW  19
3D0E:  MOVWF  x53
....................     def_eeprom=0; 
3D10:  CLRF   x6C
....................    } 
....................   
....................     
....................     
....................     
.................... //.................................................................................................................    
....................    while (true) //loop principal 
....................    {   
....................       //Fluxo Principal 
....................       leitura_sensores(); 
3D12:  MOVLB  0
3D14:  GOTO   12C6
....................       calculos_potencia(); 
3D18:  GOTO   1D5C
....................       glcd_update();                       
3D1C:  CALL   05E6
....................       controle_menu(); 
3D20:  GOTO   23AA
....................       controle_saidas(); 
3D24:  BRA    39E6
....................        
....................       //Salva valores na EEPROM 
....................       leituraEeprom=read_eeprom(1); 
3D26:  MOVFF  FF2,46F
3D2A:  BCF    FF2.7
3D2C:  MOVLW  01
3D2E:  MOVWF  FA9
3D30:  BCF    FA6.6
3D32:  BCF    FA6.7
3D34:  BSF    FA6.0
3D36:  MOVF   FA8,W
3D38:  MOVLB  4
3D3A:  BTFSC  x6F.7
3D3C:  BSF    FF2.7
3D3E:  CLRF   x6B
3D40:  MOVWF  x6A
....................       if(leituraEeprom!=TempoET) 
3D42:  MOVF   x53,W
3D44:  SUBWF  x6A,W
3D46:  BNZ   3D4C
3D48:  MOVF   x6B,F
3D4A:  BZ    3D78
....................       {write_eeprom(1,TempoET);} 
3D4C:  MOVLW  01
3D4E:  MOVWF  FA9
3D50:  MOVFF  453,FA8
3D54:  BCF    FA6.6
3D56:  BCF    FA6.7
3D58:  BSF    FA6.2
3D5A:  MOVF   FF2,W
3D5C:  MOVWF  00
3D5E:  BCF    FF2.7
3D60:  MOVLB  F
3D62:  MOVLW  55
3D64:  MOVWF  FA7
3D66:  MOVLW  AA
3D68:  MOVWF  FA7
3D6A:  BSF    FA6.1
3D6C:  BTFSC  FA6.1
3D6E:  BRA    3D6C
3D70:  BCF    FA6.2
3D72:  MOVF   00,W
3D74:  IORWF  FF2,F
3D76:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(10); 
3D78:  MOVLW  0A
3D7A:  MOVWF  x6F
3D7C:  MOVLB  0
3D7E:  CALL   078C
3D82:  MOVFF  02,46B
3D86:  MOVFF  01,46A
....................       if(leituraEeprom!=offset_L1) 
3D8A:  MOVLB  4
3D8C:  MOVF   x0D,W
3D8E:  SUBWF  x6A,W
3D90:  BNZ   3D98
3D92:  MOVF   x0E,W
3D94:  SUBWF  x6B,W
3D96:  BZ    3DAA
....................       {write_int16_eeprom(10,offset_L1);} 
3D98:  MOVLW  0A
3D9A:  MOVWF  x71
3D9C:  MOVFF  40E,473
3DA0:  MOVFF  40D,472
3DA4:  MOVLB  0
3DA6:  RCALL  3A76
3DA8:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(20); 
3DAA:  MOVLW  14
3DAC:  MOVWF  x6F
3DAE:  MOVLB  0
3DB0:  CALL   078C
3DB4:  MOVFF  02,46B
3DB8:  MOVFF  01,46A
....................       if(leituraEeprom!=ref_L1) 
3DBC:  MOVFF  46B,5A4
3DC0:  MOVFF  46A,5A3
3DC4:  CALL   07E0
3DC8:  MOVFF  03,5A6
3DCC:  MOVFF  02,5A5
3DD0:  MOVFF  01,5A4
3DD4:  MOVFF  00,5A3
3DD8:  MOVFF  412,5AA
3DDC:  MOVFF  411,5A9
3DE0:  MOVFF  410,5A8
3DE4:  MOVFF  40F,5A7
3DE8:  CALL   0CE2
3DEC:  BZ    3E1C
....................       {write_int16_eeprom(20,ref_L1);} 
3DEE:  MOVFF  412,47C
3DF2:  MOVFF  411,47B
3DF6:  MOVFF  410,47A
3DFA:  MOVFF  40F,479
3DFE:  CALL   1BE6
3E02:  MOVFF  02,470
3E06:  MOVFF  01,46F
3E0A:  MOVLW  14
3E0C:  MOVLB  4
3E0E:  MOVWF  x71
3E10:  MOVFF  02,473
3E14:  MOVFF  01,472
3E18:  MOVLB  0
3E1A:  RCALL  3A76
....................        
....................       leituraEeprom=read_int16_eeprom(30); 
3E1C:  MOVLW  1E
3E1E:  MOVLB  4
3E20:  MOVWF  x6F
3E22:  MOVLB  0
3E24:  CALL   078C
3E28:  MOVFF  02,46B
3E2C:  MOVFF  01,46A
....................       if(leituraEeprom!=offset_L2) 
3E30:  MOVLB  4
3E32:  MOVF   x20,W
3E34:  SUBWF  x6A,W
3E36:  BNZ   3E3E
3E38:  MOVF   x21,W
3E3A:  SUBWF  x6B,W
3E3C:  BZ    3E50
....................       {write_int16_eeprom(30,offset_L2);} 
3E3E:  MOVLW  1E
3E40:  MOVWF  x71
3E42:  MOVFF  421,473
3E46:  MOVFF  420,472
3E4A:  MOVLB  0
3E4C:  RCALL  3A76
3E4E:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(40); 
3E50:  MOVLW  28
3E52:  MOVWF  x6F
3E54:  MOVLB  0
3E56:  CALL   078C
3E5A:  MOVFF  02,46B
3E5E:  MOVFF  01,46A
....................       if(leituraEeprom!=ref_L2) 
3E62:  MOVFF  46B,5A4
3E66:  MOVFF  46A,5A3
3E6A:  CALL   07E0
3E6E:  MOVFF  03,5A6
3E72:  MOVFF  02,5A5
3E76:  MOVFF  01,5A4
3E7A:  MOVFF  00,5A3
3E7E:  MOVFF  425,5AA
3E82:  MOVFF  424,5A9
3E86:  MOVFF  423,5A8
3E8A:  MOVFF  422,5A7
3E8E:  CALL   0CE2
3E92:  BZ    3EC2
....................       {write_int16_eeprom(40,ref_L2);} 
3E94:  MOVFF  425,47C
3E98:  MOVFF  424,47B
3E9C:  MOVFF  423,47A
3EA0:  MOVFF  422,479
3EA4:  CALL   1BE6
3EA8:  MOVFF  02,470
3EAC:  MOVFF  01,46F
3EB0:  MOVLW  28
3EB2:  MOVLB  4
3EB4:  MOVWF  x71
3EB6:  MOVFF  02,473
3EBA:  MOVFF  01,472
3EBE:  MOVLB  0
3EC0:  RCALL  3A76
....................        
....................       leituraEeprom=read_int16_eeprom(50); 
3EC2:  MOVLW  32
3EC4:  MOVLB  4
3EC6:  MOVWF  x6F
3EC8:  MOVLB  0
3ECA:  CALL   078C
3ECE:  MOVFF  02,46B
3ED2:  MOVFF  01,46A
....................       if(leituraEeprom!=offset_L3) 
3ED6:  MOVLB  4
3ED8:  MOVF   x33,W
3EDA:  SUBWF  x6A,W
3EDC:  BNZ   3EE4
3EDE:  MOVF   x34,W
3EE0:  SUBWF  x6B,W
3EE2:  BZ    3EF6
....................       {write_int16_eeprom(50,offset_L3);} 
3EE4:  MOVLW  32
3EE6:  MOVWF  x71
3EE8:  MOVFF  434,473
3EEC:  MOVFF  433,472
3EF0:  MOVLB  0
3EF2:  RCALL  3A76
3EF4:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(60); 
3EF6:  MOVLW  3C
3EF8:  MOVWF  x6F
3EFA:  MOVLB  0
3EFC:  CALL   078C
3F00:  MOVFF  02,46B
3F04:  MOVFF  01,46A
....................       if(leituraEeprom!=ref_L3) 
3F08:  MOVFF  46B,5A4
3F0C:  MOVFF  46A,5A3
3F10:  CALL   07E0
3F14:  MOVFF  03,5A6
3F18:  MOVFF  02,5A5
3F1C:  MOVFF  01,5A4
3F20:  MOVFF  00,5A3
3F24:  MOVFF  438,5AA
3F28:  MOVFF  437,5A9
3F2C:  MOVFF  436,5A8
3F30:  MOVFF  435,5A7
3F34:  CALL   0CE2
3F38:  BZ    3F68
....................       {write_int16_eeprom(60,ref_L3);} 
3F3A:  MOVFF  438,47C
3F3E:  MOVFF  437,47B
3F42:  MOVFF  436,47A
3F46:  MOVFF  435,479
3F4A:  CALL   1BE6
3F4E:  MOVFF  02,470
3F52:  MOVFF  01,46F
3F56:  MOVLW  3C
3F58:  MOVLB  4
3F5A:  MOVWF  x71
3F5C:  MOVFF  02,473
3F60:  MOVFF  01,472
3F64:  MOVLB  0
3F66:  RCALL  3A76
....................        
....................       leituraEeprom=read_eeprom(2); 
3F68:  MOVFF  FF2,46F
3F6C:  BCF    FF2.7
3F6E:  MOVLW  02
3F70:  MOVWF  FA9
3F72:  BCF    FA6.6
3F74:  BCF    FA6.7
3F76:  BSF    FA6.0
3F78:  MOVF   FA8,W
3F7A:  MOVLB  4
3F7C:  BTFSC  x6F.7
3F7E:  BSF    FF2.7
3F80:  CLRF   x6B
3F82:  MOVWF  x6A
....................       if(leituraEeprom!=def_eeprom) 
3F84:  MOVF   x6C,W
3F86:  SUBWF  x6A,W
3F88:  BNZ   3F8E
3F8A:  MOVF   x6B,F
3F8C:  BZ    3FBA
....................       {write_eeprom( 2,def_eeprom);} 
3F8E:  MOVLW  02
3F90:  MOVWF  FA9
3F92:  MOVFF  46C,FA8
3F96:  BCF    FA6.6
3F98:  BCF    FA6.7
3F9A:  BSF    FA6.2
3F9C:  MOVF   FF2,W
3F9E:  MOVWF  00
3FA0:  BCF    FF2.7
3FA2:  MOVLB  F
3FA4:  MOVLW  55
3FA6:  MOVWF  FA7
3FA8:  MOVLW  AA
3FAA:  MOVWF  FA7
3FAC:  BSF    FA6.1
3FAE:  BTFSC  FA6.1
3FB0:  BRA    3FAE
3FB2:  BCF    FA6.2
3FB4:  MOVF   00,W
3FB6:  IORWF  FF2,F
3FB8:  MOVLB  4
....................        
....................    }//loop principal 
3FBA:  BRA    3D12
.................... }//main 
....................  
....................  
....................  
....................  
3FBC:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C000   PROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
