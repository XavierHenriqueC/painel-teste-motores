CCS PCH C Compiler, Version 4.135, 38112               22-jul-20 16:12

               Filename: C:\Users\Henrique\Desktop\Projeto painel de teste\Firmware\PIC18F452\Versão 3.0\Painel_testes.lst

               ROM used: 15670 bytes (48%)
                         Largest free fragment is 17098
               RAM used: 1221 (79%) at main() level
                         1257 (82%) worst case
               Stack:    5 locations

*
0000:  GOTO   3702
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... //Painel de testes de motores AC com sensores de corrente e acionamento por SSR. Programado por: Henrique Xavier                                                                        // 
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F452.H> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay (clock=16000000) 
*
02D6:  MOVLW  04
02D8:  MOVWF  FEA
02DA:  MOVLW  C3
02DC:  MOVWF  FE9
02DE:  MOVF   FEF,W
02E0:  BZ    02FE
02E2:  MOVLW  05
02E4:  MOVWF  01
02E6:  CLRF   00
02E8:  DECFSZ 00,F
02EA:  BRA    02E8
02EC:  DECFSZ 01,F
02EE:  BRA    02E6
02F0:  MOVLW  2E
02F2:  MOVWF  00
02F4:  DECFSZ 00,F
02F6:  BRA    02F4
02F8:  BRA    02FA
02FA:  DECFSZ FEF,F
02FC:  BRA    02E2
02FE:  RETURN 0
.................... #fuses HS, NOWDT, PUT, NOBROWNOUT, NOLVP, PROTECT 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C2,rcv=PIN_C7,bits=8)// Pino RC2 é Tx e o Pino Rx é o Pino RC7 
....................  
.................... #define mode_4_bit       //GLCD Operando em 4 bits 
.................... #include <st7920.c>      //Biblioteca do GLCD 128x64 
....................  
.................... /*************************************************************************** 
.................... *                DRIVE PARA LCD GRAFICO 128X64 CHIP ST7920                 * 
.................... *   COMANDOS                                                               * 
.................... *   #define mode_8_bit user lcd mode 8 bit 
.................... *   #define mode_4_bit user lcd mode 4 bit 
.................... *   glcd_readByte()//LER DADOS DO LCD                                      * 
.................... *   glcd_check_busy()//VERIFICA SE LCD ESTA OCUPADO                        *                              * 
.................... *   glcd_instruction(instruções)//SETA INTRUÇÕES                           * 
.................... *   glcd_data(dados)//ENVIA DADOS PARA LCD                                 * 
.................... *   glcd_init_basic()//INICIA LCD  COMO MODO BASICO                        * 
.................... *   glcd_update()//ATUALIZA LCD                                            * 
.................... *   glcd_init_graph()//INICIA LCD MODO GRAFICO                             * 
.................... *   glcd_pixel( x,  y, color)//CONTROLE DE PIXEL                           * 
.................... *   glcd_fillScreen(on)//ENVIO NIVEL 1 PARA TODOS OS PIXEL DO LCD          * 
.................... *   glcd_fillScreen(off)//ENVIA NIVEL 0 PARA TODOS OS PIXEL DO LCD         * 
.................... *   glcd_plot_image(imagem,largura,altura,coluna,linha,cor) carrega imagem * 
.................... *                                                                          *                  
.................... *   PINAGEM DO LCD                                                         * 
.................... *   Pin 1 ------------> Gnd                                                *    
.................... *   Pin 2 ------------> +5volts                                            * 
.................... *   Pin 3 ------------> Contrast                                           * 
.................... *   Pin 4 ------------> Register Select                                    * 
.................... *   Pin 5 ------------> Read/Write                                         * 
.................... *   Pin 6 ------------> Enable                                             * 
.................... *   Pin 7-14 ---------> Data bits                                          * 
.................... *   Pin 15 -----------> PSB (parallel=high & serial=low)                   * 
.................... *   Pin 16 -----------> NoConnection                                       * 
.................... *   Pin 17 -----------> Reset                                              * 
.................... *   Pin 18 -----------> Vout                                               * 
.................... *   Pin 19 -----------> +5volts                                            * 
.................... *   Pin 20 -----------> Gnd                                                * 
.................... *                                                                          *  
.................... ***************************************************************************/ 
.................... //DEFINIÇÃO DE PINOS 
.................... //PIN DEFINITION 
.................... #define  RS        PIN_B2                    //COMMNAD/DATA SELECT 
.................... #define  RW        PIN_B3                    //READ/WRITE SELECT              
.................... #define  E         PIN_B4                    //ENABLE SIGNAL                  
.................... #define  RST       PIN_B5                    //RESET SIGNAL  
....................  
.................... #if defined(mode_8_bit)// define pin lcd 8 bit 
.................... #define  D0        PIN_D0 
.................... #define  D1        PIN_D1 
.................... #define  D2        PIN_D2 
.................... #define  D3        PIN_D3 
.................... #define  D4        PIN_D4 
.................... #define  D5        PIN_D5 
.................... #define  D6        PIN_D6 
.................... #define  D7        PIN_D7 
.................... #define mode       0x10 
.................... #endif 
....................  
.................... #if defined(mode_4_bit)// define pin lcd 4 bit 
.................... #define  D4        PIN_D4 
.................... #define  D5        PIN_D5 
.................... #define  D6        PIN_D6 
.................... #define  D7        PIN_D7 
.................... #define mode       0x00  
.................... #endif 
....................  
.................... #define  set_lcd_bit  0x20 | (mode) //mode 4 bit 
.................... #define  ext_instru   0x24 | (mode) //Select extended instruction set 
.................... #define  graphic_on   0x26 | (mode) // Graphic display ON.  
.................... #define  set_lcd_on   0x0C //display on cursor off and char blink off 
.................... #define  set_mode_lcd 0x06 //entry mode set 
.................... #define  clear_lcd    0x01 //display clear 
....................  
.................... #define  DADOS_IN  INPUT_D() 
.................... #define  BUSY_IN   PIN_D7 
.................... #define  ON   1 
.................... #define  OFF   0 
.................... //LCD GRAPHICO 128X64 
.................... #define  YVAL 64 // DEFINE 64 LINHAS 
.................... #define  XVAL 8 // DEFINE COLUNAS 8X16=128 COLUNAS 
....................  
.................... #define GLCD_WIDTH   128 //DEFINE 128 COLUNAS  
....................  
.................... typedef union 
.................... { 
....................   int16 word; 
....................   int8 nbyte[2]; 
.................... } Dots; 
....................  
.................... typedef struct 
.................... { 
....................   int1 refresh; 
....................   Dots pix[YVAL][XVAL];   // Max dimensions for display (x,y) = (128,32) 
....................   } GD_RAM;             //  (0,0) corresponds to upper lefthand corner. 
....................  
.................... GD_RAM gdram; 
....................  
....................  
.................... unsigned int8 glcd_readByte (unsigned int1 address)//LER BYTE DO LCD 
.................... { 
....................   unsigned int8 data;   // Stores the data read from the LCD 
....................   if(address==1) 
....................   { 
....................      output_high(rs); 
....................   } 
....................   if(address==0) 
....................   { 
....................      output_low(rs); 
....................   } 
....................   output_high(rw);//GLCD_RW = RW_READ;      // Set for reading 
....................   output_high(e);//GLCD_E = 1;      // Pulse the enable pin 
....................   delay_us(1); 
....................   data=DADOS_IN;      // Get the data from the display's output register 
....................   output_low(e);//GLCD_E = 0; 
....................   return (data); 
.................... } 
....................  
....................   
.................... void glcd_check_busy()//VERIFICA SE LCD ESTA OCUPADO 
.................... { 
0300:  MOVLB  4
0302:  BSF    xC9.0
....................    int1 busy=1; 
....................    output_low(rs);      // LOW RS and High RW will put the lcd to 
0304:  BCF    F93.2
0306:  BCF    F8A.2
....................    output_high(rw);      // read busy flag and address counter 
0308:  BCF    F93.3
030A:  BSF    F8A.3
....................    while(busy) 
....................    {         // will cycle until busy flag is 0 
030C:  BTFSS  xC9.0
030E:  BRA    0322
....................       output_high(e); 
0310:  BCF    F93.4
0312:  BSF    F8A.4
....................       if(!input(BUSY_IN)) 
0314:  BSF    F95.7
0316:  BTFSC  F83.7
0318:  BRA    031C
....................       { 
....................          busy=0; 
031A:  BCF    xC9.0
....................       } 
....................       output_low(e); 
031C:  BCF    F93.4
031E:  BCF    F8A.4
....................    } 
0320:  BRA    030C
.................... } 
0322:  MOVLB  0
0324:  RETURN 0
....................   
.................... void glcd_instruction(unsigned char x)//ENVIA INSTRUÇÕES PARA LCD 
.................... { 
....................   #if defined(mode_8_bit)// 8 bit mode 
....................    glcd_check_busy();      //must be satisfied before sending instruction 
....................    output_low(rs);      // LOW RS and LOW RW will put the lcd to 
....................    output_low(rw);      // Write instruction mode    
....................    Delay_us(5);  //Delay 
....................    output_bit(D7,bit_test(x,7)); //send data bit 7 pin D7 
....................    output_bit(D6,bit_test(x,6)); //send data bit 6 pin D6 
....................    output_bit(D5,bit_test(x,5)); //send data bit 5 pin D5 
....................    output_bit(D4,bit_test(x,4)); //send data bit 4 pin D4 
....................    output_bit(D3,bit_test(x,3)); //send data bit 3 pin D3  
....................    output_bit(D2,bit_test(x,2)); //send data bit 2 pin D2 
....................    output_bit(D1,bit_test(x,1)); //send data bit 1 pin D1 
....................    output_bit(D0,bit_test(x,0)); //send data bit 0 pin D0 
....................    Delay_us(10); 
....................    output_high(e);//anable 
....................    Delay_us(20); 
....................    output_low(e);// disable        
....................    #endif 
....................  #if defined(mode_4_bit) // 4 bit mode 
....................    glcd_check_busy();      //must be satisfied before sending instruction 
0326:  RCALL  0300
....................    output_low(rs);      // LOW RS and LOW RW will put the lcd to 
0328:  BCF    F93.2
032A:  BCF    F8A.2
....................    output_low(rw);      // Write instruction mode    
032C:  BCF    F93.3
032E:  BCF    F8A.3
....................    Delay_us(5);//Delay 
0330:  MOVLW  06
0332:  MOVWF  00
0334:  DECFSZ 00,F
0336:  BRA    0334
0338:  NOP   
....................    output_bit(D7,bit_test(x,7));  
033A:  MOVLB  4
033C:  BTFSC  xC6.7
033E:  BRA    0344
0340:  BCF    F8C.7
0342:  BRA    0346
0344:  BSF    F8C.7
0346:  BCF    F95.7
....................    output_bit(D6,bit_test(x,6)); 
0348:  BTFSC  xC6.6
034A:  BRA    0350
034C:  BCF    F8C.6
034E:  BRA    0352
0350:  BSF    F8C.6
0352:  BCF    F95.6
....................    output_bit(D5,bit_test(x,5)); 
0354:  BTFSC  xC6.5
0356:  BRA    035C
0358:  BCF    F8C.5
035A:  BRA    035E
035C:  BSF    F8C.5
035E:  BCF    F95.5
....................    output_bit(D4,bit_test(x,4)); 
0360:  BTFSC  xC6.4
0362:  BRA    0368
0364:  BCF    F8C.4
0366:  BRA    036A
0368:  BSF    F8C.4
036A:  BCF    F95.4
....................    Delay_us(5); 
036C:  MOVLW  06
036E:  MOVWF  00
0370:  DECFSZ 00,F
0372:  BRA    0370
0374:  NOP   
....................    output_high(e); //enable 
0376:  BCF    F93.4
0378:  BSF    F8A.4
....................    Delay_us(5); 
037A:  MOVLW  06
037C:  MOVWF  00
037E:  DECFSZ 00,F
0380:  BRA    037E
0382:  NOP   
....................    output_low(e); //disable 
0384:  BCF    F93.4
0386:  BCF    F8A.4
....................    Delay_us(5); 
0388:  MOVLW  06
038A:  MOVWF  00
038C:  DECFSZ 00,F
038E:  BRA    038C
0390:  NOP   
....................    output_bit(D7,bit_test(x,3));//send data low bit 3 pin D7  
0392:  BTFSC  xC6.3
0394:  BRA    039A
0396:  BCF    F8C.7
0398:  BRA    039C
039A:  BSF    F8C.7
039C:  BCF    F95.7
....................    output_bit(D6,bit_test(x,2));//send data low bit 2 pin D6 
039E:  BTFSC  xC6.2
03A0:  BRA    03A6
03A2:  BCF    F8C.6
03A4:  BRA    03A8
03A6:  BSF    F8C.6
03A8:  BCF    F95.6
....................    output_bit(D5,bit_test(x,1));//send data low bit 1 pin D5 
03AA:  BTFSC  xC6.1
03AC:  BRA    03B2
03AE:  BCF    F8C.5
03B0:  BRA    03B4
03B2:  BSF    F8C.5
03B4:  BCF    F95.5
....................    output_bit(D4,bit_test(x,0));//send data low bit 0 pin D4 
03B6:  BTFSC  xC6.0
03B8:  BRA    03BE
03BA:  BCF    F8C.4
03BC:  BRA    03C0
03BE:  BSF    F8C.4
03C0:  BCF    F95.4
....................    Delay_us(5); 
03C2:  MOVLW  06
03C4:  MOVWF  00
03C6:  DECFSZ 00,F
03C8:  BRA    03C6
03CA:  NOP   
....................    output_high(e); 
03CC:  BCF    F93.4
03CE:  BSF    F8A.4
....................    Delay_us(5); 
03D0:  MOVLW  06
03D2:  MOVWF  00
03D4:  DECFSZ 00,F
03D6:  BRA    03D4
03D8:  NOP   
....................    output_low(e); // disable  
03DA:  BCF    F93.4
03DC:  BCF    F8A.4
....................    #endif 
....................  
.................... } 
03DE:  MOVLB  0
03E0:  RETURN 0
.................... void glcd_data(unsigned char x)//ENVIA DADOS PARA LCD 
.................... { 
....................   #if defined(mode_8_bit) // 8 bit mode 
....................    glcd_check_busy(); 
....................    output_high(rs);      // HIGH RS and LOW RW will put the lcd to 
....................    output_low(rw);      // Write data register mode 
....................    Delay_us(5); 
....................    output_bit(D7,bit_test(x,7)); //send data bit 7 pin D7 
....................    output_bit(D6,bit_test(x,6)); //send data bit 6 pin D6 
....................    output_bit(D5,bit_test(x,5)); //send data bit 5 pin D5 
....................    output_bit(D4,bit_test(x,4)); //send data bit 4 pin D4 
....................    output_bit(D3,bit_test(x,3)); //send data bit 3 pin D3  
....................    output_bit(D2,bit_test(x,2)); //send data bit 2 pin D2 
....................    output_bit(D1,bit_test(x,1)); //send data bit 1 pin D1 
....................    output_bit(D0,bit_test(x,0)); //send data bit 0 pin D0 
....................    Delay_us(10); 
....................    output_high(e); 
....................    Delay_us(20); 
....................    output_low(e); // disable 
....................    #endif 
....................     
....................    #if defined(mode_4_bit) // 4 bit mode 
....................    glcd_check_busy();  
*
0484:  RCALL  0300
....................    output_high(rs);      // HIGH RS and LOW RW will put the lcd to 
0486:  BCF    F93.2
0488:  BSF    F8A.2
....................    output_low(rw);      // Write data register mode    
048A:  BCF    F93.3
048C:  BCF    F8A.3
....................    Delay_us(5); 
048E:  MOVLW  06
0490:  MOVWF  00
0492:  DECFSZ 00,F
0494:  BRA    0492
0496:  NOP   
....................    output_bit(D7,bit_test(x,7));//send data high bit 7 pin D7  
0498:  MOVLB  4
049A:  BTFSC  xC8.7
049C:  BRA    04A2
049E:  BCF    F8C.7
04A0:  BRA    04A4
04A2:  BSF    F8C.7
04A4:  BCF    F95.7
....................    output_bit(D6,bit_test(x,6));//send data high bit 6 pin D6 
04A6:  BTFSC  xC8.6
04A8:  BRA    04AE
04AA:  BCF    F8C.6
04AC:  BRA    04B0
04AE:  BSF    F8C.6
04B0:  BCF    F95.6
....................    output_bit(D5,bit_test(x,5));//send data high bit 5 pin D5 
04B2:  BTFSC  xC8.5
04B4:  BRA    04BA
04B6:  BCF    F8C.5
04B8:  BRA    04BC
04BA:  BSF    F8C.5
04BC:  BCF    F95.5
....................    output_bit(D4,bit_test(x,4));//send data high bit 4 pin D4 
04BE:  BTFSC  xC8.4
04C0:  BRA    04C6
04C2:  BCF    F8C.4
04C4:  BRA    04C8
04C6:  BSF    F8C.4
04C8:  BCF    F95.4
....................    Delay_us(5); 
04CA:  MOVLW  06
04CC:  MOVWF  00
04CE:  DECFSZ 00,F
04D0:  BRA    04CE
04D2:  NOP   
....................    output_high(e); 
04D4:  BCF    F93.4
04D6:  BSF    F8A.4
....................    Delay_us(5); 
04D8:  MOVLW  06
04DA:  MOVWF  00
04DC:  DECFSZ 00,F
04DE:  BRA    04DC
04E0:  NOP   
....................    output_low(e); // disable  
04E2:  BCF    F93.4
04E4:  BCF    F8A.4
....................    Delay_us(5); 
04E6:  MOVLW  06
04E8:  MOVWF  00
04EA:  DECFSZ 00,F
04EC:  BRA    04EA
04EE:  NOP   
....................    output_bit(D7,bit_test(x,3));//send data low bit 3 pin D7  
04F0:  BTFSC  xC8.3
04F2:  BRA    04F8
04F4:  BCF    F8C.7
04F6:  BRA    04FA
04F8:  BSF    F8C.7
04FA:  BCF    F95.7
....................    output_bit(D6,bit_test(x,2));//send data low bit 2 pin D6 
04FC:  BTFSC  xC8.2
04FE:  BRA    0504
0500:  BCF    F8C.6
0502:  BRA    0506
0504:  BSF    F8C.6
0506:  BCF    F95.6
....................    output_bit(D5,bit_test(x,1));//send data low bit 1 pin D5 
0508:  BTFSC  xC8.1
050A:  BRA    0510
050C:  BCF    F8C.5
050E:  BRA    0512
0510:  BSF    F8C.5
0512:  BCF    F95.5
....................    output_bit(D4,bit_test(x,0));//send data low bit 0 pin D4 
0514:  BTFSC  xC8.0
0516:  BRA    051C
0518:  BCF    F8C.4
051A:  BRA    051E
051C:  BSF    F8C.4
051E:  BCF    F95.4
....................    Delay_us(5); 
0520:  MOVLW  06
0522:  MOVWF  00
0524:  DECFSZ 00,F
0526:  BRA    0524
0528:  NOP   
....................    output_high(e); 
052A:  BCF    F93.4
052C:  BSF    F8A.4
....................    Delay_us(5); 
052E:  MOVLW  06
0530:  MOVWF  00
0532:  DECFSZ 00,F
0534:  BRA    0532
0536:  NOP   
....................    output_low(e); // disable  
0538:  BCF    F93.4
053A:  BCF    F8A.4
....................    #endif 
.................... } 
053C:  MOVLB  0
053E:  RETURN 0
....................   
.................... void glcd_fillScreen (unsigned int1 color)//GRAVA 1 OU 0 EM TODOS OS PIXEL 
.................... { 
....................   int8 v, h; 
....................   int16 d; 
....................   d = (color == ON ? 0xFFFF : 0x0000); 
*
0404:  MOVLB  4
0406:  DECFSZ xC3,W
0408:  BRA    0410
040A:  SETF   03
040C:  MOVLW  FF
040E:  BRA    0414
0410:  CLRF   03
0412:  MOVLW  00
0414:  MOVWF  xC6
0416:  MOVFF  03,4C7
....................  // d = (color == ON ? 0x0000 : 0xFFFF ); 
....................   for (v=0; v < YVAL; v++)//32 
041A:  CLRF   xC4
041C:  MOVF   xC4,W
041E:  SUBLW  3F
0420:  BNC   047E
....................   { 
....................     for (h=0; h < XVAL; h++)//16 
0422:  CLRF   xC5
0424:  MOVF   xC5,W
0426:  SUBLW  07
0428:  BNC   047A
....................     { 
....................       gdram.pix[v][h].word = d; 
042A:  CLRF   xE5
042C:  MOVFF  4C4,4E4
0430:  CLRF   xE7
0432:  MOVLW  10
0434:  MOVWF  xE6
0436:  MOVLB  0
0438:  RCALL  03E2
043A:  MOVFF  02,03
043E:  MOVF   01,W
0440:  ADDLW  01
0442:  MOVLB  4
0444:  MOVWF  xC8
0446:  MOVLW  00
0448:  ADDWFC 02,W
044A:  MOVWF  xC9
044C:  CLRF   03
044E:  MOVFF  4C5,02
0452:  BCF    FD8.0
0454:  RLCF   02,F
0456:  RLCF   03,F
0458:  MOVF   02,W
045A:  ADDWF  xC8,F
045C:  MOVF   03,W
045E:  ADDWFC xC9,F
0460:  MOVLW  04
0462:  ADDWF  xC8,W
0464:  MOVWF  FE9
0466:  MOVLW  00
0468:  ADDWFC xC9,W
046A:  MOVWF  FEA
046C:  MOVFF  4C7,FEC
0470:  MOVF   FED,F
0472:  MOVFF  4C6,FEF
....................     } 
0476:  INCF   xC5,F
0478:  BRA    0424
....................   } 
047A:  INCF   xC4,F
047C:  BRA    041C
....................   gdram.refresh = TRUE; 
047E:  BSF    04.0
.................... } 
0480:  MOVLB  0
0482:  RETURN 0
....................  
....................  
.................... void glcd_update ()//ATUALIZA LCD 
.................... { 
....................   int8 v, h; 
....................   if (gdram.refresh)//verifica se foi atualizado  
*
0540:  BTFSS  04.0
0542:  BRA    064A
....................   { 
....................     for (v=0; v <YVAL; v++) //64 linhas 
0544:  MOVLB  4
0546:  CLRF   xC3
0548:  MOVF   xC3,W
054A:  SUBLW  3F
054C:  BTFSS  FD8.0
054E:  BRA    0646
....................     { 
....................       if(v<32) 
0550:  MOVF   xC3,W
0552:  SUBLW  1F
0554:  BNC   0570
....................       { 
....................          glcd_instruction( 0x80 | v);   // Set Vertical Address. 
0556:  MOVF   xC3,W
0558:  IORLW  80
055A:  MOVWF  xC5
055C:  MOVWF  xC6
055E:  MOVLB  0
0560:  RCALL  0326
....................          glcd_instruction( 0x80);   // Set Horizontal Address.            
0562:  MOVLW  80
0564:  MOVLB  4
0566:  MOVWF  xC6
0568:  MOVLB  0
056A:  RCALL  0326
....................       } 
....................       else 
056C:  BRA    0588
056E:  MOVLB  4
....................       { 
....................          glcd_instruction( 0x80 | (v - 32));   // Set Vertical Address. 
0570:  MOVLW  20
0572:  SUBWF  xC3,W
0574:  IORLW  80
0576:  MOVWF  xC5
0578:  MOVWF  xC6
057A:  MOVLB  0
057C:  RCALL  0326
....................          glcd_instruction( 0x88);   // Set Horizontal Address.            
057E:  MOVLW  88
0580:  MOVLB  4
0582:  MOVWF  xC6
0584:  MOVLB  0
0586:  RCALL  0326
....................       } 
....................       for (h=0; h <XVAL; h++) //8x16=128 colunas 
0588:  MOVLB  4
058A:  CLRF   xC4
058C:  MOVF   xC4,W
058E:  SUBLW  07
0590:  BNC   0642
....................       { 
....................         glcd_data( gdram.pix[v][h].nbyte[1]);   // Write High Byte. 
0592:  CLRF   xE5
0594:  MOVFF  4C3,4E4
0598:  CLRF   xE7
059A:  MOVLW  10
059C:  MOVWF  xE6
059E:  MOVLB  0
05A0:  RCALL  03E2
05A2:  MOVFF  02,03
05A6:  MOVF   01,W
05A8:  ADDLW  01
05AA:  MOVLB  4
05AC:  MOVWF  xC5
05AE:  MOVLW  00
05B0:  ADDWFC 02,W
05B2:  MOVWF  xC6
05B4:  CLRF   03
05B6:  MOVFF  4C4,02
05BA:  BCF    FD8.0
05BC:  RLCF   02,F
05BE:  RLCF   03,F
05C0:  MOVF   02,W
05C2:  ADDWF  xC5,F
05C4:  MOVF   03,W
05C6:  ADDWFC xC6,F
05C8:  MOVLW  01
05CA:  ADDWF  xC5,W
05CC:  MOVWF  01
05CE:  MOVLW  00
05D0:  ADDWFC xC6,W
05D2:  MOVWF  03
05D4:  MOVF   01,W
05D6:  ADDLW  04
05D8:  MOVWF  FE9
05DA:  MOVLW  00
05DC:  ADDWFC 03,W
05DE:  MOVWF  FEA
05E0:  MOVFF  FEF,4C5
05E4:  MOVFF  4C5,4C8
05E8:  MOVLB  0
05EA:  RCALL  0484
....................         glcd_data( gdram.pix[v][h].nbyte[0]);   // Write Low Byte. 
05EC:  MOVLB  4
05EE:  CLRF   xE5
05F0:  MOVFF  4C3,4E4
05F4:  CLRF   xE7
05F6:  MOVLW  10
05F8:  MOVWF  xE6
05FA:  MOVLB  0
05FC:  RCALL  03E2
05FE:  MOVFF  02,03
0602:  MOVF   01,W
0604:  ADDLW  01
0606:  MOVLB  4
0608:  MOVWF  xC5
060A:  MOVLW  00
060C:  ADDWFC 02,W
060E:  MOVWF  xC6
0610:  CLRF   03
0612:  MOVFF  4C4,02
0616:  BCF    FD8.0
0618:  RLCF   02,F
061A:  RLCF   03,F
061C:  MOVF   02,W
061E:  ADDWF  xC5,F
0620:  MOVF   03,W
0622:  ADDWFC xC6,F
0624:  MOVLW  04
0626:  ADDWF  xC5,W
0628:  MOVWF  FE9
062A:  MOVLW  00
062C:  ADDWFC xC6,W
062E:  MOVWF  FEA
0630:  MOVFF  FEF,4C7
0634:  MOVFF  4C7,4C8
0638:  MOVLB  0
063A:  RCALL  0484
....................       } 
063C:  MOVLB  4
063E:  INCF   xC4,F
0640:  BRA    058C
....................     } 
0642:  INCF   xC3,F
0644:  BRA    0548
....................     gdram.refresh = FALSE; 
0646:  BCF    04.0
0648:  MOVLB  0
....................   } 
.................... } 
064A:  RETURN 0
....................  
....................  
....................  
.................... void glcd_init_graph()//INICIA EM MODO GRAPHICO 
.................... { 
....................    delay_ms(40); 
064C:  MOVLW  28
064E:  MOVLB  4
0650:  MOVWF  xC3
0652:  MOVLB  0
0654:  RCALL  02D6
....................    output_low(rst);  //reset LCD 
0656:  BCF    F93.5
0658:  BCF    F8A.5
....................    delay_us(1);                      
065A:  BRA    065C
065C:  BRA    065E
....................    output_high(rst);  //LCD normal operation 
065E:  BCF    F93.5
0660:  BSF    F8A.5
....................    glcd_instruction(set_lcd_bit);  //set 4 and 8  bit operation and basic instruction set 
0662:  MOVLW  20
0664:  MOVLB  4
0666:  MOVWF  xC6
0668:  MOVLB  0
066A:  RCALL  0326
....................    delay_us(144); 
066C:  MOVLW  BF
066E:  MOVWF  00
0670:  DECFSZ 00,F
0672:  BRA    0670
0674:  BRA    0676
....................    glcd_instruction(0x0C);  //display on cursor off and char blink off 
0676:  MOVLW  0C
0678:  MOVLB  4
067A:  MOVWF  xC6
067C:  MOVLB  0
067E:  RCALL  0326
....................    delay_us(100); 
0680:  MOVLW  85
0682:  MOVWF  00
0684:  DECFSZ 00,F
0686:  BRA    0684
....................    glcd_instruction(clear_lcd);  //display clear 
0688:  MOVLW  01
068A:  MOVLB  4
068C:  MOVWF  xC6
068E:  MOVLB  0
0690:  RCALL  0326
....................    delay_ms(10); 
0692:  MOVLW  0A
0694:  MOVLB  4
0696:  MOVWF  xC3
0698:  MOVLB  0
069A:  RCALL  02D6
....................    glcd_instruction(set_mode_lcd);  //entry mode set 
069C:  MOVLW  06
069E:  MOVLB  4
06A0:  MOVWF  xC6
06A2:  MOVLB  0
06A4:  RCALL  0326
....................    delay_us(72);                  
06A6:  MOVLW  5F
06A8:  MOVWF  00
06AA:  DECFSZ 00,F
06AC:  BRA    06AA
06AE:  BRA    06B0
....................    glcd_instruction(ext_instru);  // Select extended instruction set. 
06B0:  MOVLW  24
06B2:  MOVLB  4
06B4:  MOVWF  xC6
06B6:  MOVLB  0
06B8:  RCALL  0326
....................    delay_us (72);    
06BA:  MOVLW  5F
06BC:  MOVWF  00
06BE:  DECFSZ 00,F
06C0:  BRA    06BE
06C2:  BRA    06C4
....................    glcd_instruction(graphic_on);  // Graphic display ON. 
06C4:  MOVLW  26
06C6:  MOVLB  4
06C8:  MOVWF  xC6
06CA:  MOVLB  0
06CC:  RCALL  0326
....................    delay_us (72); 
06CE:  MOVLW  5F
06D0:  MOVWF  00
06D2:  DECFSZ 00,F
06D4:  BRA    06D2
06D6:  BRA    06D8
....................    glcd_fillScreen (OFF); // clear all pixel 
06D8:  MOVLB  4
06DA:  CLRF   xC3
06DC:  MOVLB  0
06DE:  RCALL  0404
....................    glcd_update (); // update display 
06E0:  RCALL  0540
....................  
.................... } 
06E2:  GOTO   3834 (RETURN)
....................  
.................... void glcd_init_basic()//INICIA EM MODO BASICO 
.................... { 
....................    delay_ms(40); 
....................    output_low(rst);         //reset LCD 
....................    delay_us(1);                      
....................    output_high(rst);        //LCD normal operation 
....................    glcd_instruction(set_lcd_bit);   //set 4 bit operation and basic instruction set 
....................    delay_us(144); 
....................    glcd_instruction(0x0C);   //display on cursor off and char blink off 
....................    delay_us(100); 
....................    glcd_instruction(clear_lcd);   //display clear 
....................    delay_ms(10); 
....................    glcd_instruction(set_mode_lcd);   //entry mode set 
....................    delay_us(72);                  
.................... } 
.................... //              0     0        0 
.................... void glcd_pixel(int8 x, int8 y, int1 color)//GRAVA NOVO VALOR DOS PIXEL 
.................... { 
....................   int8 v, h, b; 
....................   v = y; 
*
16BC:  MOVFF  4DF,4E1
....................   h = x/16; 
16C0:  MOVLB  4
16C2:  SWAPF  xDE,W
16C4:  MOVWF  xE2
16C6:  MOVLW  0F
16C8:  ANDWF  xE2,F
....................   b = 15 - (x%16); 
16CA:  MOVF   xDE,W
16CC:  ANDLW  0F
16CE:  XORLW  FF
16D0:  ADDLW  10
16D2:  MOVWF  xE3
....................   
....................   if (color == ON) 
16D4:  DECFSZ xE0,W
16D6:  BRA    1744
....................   { 
....................    bit_set (gdram.pix[v][h].word, b); 
16D8:  CLRF   xE5
16DA:  MOVFF  4E1,4E4
16DE:  CLRF   xE7
16E0:  MOVLW  10
16E2:  MOVWF  xE6
16E4:  MOVLB  0
16E6:  CALL   03E2
16EA:  MOVFF  02,03
16EE:  MOVF   01,W
16F0:  ADDLW  01
16F2:  MOVLB  4
16F4:  MOVWF  xE4
16F6:  MOVLW  00
16F8:  ADDWFC 02,W
16FA:  MOVWF  xE5
16FC:  CLRF   03
16FE:  MOVFF  4E2,02
1702:  BCF    FD8.0
1704:  RLCF   02,F
1706:  RLCF   03,F
1708:  MOVF   02,W
170A:  ADDWF  xE4,F
170C:  MOVF   03,W
170E:  ADDWFC xE5,F
1710:  MOVLW  04
1712:  ADDWF  xE4,W
1714:  MOVWF  01
1716:  MOVLW  00
1718:  ADDWFC xE5,W
171A:  MOVWF  03
171C:  MOVFF  01,FE9
1720:  MOVWF  FEA
1722:  CLRF   03
1724:  MOVLW  01
1726:  MOVWF  02
1728:  MOVF   xE3,W
172A:  MOVWF  00
172C:  BZ    1738
172E:  BCF    FD8.0
1730:  RLCF   02,F
1732:  RLCF   03,F
1734:  DECFSZ 00,F
1736:  BRA    172E
1738:  MOVF   02,W
173A:  IORWF  FEF,F
173C:  MOVF   03,W
173E:  IORWF  FEC,W
1740:  MOVWF  FEF
....................   } 
....................   
....................   else 
1742:  BRA    17B8
....................   { 
....................    bit_clear (gdram.pix[v][h].word, b); 
1744:  CLRF   xE5
1746:  MOVFF  4E1,4E4
174A:  CLRF   xE7
174C:  MOVLW  10
174E:  MOVWF  xE6
1750:  MOVLB  0
1752:  CALL   03E2
1756:  MOVFF  02,03
175A:  MOVF   01,W
175C:  ADDLW  01
175E:  MOVLB  4
1760:  MOVWF  xE4
1762:  MOVLW  00
1764:  ADDWFC 02,W
1766:  MOVWF  xE5
1768:  CLRF   03
176A:  MOVFF  4E2,02
176E:  BCF    FD8.0
1770:  RLCF   02,F
1772:  RLCF   03,F
1774:  MOVF   02,W
1776:  ADDWF  xE4,F
1778:  MOVF   03,W
177A:  ADDWFC xE5,F
177C:  MOVLW  04
177E:  ADDWF  xE4,W
1780:  MOVWF  01
1782:  MOVLW  00
1784:  ADDWFC xE5,W
1786:  MOVWF  03
1788:  MOVFF  01,FE9
178C:  MOVWF  FEA
178E:  CLRF   03
1790:  MOVLW  01
1792:  MOVWF  02
1794:  MOVF   xE3,W
1796:  MOVWF  00
1798:  BZ    17A4
179A:  BCF    FD8.0
179C:  RLCF   02,F
179E:  RLCF   03,F
17A0:  DECFSZ 00,F
17A2:  BRA    179A
17A4:  MOVF   02,W
17A6:  XORLW  FF
17A8:  MOVWF  00
17AA:  MOVLW  FF
17AC:  XORWF  03,F
17AE:  MOVF   00,W
17B0:  ANDWF  FEF,F
17B2:  MOVF   03,W
17B4:  ANDWF  FEC,W
17B6:  MOVWF  FEF
....................   } 
....................   gdram.refresh = TRUE; 
17B8:  BSF    04.0
.................... } 
17BA:  MOVLB  0
17BC:  RETURN 0
.................... //                        
.................... void glcd_plot_image(ROM char *img,int width,int height,int x,int y,int inverse)//CARREGA IMAGEM 
.................... { 
....................    unsigned int i=0, j=0, k=0; 
....................    unsigned int16 count=0; 
....................     
....................    //glcd_fillScreen(OFF);                        //Clears the screen (opt.) 
....................    for(j=0;j<height;j++)//linhas 
....................       {    
....................          for(;i<width;)//colunas 
....................          { 
....................            for(k=0;k<8;k++)//bite 
....................             { 
....................                if(inverse) 
....................                {//           0  ,0  , 
....................                  glcd_pixel(i+x,j+y,~bit_test(img[count],(k))); 
....................                } 
....................                else 
....................                { 
....................                   glcd_pixel(i+x,j+y,bit_test(img[count],(k))); 
....................                } 
....................                i++; 
....................             } 
....................             count++; 
....................          } 
....................       i=0; 
....................       } 
.................... }  
.................... /////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <graphics.c>    //Biblioteca grafica 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
*
1F9C:  MOVLW  01
1F9E:  MOVLB  4
1FA0:  MOVWF  xD7
1FA2:  MOVWF  xD8
1FA4:  CLRF   xDD
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
1FA6:  MOVF   xCE,W
1FA8:  SUBWF  xD0,W
1FAA:  MOVWF  xDE
1FAC:  MOVF   xDE,W
1FAE:  BTFSS  xDE.7
1FB0:  BRA    1FB8
1FB2:  MOVLW  00
1FB4:  BSF    FD8.0
1FB6:  SUBFWB xDE,W
1FB8:  CLRF   03
1FBA:  MOVWF  xD5
1FBC:  MOVFF  03,4D6
....................    dy = abs((signed int8)(y2 - y1)); 
1FC0:  MOVF   xCF,W
1FC2:  SUBWF  xD1,W
1FC4:  MOVWF  xDE
1FC6:  MOVF   xDE,W
1FC8:  BTFSS  xDE.7
1FCA:  BRA    1FD2
1FCC:  MOVLW  00
1FCE:  BSF    FD8.0
1FD0:  SUBFWB xDE,W
1FD2:  CLRF   03
1FD4:  MOVWF  xD3
1FD6:  MOVFF  03,4D4
....................    #endif 
....................  
....................    if(x1 > x2) 
1FDA:  MOVF   xCE,W
1FDC:  SUBWF  xD0,W
1FDE:  BC    1FE2
....................       addx = -1; 
1FE0:  SETF   xD7
....................    if(y1 > y2) 
1FE2:  MOVF   xCF,W
1FE4:  SUBWF  xD1,W
1FE6:  BC    1FEA
....................       addy = -1; 
1FE8:  SETF   xD8
....................  
....................    if(dx >= dy) 
1FEA:  MOVF   xD4,W
1FEC:  SUBWF  xD6,W
1FEE:  BNC   2068
1FF0:  BNZ   1FF8
1FF2:  MOVF   xD3,W
1FF4:  SUBWF  xD5,W
1FF6:  BNC   2068
....................    { 
....................       dy *= 2; 
1FF8:  BCF    FD8.0
1FFA:  RLCF   xD3,F
1FFC:  RLCF   xD4,F
....................       P = dy - dx; 
1FFE:  MOVF   xD5,W
2000:  SUBWF  xD3,W
2002:  MOVWF  00
2004:  MOVF   xD6,W
2006:  SUBWFB xD4,W
2008:  MOVFF  00,4D9
200C:  MOVWF  xDA
....................       diff = P - dx; 
200E:  MOVF   xD5,W
2010:  SUBWF  xD9,W
2012:  MOVWF  xDB
2014:  MOVF   xD6,W
2016:  SUBWFB xDA,W
2018:  MOVWF  xDC
....................  
....................       for(; i<=dx; ++i) 
201A:  MOVF   xD6,F
201C:  BNZ   2024
201E:  MOVF   xDD,W
2020:  SUBWF  xD5,W
2022:  BNC   2066
....................       { 
....................          glcd_pixel(x1, y1, color); 
2024:  MOVFF  4CE,4DE
2028:  MOVFF  4CF,4DF
202C:  MOVFF  4D2,4E0
2030:  MOVLB  0
2032:  CALL   16BC
....................  
....................          if(P < 0) 
2036:  MOVLB  4
2038:  BTFSC  xDA.7
203A:  BRA    203E
203C:  BRA    204E
....................          { 
....................             P  += dy; 
203E:  MOVF   xD3,W
2040:  ADDWF  xD9,F
2042:  MOVF   xD4,W
2044:  ADDWFC xDA,F
....................             x1 += addx; 
2046:  MOVF   xD7,W
2048:  ADDWF  xCE,W
204A:  MOVWF  xCE
....................          } 
....................          else 
204C:  BRA    2062
....................          { 
....................             P  += diff; 
204E:  MOVF   xDB,W
2050:  ADDWF  xD9,F
2052:  MOVF   xDC,W
2054:  ADDWFC xDA,F
....................             x1 += addx; 
2056:  MOVF   xD7,W
2058:  ADDWF  xCE,W
205A:  MOVWF  xCE
....................             y1 += addy; 
205C:  MOVF   xD8,W
205E:  ADDWF  xCF,W
2060:  MOVWF  xCF
....................          } 
....................       } 
2062:  INCF   xDD,F
2064:  BRA    201A
....................    } 
....................    else 
2066:  BRA    20D6
....................    { 
....................       dx *= 2; 
2068:  BCF    FD8.0
206A:  RLCF   xD5,F
206C:  RLCF   xD6,F
....................       P = dx - dy; 
206E:  MOVF   xD3,W
2070:  SUBWF  xD5,W
2072:  MOVWF  00
2074:  MOVF   xD4,W
2076:  SUBWFB xD6,W
2078:  MOVFF  00,4D9
207C:  MOVWF  xDA
....................       diff = P - dy; 
207E:  MOVF   xD3,W
2080:  SUBWF  xD9,W
2082:  MOVWF  xDB
2084:  MOVF   xD4,W
2086:  SUBWFB xDA,W
2088:  MOVWF  xDC
....................  
....................       for(; i<=dy; ++i) 
208A:  MOVF   xD4,F
208C:  BNZ   2094
208E:  MOVF   xDD,W
2090:  SUBWF  xD3,W
2092:  BNC   20D6
....................       { 
....................          glcd_pixel(x1, y1, color); 
2094:  MOVFF  4CE,4DE
2098:  MOVFF  4CF,4DF
209C:  MOVFF  4D2,4E0
20A0:  MOVLB  0
20A2:  CALL   16BC
....................  
....................          if(P < 0) 
20A6:  MOVLB  4
20A8:  BTFSC  xDA.7
20AA:  BRA    20AE
20AC:  BRA    20BE
....................          { 
....................             P  += dx; 
20AE:  MOVF   xD5,W
20B0:  ADDWF  xD9,F
20B2:  MOVF   xD6,W
20B4:  ADDWFC xDA,F
....................             y1 += addy; 
20B6:  MOVF   xD8,W
20B8:  ADDWF  xCF,W
20BA:  MOVWF  xCF
....................          } 
....................          else 
20BC:  BRA    20D2
....................          { 
....................             P  += diff; 
20BE:  MOVF   xDB,W
20C0:  ADDWF  xD9,F
20C2:  MOVF   xDC,W
20C4:  ADDWFC xDA,F
....................             x1 += addx; 
20C6:  MOVF   xD7,W
20C8:  ADDWF  xCE,W
20CA:  MOVWF  xCE
....................             y1 += addy; 
20CC:  MOVF   xD8,W
20CE:  ADDWF  xCF,W
20D0:  MOVWF  xCF
....................          } 
....................       } 
20D2:  INCF   xDD,F
20D4:  BRA    208A
....................    } 
.................... } 
20D6:  MOVLB  0
20D8:  RETURN 0
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
20DA:  MOVLB  4
20DC:  MOVF   xC7,F
20DE:  BZ    213E
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
20E0:  MOVF   xC5,W
20E2:  SUBWF  xC3,W
20E4:  BC    20F0
....................       { 
....................          xmin = x1; 
20E6:  MOVFF  4C3,4CA
....................          xmax = x2; 
20EA:  MOVFF  4C5,4CB
....................       } 
....................       else 
20EE:  BRA    20F8
....................       { 
....................          xmin = x2; 
20F0:  MOVFF  4C5,4CA
....................          xmax = x1; 
20F4:  MOVFF  4C3,4CB
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
20F8:  MOVF   xC6,W
20FA:  SUBWF  xC4,W
20FC:  BC    2108
....................       { 
....................          ymin = y1; 
20FE:  MOVFF  4C4,4CC
....................          ymax = y2; 
2102:  MOVFF  4C6,4CD
....................       } 
....................       else 
2106:  BRA    2110
....................       { 
....................          ymin = y2; 
2108:  MOVFF  4C6,4CC
....................          ymax = y1; 
210C:  MOVFF  4C4,4CD
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
2110:  MOVF   xCA,W
2112:  SUBWF  xCB,W
2114:  BNC   213C
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
2116:  MOVFF  4CC,4C9
211A:  MOVF   xC9,W
211C:  SUBWF  xCD,W
211E:  BNC   2138
....................          { 
....................             glcd_pixel(xmin, i, color); 
2120:  MOVFF  4CA,4DE
2124:  MOVFF  4C9,4DF
2128:  MOVFF  4C8,4E0
212C:  MOVLB  0
212E:  CALL   16BC
....................          } 
2132:  MOVLB  4
2134:  INCF   xC9,F
2136:  BRA    211A
....................       } 
2138:  INCF   xCA,F
213A:  BRA    2110
....................    } 
....................    else 
213C:  BRA    219A
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
213E:  MOVFF  4C3,4CE
2142:  MOVFF  4C4,4CF
2146:  MOVFF  4C5,4D0
214A:  MOVFF  4C4,4D1
214E:  MOVFF  4C8,4D2
2152:  MOVLB  0
2154:  RCALL  1F9C
....................       glcd_line(x1, y2, x2, y2, color); 
2156:  MOVFF  4C3,4CE
215A:  MOVFF  4C6,4CF
215E:  MOVFF  4C5,4D0
2162:  MOVFF  4C6,4D1
2166:  MOVFF  4C8,4D2
216A:  RCALL  1F9C
....................       glcd_line(x1, y1, x1, y2, color); 
216C:  MOVFF  4C3,4CE
2170:  MOVFF  4C4,4CF
2174:  MOVFF  4C3,4D0
2178:  MOVFF  4C6,4D1
217C:  MOVFF  4C8,4D2
2180:  RCALL  1F9C
....................       glcd_line(x2, y1, x2, y2, color); 
2182:  MOVFF  4C5,4CE
2186:  MOVFF  4C4,4CF
218A:  MOVFF  4C5,4D0
218E:  MOVFF  4C6,4D1
2192:  MOVFF  4C8,4D2
2196:  RCALL  1F9C
2198:  MOVLB  4
....................    } 
.................... } 
219A:  MOVLB  0
219C:  RETURN 0
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
17BE:  MOVFF  4C6,03
17C2:  MOVLB  4
17C4:  MOVFF  4C5,FE9
17C8:  MOVFF  4C6,FEA
17CC:  MOVF   FEF,F
17CE:  BTFSC  FD8.2
17D0:  BRA    1962
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
17D2:  MOVFF  4C6,03
17D6:  MOVFF  4C5,FE9
17DA:  MOVFF  4C6,FEA
17DE:  MOVF   FEF,W
17E0:  SUBLW  52
17E2:  BNC   1828
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
17E4:  MOVFF  4C6,03
17E8:  MOVFF  4C5,FE9
17EC:  MOVFF  4C6,FEA
17F0:  MOVLW  20
17F2:  SUBWF  FEF,W
17F4:  MULLW  05
17F6:  MOVF   FF3,W
17F8:  CLRF   03
17FA:  MOVWF  xD2
17FC:  MOVLW  04
17FE:  MOVWF  FEA
1800:  MOVLW  CD
1802:  MOVWF  FE9
1804:  CLRF   xD6
1806:  MOVFF  4D2,4D5
180A:  MOVLW  05
180C:  MOVWF  01
180E:  CLRF   FF7
1810:  MOVF   xD2,W
1812:  MOVLB  0
1814:  CALL   0004
1818:  TBLRD*-
181A:  TBLRD*+
181C:  MOVFF  FF5,FEE
1820:  DECFSZ 01,F
1822:  BRA    181A
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
1824:  BRA    188A
1826:  MOVLB  4
1828:  MOVFF  4C6,03
182C:  MOVFF  4C5,FE9
1830:  MOVFF  4C6,FEA
1834:  MOVF   FEF,W
1836:  SUBLW  7E
1838:  BNC   187E
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
183A:  MOVFF  4C6,03
183E:  MOVFF  4C5,FE9
1842:  MOVFF  4C6,FEA
1846:  MOVLW  53
1848:  SUBWF  FEF,W
184A:  MULLW  05
184C:  MOVF   FF3,W
184E:  CLRF   03
1850:  MOVWF  xD2
1852:  MOVLW  04
1854:  MOVWF  FEA
1856:  MOVLW  CD
1858:  MOVWF  FE9
185A:  CLRF   xD6
185C:  MOVFF  4D2,4D5
1860:  MOVLW  05
1862:  MOVWF  01
1864:  CLRF   FF7
1866:  MOVF   xD2,W
1868:  MOVLB  0
186A:  CALL   0114
186E:  TBLRD*-
1870:  TBLRD*+
1872:  MOVFF  FF5,FEE
1876:  DECFSZ 01,F
1878:  BRA    1870
....................       else 
187A:  BRA    188A
187C:  MOVLB  4
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
187E:  CLRF   xCD
1880:  CLRF   xCE
1882:  CLRF   xCF
1884:  CLRF   xD0
1886:  CLRF   xD1
1888:  MOVLB  0
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
188A:  MOVFF  4C6,03
188E:  MOVLB  4
1890:  MOVF   xC5,W
1892:  MOVWF  FE9
1894:  MOVFF  03,FEA
1898:  MOVF   FEF,W
189A:  XORLW  0A
189C:  MOVLB  0
189E:  BZ    18A6
18A0:  XORLW  07
18A2:  BZ    18B6
18A4:  BRA    18BC
....................          case '\n': 
....................             y += 7*size + 1; 
18A6:  MOVLB  4
18A8:  MOVF   xC7,W
18AA:  MULLW  07
18AC:  MOVF   FF3,W
18AE:  ADDLW  01
18B0:  ADDWF  xC4,F
....................             continue; 
18B2:  BRA    1954
18B4:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
18B6:  MOVLB  4
18B8:  CLRF   xC3
....................             continue; 
18BA:  BRA    1954
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
18BC:  MOVLB  4
18BE:  MOVF   xC7,W
18C0:  MULLW  05
18C2:  MOVF   FF3,W
18C4:  ADDWF  xC3,W
18C6:  SUBLW  7F
18C8:  BC    18D6
....................       { 
....................          x = 0;                           // Set x at far left position 
18CA:  CLRF   xC3
....................          y += 7*size + 1;                 // Set y at next position down 
18CC:  MOVF   xC7,W
18CE:  MULLW  07
18D0:  MOVF   FF3,W
18D2:  ADDLW  01
18D4:  ADDWF  xC4,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
18D6:  CLRF   xC9
18D8:  MOVF   xC9,W
18DA:  SUBLW  04
18DC:  BNC   1954
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
18DE:  CLRF   xCA
18E0:  MOVF   xCA,W
18E2:  SUBLW  06
18E4:  BNC   194C
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
18E6:  CLRF   03
18E8:  MOVF   xC9,W
18EA:  ADDLW  CD
18EC:  MOVWF  FE9
18EE:  MOVLW  04
18F0:  ADDWFC 03,W
18F2:  MOVWF  FEA
18F4:  MOVFF  FEF,4D2
18F8:  MOVFF  4D2,00
18FC:  MOVF   xCA,W
18FE:  MOVWF  01
1900:  BZ    190A
1902:  BCF    FD8.0
1904:  RRCF   00,F
1906:  DECFSZ 01,F
1908:  BRA    1902
190A:  BTFSS  00.0
190C:  BRA    1948
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
190E:  CLRF   xCB
1910:  MOVF   xC7,W
1912:  SUBWF  xCB,W
1914:  BC    1948
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
1916:  CLRF   xCC
1918:  MOVF   xC7,W
191A:  SUBWF  xCC,W
191C:  BC    1944
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
191E:  MOVF   xCC,W
1920:  ADDWF  xC3,W
1922:  MOVWF  xD2
1924:  MOVF   xCA,W
1926:  MULWF  xC7
1928:  MOVF   FF3,W
192A:  ADDWF  xC4,W
192C:  ADDWF  xCB,W
192E:  MOVWF  xD3
1930:  MOVFF  4D2,4DE
1934:  MOVWF  xDF
1936:  MOVFF  4C8,4E0
193A:  MOVLB  0
193C:  RCALL  16BC
....................                   } 
193E:  MOVLB  4
1940:  INCF   xCC,F
1942:  BRA    1918
....................                } 
1944:  INCF   xCB,F
1946:  BRA    1910
....................             } 
....................          } 
1948:  INCF   xCA,F
194A:  BRA    18E0
....................       } 
194C:  INCF   xC9,F
194E:  MOVF   xC7,W
1950:  ADDWF  xC3,F
1952:  BRA    18D8
....................    } 
1954:  INCF   xC5,F
1956:  BTFSC  FD8.2
1958:  INCF   xC6,F
195A:  INCF   xC3,F
195C:  MOVLB  0
195E:  BRA    17BE
1960:  MOVLB  4
.................... } 
1962:  MOVLB  0
1964:  RETURN 0
....................  
.................... #endif 
....................  
.................... #include <internal_eeprom.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                          internal_eeprom.c                             //// 
.................... ////                                                                        //// 
.................... ////       Utilities to write various data types to internal eeprom         //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                        //// 
.................... ////   void write_int1_eeprom(address, int8 bitPosition, int1 data)         //// 
.................... ////     Call to write one bit of data                                      //// 
.................... ////                                                                        //// 
.................... ////   int1 read_int1_eeprom(address, int8 bitPosition)                     //// 
.................... ////     Call to read one bit of data                                       //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_int16_eeprom(address, int16 data)                         //// 
.................... ////     Call to write a 16 bit integer                                     //// 
.................... ////                                                                        //// 
.................... ////   void write_int16_eeprom(address, int16 data)                         //// 
.................... ////     Call to read a 16 bit integer                                      //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_int32_eeprom(address, int32 data)                         //// 
.................... ////     Call to write a 32 bit integer                                     //// 
.................... ////                                                                        //// 
.................... ////   int16 read_int32_eeprom(address)                                     //// 
.................... ////     Call to read a 32 bit integer                                      //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_float_eeprom(address, float data)                         //// 
.................... ////     Call to write a floating point number                              //// 
.................... ////                                                                        //// 
.................... ////   float read_float_eeprom(address)                                     //// 
.................... ////     Call to read a floating point number                               //// 
.................... ////                                                                        //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services               //// 
.................... //// This source code may only be used by licensed users of the CCS C       //// 
.................... //// compiler.  This source code may only be distributed to other licensed  //// 
.................... //// users of the CCS C compiler.  No other use, reproduction or            //// 
.................... //// distribution is permitted without written permission. Derivative       //// 
.................... //// programs created using this software in object code form are not       //// 
.................... //// restricted in any way.                                                 //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef INTERNAL_EEPROM_UTILITIES 
.................... #define INTERNAL_EEPROM_UTILITIES 
....................  
.................... // Used to adjust the address range 
.................... #ifndef INT_EEPROM_ADDRESS 
.................... #define INT_EEPROM_ADDRESS  int8 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //// Internal EEPROM Functions 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... // Purpose:    Write one bit to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The bit position (LSB == 0) 
.................... //             3) The bit to write 
.................... // Outputs:    None 
.................... void write_int1_eeprom(INT_EEPROM_ADDRESS address, int8 bitPosition, int1 data) 
.................... { 
....................    int8 stored_data; 
....................  
....................    stored_data = read_eeprom(address); 
....................  
....................    if(data) 
....................    { 
....................       bit_set(stored_data, bitPosition); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(stored_data, bitPosition); 
....................    } 
....................  
....................    write_eeprom(address, stored_data); 
.................... } 
....................  
....................  
.................... // Purpose:    Read one bit from internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The bit position (LSB == 0) 
.................... // Outputs:    The bit read from internal eeprom 
.................... int1 read_int1_eeprom(INT_EEPROM_ADDRESS address, int8 bitPosition) 
.................... { 
....................    return bit_test(read_eeprom(address), bitPosition); 
.................... } 
....................  
....................  
.................... // Purpose:    Write a 16 bit number to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The 16 bit number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_int16_eeprom(INT_EEPROM_ADDRESS address, int16 data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 2; ++i) 
*
369E:  MOVLB  4
36A0:  CLRF   xC8
36A2:  MOVF   xC8,W
36A4:  SUBLW  01
36A6:  BNC   36FE
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
36A8:  MOVF   xC8,W
36AA:  ADDWF  xC5,W
36AC:  MOVWF  xC9
36AE:  MOVLW  04
36B0:  MOVWF  xCB
36B2:  MOVLW  C6
36B4:  MOVWF  xCA
36B6:  MOVF   xC8,W
36B8:  ADDWF  xCA,W
36BA:  MOVWF  01
36BC:  MOVLW  00
36BE:  ADDWFC xCB,W
36C0:  MOVWF  03
36C2:  MOVF   01,W
36C4:  MOVWF  FE9
36C6:  MOVFF  03,FEA
36CA:  MOVFF  FEF,4CA
36CE:  MOVFF  4C9,FA9
36D2:  MOVFF  4CA,FA8
36D6:  BCF    FA6.6
36D8:  BCF    FA6.7
36DA:  BSF    FA6.2
36DC:  MOVF   FF2,W
36DE:  MOVWF  00
36E0:  BCF    FF2.7
36E2:  MOVLB  F
36E4:  MOVLW  55
36E6:  MOVWF  FA7
36E8:  MOVLW  AA
36EA:  MOVWF  FA7
36EC:  BSF    FA6.1
36EE:  BTFSC  FA6.1
36F0:  BRA    36EE
36F2:  BCF    FA6.2
36F4:  MOVF   00,W
36F6:  IORWF  FF2,F
....................    } 
36F8:  MOVLB  4
36FA:  INCF   xC8,F
36FC:  BRA    36A2
.................... } 
36FE:  MOVLB  0
3700:  RETURN 0
....................  
....................  
.................... // Purpose:    Read a 16 bit number from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The 16 bit number read from internal eeprom 
.................... int16 read_int16_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8  i; 
....................    int16 data; 
....................  
....................    for(i = 0; i < 2; ++i) 
*
06E6:  MOVLB  4
06E8:  CLRF   xC4
06EA:  MOVF   xC4,W
06EC:  SUBLW  01
06EE:  BNC   072E
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
06F0:  MOVLW  04
06F2:  MOVWF  xC8
06F4:  MOVLW  C5
06F6:  MOVWF  xC7
06F8:  MOVF   xC4,W
06FA:  ADDWF  xC7,W
06FC:  MOVWF  01
06FE:  MOVLW  00
0700:  ADDWFC xC8,W
0702:  MOVWF  03
0704:  MOVF   01,W
0706:  MOVWF  FE9
0708:  MOVFF  03,FEA
070C:  MOVF   xC4,W
070E:  ADDWF  xC3,W
0710:  MOVWF  xC9
0712:  MOVFF  FF2,4CA
0716:  BCF    FF2.7
0718:  MOVFF  4C9,FA9
071C:  BCF    FA6.6
071E:  BCF    FA6.7
0720:  BSF    FA6.0
0722:  MOVF   FA8,W
0724:  BTFSC  xCA.7
0726:  BSF    FF2.7
0728:  MOVWF  FEF
....................    } 
072A:  INCF   xC4,F
072C:  BRA    06EA
....................  
....................    return(data); 
072E:  MOVFF  4C5,01
0732:  MOVFF  4C6,02
.................... } 
0736:  MOVLB  0
0738:  RETURN 0
....................  
....................  
.................... // Purpose:    Write a 32 bit integer to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The 32 bit number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_int32_eeprom(INT_EEPROM_ADDRESS address, int32 data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
....................    } 
.................... } 
....................  
....................  
.................... // Purpose:    Read a 32 bit integer from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The 32 bit integer read from internal eeprom 
.................... int32 read_int32_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8  i; 
....................    int32 data; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
....................    } 
....................  
....................    return data; 
.................... } 
....................  
....................  
.................... // Purpose:    Write a floating point number to internal eeprom 
.................... // Inputs:     1) An eeprom address. Four eeprom locations will be used. 
.................... //             2) The floating point number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_float_eeprom(INT_EEPROM_ADDRESS address, float data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
....................    } 
.................... } 
....................  
....................  
.................... // Purpose:    Read a floating point number from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The floating point number read from the internal eeprom 
.................... float read_float_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8 i; 
....................    float data; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
....................    } 
....................  
....................    return data; 
.................... } 
....................  
.................... #endif 
....................  
.................... //...................................................................................................    
....................    
....................  //Variaveis Globais 
....................    int16 tempo_on=0;          //incremento para controle de tempo do estrela triangulo 
....................    int   start_on=0;          //estado do modo estrela triangulo 
....................    int   filtro=0;            // filtro de tecla C0 e C1 
....................    int  Mod_Start=0; 
....................    int16  tempo_on_pulse=0; 
....................    int16  tempo_off_pulse=0; 
....................    int16  tempo_on_pulse_set=3; 
....................    int16  tempo_off_pulse_set=3; 
....................    int   pulse_qnd=0; 
....................    int   pulse_qnd_set=5; 
....................       
....................    float L1=0;                //Valor da string L1     
....................    float Offset_L1=0;         //offset sensor 1 
....................    float ref_L1=0;            //Referencia sensor 1 
....................    float L1_eq=0; 
....................    float L1_real=0; 
....................    int rep1=0; 
....................     
....................    float L2=0;                //Valor da string L2                     
....................    float Offset_L2=0;         //offset sensor 2 
....................    float ref_L2=0;            //Referencia sensor 2 
....................    float L2_eq=0; 
....................    float L2_real=0; 
....................    int rep2=0; 
....................     
....................    float L3=0;                 //Valor da string L3                     
....................    float Offset_L3=0;         //offset sensor 3 
....................    float ref_L3=0;            //Referencia sensor 3  
....................    float L3_eq=0; 
....................    float L3_real=0; 
....................    int rep3=0; 
....................     
....................     
....................    float tensao_L1=0; 
....................    float Ajuste_L1; 
....................     
....................    float tensao_L2=0; 
....................    float Ajuste_L2; 
....................     
....................    float tensao_L3=0; 
....................    float Ajuste_L3; 
....................   
....................    int16 mediaAD_L1=0;         //valor do ADC 1 
....................    int16 mediaAD_L2=0;         //valor do ADC 2 
....................    int16 mediaAD_L3=0;         //valor do ADC 3 
....................    float tensao=0;             //Auxiliar para valores de tensão dos sensores 
....................    int16 valor=0;              //Auxiliar para valores dos Conversores AD 
....................    int16 valor_adc=0;              //Auxiliar para valores dos Conversores AD 
....................    int   rep=0;                //Auxiliar para repetiçoes (FOR) 
....................   
....................    int menu=0;                 //Telas de menu restrito 
....................    int menu_lib=0;             //Telas de menu liberado 
....................    int filtro_E0=0;            //Filtra a tecla de descida dos menus 
....................    int filtro_c3=0;            //Filtra a tecla de subida dos menus 
....................    int TempoET;                //Tempo do estrela triangulo 
....................    float TempoETreal;          //conversão do tempo de estrela triangulo para sugundos 
....................     
....................    int16 Pot_real=0;           // Valor da potencia real (Watts) 
....................    int   Pot_HP=0;             // Valor da potencia convertido em (HP) 
....................    int16 tensao_rede=220;      //tensão da rede 
....................    float corrente_media=0;     //valor da media das tres correntes (L1+L2+L3/3) 
....................  
....................    int16 leituraEeprom=0;      //Lê os valores salvos na eemprom para poder salvar se for mudado 
....................    int def_eeprom=0; 
....................     
....................    char string[50]; 
....................     
....................  void leitura_sensores() 
....................  {   
....................    //------   LEITURA DO SENSOR DE string L1  -------- 
....................     
....................    set_adc_channel(0); 
*
0CB6:  MOVLW  00
0CB8:  MOVWF  01
0CBA:  MOVF   FC2,W
0CBC:  ANDLW  C7
0CBE:  IORWF  01,W
0CC0:  MOVWF  FC2
....................    delay_us(20); 
0CC2:  MOVLW  1A
0CC4:  MOVWF  00
0CC6:  DECFSZ 00,F
0CC8:  BRA    0CC6
0CCA:  NOP   
....................    mediaAD_L1=0; valor=0; tensao=0; 
0CCC:  MOVLB  4
0CCE:  CLRF   x6C
0CD0:  CLRF   x6B
0CD2:  CLRF   x76
0CD4:  CLRF   x75
0CD6:  CLRF   x74
0CD8:  CLRF   x73
0CDA:  CLRF   x72
0CDC:  CLRF   x71
....................     
....................    for(rep=1; rep<=8; rep++) 
0CDE:  MOVLW  01
0CE0:  MOVWF  x79
0CE2:  MOVF   x79,W
0CE4:  SUBLW  08
0CE6:  BNC   0D26
....................    {  
....................      valor_adc = read_adc(); 
0CE8:  BSF    FC2.2
0CEA:  BTFSC  FC2.2
0CEC:  BRA    0CEA
0CEE:  MOVFF  FC3,477
0CF2:  MOVFF  FC4,478
....................      if(valor_adc > 500) 
0CF6:  MOVF   x78,W
0CF8:  SUBLW  00
0CFA:  BC    0D0E
0CFC:  XORLW  FF
0CFE:  BNZ   0D06
0D00:  MOVF   x77,W
0D02:  SUBLW  F4
0D04:  BC    0D0E
....................      { 
....................       valor = valor_adc; 
0D06:  MOVFF  478,476
0D0A:  MOVFF  477,475
....................      } 
....................      delay_ms(1); 
0D0E:  MOVLW  01
0D10:  MOVWF  xC3
0D12:  MOVLB  0
0D14:  CALL   02D6
....................      mediaAD_L1= mediaAD_L1 + valor; 
0D18:  MOVLB  4
0D1A:  MOVF   x75,W
0D1C:  ADDWF  x6B,F
0D1E:  MOVF   x76,W
0D20:  ADDWFC x6C,F
....................    } 
0D22:  INCF   x79,F
0D24:  BRA    0CE2
....................    mediaAD_L1= mediaAD_L1/8; 
0D26:  RRCF   x6C,F
0D28:  RRCF   x6B,F
0D2A:  RRCF   x6C,F
0D2C:  RRCF   x6B,F
0D2E:  RRCF   x6C,F
0D30:  RRCF   x6B,F
0D32:  MOVLW  1F
0D34:  ANDWF  x6C,F
....................    tensao=(float)mediaAD_L1*4.8828; 
0D36:  MOVFF  46C,4C4
0D3A:  MOVFF  46B,4C3
0D3E:  MOVLB  0
0D40:  RCALL  073A
0D42:  MOVFF  00,4C3
0D46:  MOVFF  01,4C4
0D4A:  MOVFF  02,4C5
0D4E:  MOVFF  03,4C6
0D52:  MOVFF  03,4D7
0D56:  MOVFF  02,4D6
0D5A:  MOVFF  01,4D5
0D5E:  MOVFF  00,4D4
0D62:  MOVLW  E6
0D64:  MOVLB  4
0D66:  MOVWF  xDB
0D68:  MOVLW  3F
0D6A:  MOVWF  xDA
0D6C:  MOVLW  1C
0D6E:  MOVWF  xD9
0D70:  MOVLW  81
0D72:  MOVWF  xD8
0D74:  MOVLB  0
0D76:  RCALL  0770
0D78:  MOVFF  03,474
0D7C:  MOVFF  02,473
0D80:  MOVFF  01,472
0D84:  MOVFF  00,471
....................    tensao_L1 = tensao; 
0D88:  MOVFF  474,456
0D8C:  MOVFF  473,455
0D90:  MOVFF  472,454
0D94:  MOVFF  471,453
....................    L1_real=(float)(((tensao - (2500 + Ajuste_L1))*100)/1650); 
0D98:  BCF    FD8.1
0D9A:  MOVLB  4
0D9C:  CLRF   xCA
0D9E:  MOVLW  40
0DA0:  MOVWF  xC9
0DA2:  MOVLW  1C
0DA4:  MOVWF  xC8
0DA6:  MOVLW  8A
0DA8:  MOVWF  xC7
0DAA:  MOVFF  45A,4CE
0DAE:  MOVFF  459,4CD
0DB2:  MOVFF  458,4CC
0DB6:  MOVFF  457,4CB
0DBA:  MOVLB  0
0DBC:  RCALL  0866
0DBE:  BSF    FD8.1
0DC0:  MOVFF  474,4CA
0DC4:  MOVFF  473,4C9
0DC8:  MOVFF  472,4C8
0DCC:  MOVFF  471,4C7
0DD0:  MOVFF  03,4CE
0DD4:  MOVFF  02,4CD
0DD8:  MOVFF  01,4CC
0DDC:  MOVFF  00,4CB
0DE0:  RCALL  0866
0DE2:  MOVFF  00,4C3
0DE6:  MOVFF  01,4C4
0DEA:  MOVFF  02,4C5
0DEE:  MOVFF  03,4C6
0DF2:  MOVFF  03,4D7
0DF6:  MOVFF  02,4D6
0DFA:  MOVFF  01,4D5
0DFE:  MOVFF  00,4D4
0E02:  MOVLB  4
0E04:  CLRF   xDB
0E06:  CLRF   xDA
0E08:  MOVLW  48
0E0A:  MOVWF  xD9
0E0C:  MOVLW  85
0E0E:  MOVWF  xD8
0E10:  MOVLB  0
0E12:  RCALL  0770
0E14:  MOVFF  00,4C3
0E18:  MOVFF  01,4C4
0E1C:  MOVFF  02,4C5
0E20:  MOVFF  03,4C6
0E24:  MOVFF  03,4CA
0E28:  MOVFF  02,4C9
0E2C:  MOVFF  01,4C8
0E30:  MOVFF  00,4C7
0E34:  MOVLB  4
0E36:  CLRF   xCE
0E38:  MOVLW  40
0E3A:  MOVWF  xCD
0E3C:  MOVLW  4E
0E3E:  MOVWF  xCC
0E40:  MOVLW  89
0E42:  MOVWF  xCB
0E44:  MOVLB  0
0E46:  RCALL  0ADE
0E48:  MOVFF  03,427
0E4C:  MOVFF  02,426
0E50:  MOVFF  01,425
0E54:  MOVFF  00,424
....................     
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep1++; 
0E58:  MOVLB  4
0E5A:  INCF   x28,F
....................    L1_eq=L1_eq+L1_real; 
0E5C:  BCF    FD8.1
0E5E:  MOVFF  423,4CA
0E62:  MOVFF  422,4C9
0E66:  MOVFF  421,4C8
0E6A:  MOVFF  420,4C7
0E6E:  MOVFF  427,4CE
0E72:  MOVFF  426,4CD
0E76:  MOVFF  425,4CC
0E7A:  MOVFF  424,4CB
0E7E:  MOVLB  0
0E80:  RCALL  0866
0E82:  MOVFF  03,423
0E86:  MOVFF  02,422
0E8A:  MOVFF  01,421
0E8E:  MOVFF  00,420
....................   
....................    if(rep1>=20) 
0E92:  MOVLB  4
0E94:  MOVF   x28,W
0E96:  SUBLW  13
0E98:  BC    0EE6
....................    { 
....................     L1_eq = L1_eq/20;  
0E9A:  MOVFF  423,4CA
0E9E:  MOVFF  422,4C9
0EA2:  MOVFF  421,4C8
0EA6:  MOVFF  420,4C7
0EAA:  CLRF   xCE
0EAC:  CLRF   xCD
0EAE:  MOVLW  20
0EB0:  MOVWF  xCC
0EB2:  MOVLW  83
0EB4:  MOVWF  xCB
0EB6:  MOVLB  0
0EB8:  RCALL  0ADE
0EBA:  MOVFF  03,423
0EBE:  MOVFF  02,422
0EC2:  MOVFF  01,421
0EC6:  MOVFF  00,420
....................     L1 = L1_eq; 
0ECA:  MOVFF  423,417
0ECE:  MOVFF  422,416
0ED2:  MOVFF  421,415
0ED6:  MOVFF  420,414
....................     rep1=0; 
0EDA:  MOVLB  4
0EDC:  CLRF   x28
....................     L1_eq=0; 
0EDE:  CLRF   x23
0EE0:  CLRF   x22
0EE2:  CLRF   x21
0EE4:  CLRF   x20
....................    } 
....................    if (L1<0) 
0EE6:  MOVFF  417,4C6
0EEA:  MOVFF  416,4C5
0EEE:  MOVFF  415,4C4
0EF2:  MOVFF  414,4C3
0EF6:  CLRF   xCA
0EF8:  CLRF   xC9
0EFA:  CLRF   xC8
0EFC:  CLRF   xC7
0EFE:  MOVLB  0
0F00:  RCALL  0C3C
0F02:  BNC   0F10
....................    { 
....................      L1=0; 
0F04:  MOVLB  4
0F06:  CLRF   x17
0F08:  CLRF   x16
0F0A:  CLRF   x15
0F0C:  CLRF   x14
0F0E:  MOVLB  0
....................    } 
....................        
....................       
....................    //------LEITURA DO SENSOR DE string L2  ------- 
....................       
....................    set_adc_channel(1); 
0F10:  MOVLW  08
0F12:  MOVWF  01
0F14:  MOVF   FC2,W
0F16:  ANDLW  C7
0F18:  IORWF  01,W
0F1A:  MOVWF  FC2
....................    delay_us(20); 
0F1C:  MOVLW  1A
0F1E:  MOVWF  00
0F20:  DECFSZ 00,F
0F22:  BRA    0F20
0F24:  NOP   
....................    mediaAD_L2=0; valor=0; tensao=0; 
0F26:  MOVLB  4
0F28:  CLRF   x6E
0F2A:  CLRF   x6D
0F2C:  CLRF   x76
0F2E:  CLRF   x75
0F30:  CLRF   x74
0F32:  CLRF   x73
0F34:  CLRF   x72
0F36:  CLRF   x71
....................     
....................    for(rep=1; rep<=8; rep++) 
0F38:  MOVLW  01
0F3A:  MOVWF  x79
0F3C:  MOVF   x79,W
0F3E:  SUBLW  08
0F40:  BNC   0F80
....................    {  
....................      valor_adc = read_adc(); 
0F42:  BSF    FC2.2
0F44:  BTFSC  FC2.2
0F46:  BRA    0F44
0F48:  MOVFF  FC3,477
0F4C:  MOVFF  FC4,478
....................      if(valor_adc > 500) 
0F50:  MOVF   x78,W
0F52:  SUBLW  00
0F54:  BC    0F68
0F56:  XORLW  FF
0F58:  BNZ   0F60
0F5A:  MOVF   x77,W
0F5C:  SUBLW  F4
0F5E:  BC    0F68
....................      { 
....................       valor = valor_adc; 
0F60:  MOVFF  478,476
0F64:  MOVFF  477,475
....................      } 
....................      delay_ms(1); 
0F68:  MOVLW  01
0F6A:  MOVWF  xC3
0F6C:  MOVLB  0
0F6E:  CALL   02D6
....................      mediaAD_L2 = mediaAD_L2 + valor; 
0F72:  MOVLB  4
0F74:  MOVF   x75,W
0F76:  ADDWF  x6D,F
0F78:  MOVF   x76,W
0F7A:  ADDWFC x6E,F
....................    } 
0F7C:  INCF   x79,F
0F7E:  BRA    0F3C
....................    mediaAD_L2= mediaAD_L2/8; 
0F80:  RRCF   x6E,F
0F82:  RRCF   x6D,F
0F84:  RRCF   x6E,F
0F86:  RRCF   x6D,F
0F88:  RRCF   x6E,F
0F8A:  RRCF   x6D,F
0F8C:  MOVLW  1F
0F8E:  ANDWF  x6E,F
....................    tensao=(float)mediaAD_L2*4.8828; 
0F90:  MOVFF  46E,4C4
0F94:  MOVFF  46D,4C3
0F98:  MOVLB  0
0F9A:  CALL   073A
0F9E:  MOVFF  00,4C3
0FA2:  MOVFF  01,4C4
0FA6:  MOVFF  02,4C5
0FAA:  MOVFF  03,4C6
0FAE:  MOVFF  03,4D7
0FB2:  MOVFF  02,4D6
0FB6:  MOVFF  01,4D5
0FBA:  MOVFF  00,4D4
0FBE:  MOVLW  E6
0FC0:  MOVLB  4
0FC2:  MOVWF  xDB
0FC4:  MOVLW  3F
0FC6:  MOVWF  xDA
0FC8:  MOVLW  1C
0FCA:  MOVWF  xD9
0FCC:  MOVLW  81
0FCE:  MOVWF  xD8
0FD0:  MOVLB  0
0FD2:  CALL   0770
0FD6:  MOVFF  03,474
0FDA:  MOVFF  02,473
0FDE:  MOVFF  01,472
0FE2:  MOVFF  00,471
....................    tensao_L2 = tensao; 
0FE6:  MOVFF  474,45E
0FEA:  MOVFF  473,45D
0FEE:  MOVFF  472,45C
0FF2:  MOVFF  471,45B
....................    L2_real=(float)(((tensao - (2500 + Ajuste_L2))*100)/1650); 
0FF6:  BCF    FD8.1
0FF8:  MOVLB  4
0FFA:  CLRF   xCA
0FFC:  MOVLW  40
0FFE:  MOVWF  xC9
1000:  MOVLW  1C
1002:  MOVWF  xC8
1004:  MOVLW  8A
1006:  MOVWF  xC7
1008:  MOVFF  462,4CE
100C:  MOVFF  461,4CD
1010:  MOVFF  460,4CC
1014:  MOVFF  45F,4CB
1018:  MOVLB  0
101A:  RCALL  0866
101C:  BSF    FD8.1
101E:  MOVFF  474,4CA
1022:  MOVFF  473,4C9
1026:  MOVFF  472,4C8
102A:  MOVFF  471,4C7
102E:  MOVFF  03,4CE
1032:  MOVFF  02,4CD
1036:  MOVFF  01,4CC
103A:  MOVFF  00,4CB
103E:  RCALL  0866
1040:  MOVFF  00,4C3
1044:  MOVFF  01,4C4
1048:  MOVFF  02,4C5
104C:  MOVFF  03,4C6
1050:  MOVFF  03,4D7
1054:  MOVFF  02,4D6
1058:  MOVFF  01,4D5
105C:  MOVFF  00,4D4
1060:  MOVLB  4
1062:  CLRF   xDB
1064:  CLRF   xDA
1066:  MOVLW  48
1068:  MOVWF  xD9
106A:  MOVLW  85
106C:  MOVWF  xD8
106E:  MOVLB  0
1070:  CALL   0770
1074:  MOVFF  00,4C3
1078:  MOVFF  01,4C4
107C:  MOVFF  02,4C5
1080:  MOVFF  03,4C6
1084:  MOVFF  03,4CA
1088:  MOVFF  02,4C9
108C:  MOVFF  01,4C8
1090:  MOVFF  00,4C7
1094:  MOVLB  4
1096:  CLRF   xCE
1098:  MOVLW  40
109A:  MOVWF  xCD
109C:  MOVLW  4E
109E:  MOVWF  xCC
10A0:  MOVLW  89
10A2:  MOVWF  xCB
10A4:  MOVLB  0
10A6:  RCALL  0ADE
10A8:  MOVFF  03,43C
10AC:  MOVFF  02,43B
10B0:  MOVFF  01,43A
10B4:  MOVFF  00,439
....................     
....................       //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep2++; 
10B8:  MOVLB  4
10BA:  INCF   x3D,F
....................    L2_eq=L2_eq+L2_real; 
10BC:  BCF    FD8.1
10BE:  MOVFF  438,4CA
10C2:  MOVFF  437,4C9
10C6:  MOVFF  436,4C8
10CA:  MOVFF  435,4C7
10CE:  MOVFF  43C,4CE
10D2:  MOVFF  43B,4CD
10D6:  MOVFF  43A,4CC
10DA:  MOVFF  439,4CB
10DE:  MOVLB  0
10E0:  CALL   0866
10E4:  MOVFF  03,438
10E8:  MOVFF  02,437
10EC:  MOVFF  01,436
10F0:  MOVFF  00,435
....................   
....................    if(rep2>=20) 
10F4:  MOVLB  4
10F6:  MOVF   x3D,W
10F8:  SUBLW  13
10FA:  BC    1148
....................    { 
....................     L2_eq = L2_eq/20;  
10FC:  MOVFF  438,4CA
1100:  MOVFF  437,4C9
1104:  MOVFF  436,4C8
1108:  MOVFF  435,4C7
110C:  CLRF   xCE
110E:  CLRF   xCD
1110:  MOVLW  20
1112:  MOVWF  xCC
1114:  MOVLW  83
1116:  MOVWF  xCB
1118:  MOVLB  0
111A:  RCALL  0ADE
111C:  MOVFF  03,438
1120:  MOVFF  02,437
1124:  MOVFF  01,436
1128:  MOVFF  00,435
....................     L2 = L2_eq; 
112C:  MOVFF  438,42C
1130:  MOVFF  437,42B
1134:  MOVFF  436,42A
1138:  MOVFF  435,429
....................     rep2=0; 
113C:  MOVLB  4
113E:  CLRF   x3D
....................     L2_eq=0; 
1140:  CLRF   x38
1142:  CLRF   x37
1144:  CLRF   x36
1146:  CLRF   x35
....................    }       
....................    if (L2<0) 
1148:  MOVFF  42C,4C6
114C:  MOVFF  42B,4C5
1150:  MOVFF  42A,4C4
1154:  MOVFF  429,4C3
1158:  CLRF   xCA
115A:  CLRF   xC9
115C:  CLRF   xC8
115E:  CLRF   xC7
1160:  MOVLB  0
1162:  RCALL  0C3C
1164:  BNC   1172
....................    { 
....................      L2=0; 
1166:  MOVLB  4
1168:  CLRF   x2C
116A:  CLRF   x2B
116C:  CLRF   x2A
116E:  CLRF   x29
1170:  MOVLB  0
....................    } 
....................      
....................   //------LEITURA DO SENSOR DE string L3  -------- 
....................      
....................    set_adc_channel(2); 
1172:  MOVLW  10
1174:  MOVWF  01
1176:  MOVF   FC2,W
1178:  ANDLW  C7
117A:  IORWF  01,W
117C:  MOVWF  FC2
....................    delay_us(20); 
117E:  MOVLW  1A
1180:  MOVWF  00
1182:  DECFSZ 00,F
1184:  BRA    1182
1186:  NOP   
....................    mediaAD_L3=0; valor=0; tensao=0; 
1188:  MOVLB  4
118A:  CLRF   x70
118C:  CLRF   x6F
118E:  CLRF   x76
1190:  CLRF   x75
1192:  CLRF   x74
1194:  CLRF   x73
1196:  CLRF   x72
1198:  CLRF   x71
....................     
....................    for(rep=1; rep<=8; rep++) 
119A:  MOVLW  01
119C:  MOVWF  x79
119E:  MOVF   x79,W
11A0:  SUBLW  08
11A2:  BNC   11E2
....................    { 
....................      valor_adc = read_adc(); 
11A4:  BSF    FC2.2
11A6:  BTFSC  FC2.2
11A8:  BRA    11A6
11AA:  MOVFF  FC3,477
11AE:  MOVFF  FC4,478
....................      if(valor_adc > 500) 
11B2:  MOVF   x78,W
11B4:  SUBLW  00
11B6:  BC    11CA
11B8:  XORLW  FF
11BA:  BNZ   11C2
11BC:  MOVF   x77,W
11BE:  SUBLW  F4
11C0:  BC    11CA
....................      { 
....................       valor = valor_adc; 
11C2:  MOVFF  478,476
11C6:  MOVFF  477,475
....................      } 
....................      delay_ms(1); 
11CA:  MOVLW  01
11CC:  MOVWF  xC3
11CE:  MOVLB  0
11D0:  CALL   02D6
....................      mediaAD_L3= mediaAD_L3 + valor; 
11D4:  MOVLB  4
11D6:  MOVF   x75,W
11D8:  ADDWF  x6F,F
11DA:  MOVF   x76,W
11DC:  ADDWFC x70,F
....................    } 
11DE:  INCF   x79,F
11E0:  BRA    119E
....................    mediaAD_L3= mediaAD_L3/8; 
11E2:  RRCF   x70,F
11E4:  RRCF   x6F,F
11E6:  RRCF   x70,F
11E8:  RRCF   x6F,F
11EA:  RRCF   x70,F
11EC:  RRCF   x6F,F
11EE:  MOVLW  1F
11F0:  ANDWF  x70,F
....................    tensao=(float)mediaAD_L3*4.8828; 
11F2:  MOVFF  470,4C4
11F6:  MOVFF  46F,4C3
11FA:  MOVLB  0
11FC:  CALL   073A
1200:  MOVFF  00,4C3
1204:  MOVFF  01,4C4
1208:  MOVFF  02,4C5
120C:  MOVFF  03,4C6
1210:  MOVFF  03,4D7
1214:  MOVFF  02,4D6
1218:  MOVFF  01,4D5
121C:  MOVFF  00,4D4
1220:  MOVLW  E6
1222:  MOVLB  4
1224:  MOVWF  xDB
1226:  MOVLW  3F
1228:  MOVWF  xDA
122A:  MOVLW  1C
122C:  MOVWF  xD9
122E:  MOVLW  81
1230:  MOVWF  xD8
1232:  MOVLB  0
1234:  CALL   0770
1238:  MOVFF  03,474
123C:  MOVFF  02,473
1240:  MOVFF  01,472
1244:  MOVFF  00,471
....................    tensao_L3 = tensao; 
1248:  MOVFF  474,466
124C:  MOVFF  473,465
1250:  MOVFF  472,464
1254:  MOVFF  471,463
....................    L3_real=(float)(((tensao - (2500 + Ajuste_L3))*100)/1650); 
1258:  BCF    FD8.1
125A:  MOVLB  4
125C:  CLRF   xCA
125E:  MOVLW  40
1260:  MOVWF  xC9
1262:  MOVLW  1C
1264:  MOVWF  xC8
1266:  MOVLW  8A
1268:  MOVWF  xC7
126A:  MOVFF  46A,4CE
126E:  MOVFF  469,4CD
1272:  MOVFF  468,4CC
1276:  MOVFF  467,4CB
127A:  MOVLB  0
127C:  CALL   0866
1280:  BSF    FD8.1
1282:  MOVFF  474,4CA
1286:  MOVFF  473,4C9
128A:  MOVFF  472,4C8
128E:  MOVFF  471,4C7
1292:  MOVFF  03,4CE
1296:  MOVFF  02,4CD
129A:  MOVFF  01,4CC
129E:  MOVFF  00,4CB
12A2:  CALL   0866
12A6:  MOVFF  00,4C3
12AA:  MOVFF  01,4C4
12AE:  MOVFF  02,4C5
12B2:  MOVFF  03,4C6
12B6:  MOVFF  03,4D7
12BA:  MOVFF  02,4D6
12BE:  MOVFF  01,4D5
12C2:  MOVFF  00,4D4
12C6:  MOVLB  4
12C8:  CLRF   xDB
12CA:  CLRF   xDA
12CC:  MOVLW  48
12CE:  MOVWF  xD9
12D0:  MOVLW  85
12D2:  MOVWF  xD8
12D4:  MOVLB  0
12D6:  CALL   0770
12DA:  MOVFF  00,4C3
12DE:  MOVFF  01,4C4
12E2:  MOVFF  02,4C5
12E6:  MOVFF  03,4C6
12EA:  MOVFF  03,4CA
12EE:  MOVFF  02,4C9
12F2:  MOVFF  01,4C8
12F6:  MOVFF  00,4C7
12FA:  MOVLB  4
12FC:  CLRF   xCE
12FE:  MOVLW  40
1300:  MOVWF  xCD
1302:  MOVLW  4E
1304:  MOVWF  xCC
1306:  MOVLW  89
1308:  MOVWF  xCB
130A:  MOVLB  0
130C:  CALL   0ADE
1310:  MOVFF  03,451
1314:  MOVFF  02,450
1318:  MOVFF  01,44F
131C:  MOVFF  00,44E
....................       
....................    rep3++; 
1320:  MOVLB  4
1322:  INCF   x52,F
....................    L3_eq=L3_eq+L3_real; 
1324:  BCF    FD8.1
1326:  MOVFF  44D,4CA
132A:  MOVFF  44C,4C9
132E:  MOVFF  44B,4C8
1332:  MOVFF  44A,4C7
1336:  MOVFF  451,4CE
133A:  MOVFF  450,4CD
133E:  MOVFF  44F,4CC
1342:  MOVFF  44E,4CB
1346:  MOVLB  0
1348:  CALL   0866
134C:  MOVFF  03,44D
1350:  MOVFF  02,44C
1354:  MOVFF  01,44B
1358:  MOVFF  00,44A
....................   
....................    if(rep3>=20) 
135C:  MOVLB  4
135E:  MOVF   x52,W
1360:  SUBLW  13
1362:  BC    13B2
....................    { 
....................     L3_eq = L3_eq/20;  
1364:  MOVFF  44D,4CA
1368:  MOVFF  44C,4C9
136C:  MOVFF  44B,4C8
1370:  MOVFF  44A,4C7
1374:  CLRF   xCE
1376:  CLRF   xCD
1378:  MOVLW  20
137A:  MOVWF  xCC
137C:  MOVLW  83
137E:  MOVWF  xCB
1380:  MOVLB  0
1382:  CALL   0ADE
1386:  MOVFF  03,44D
138A:  MOVFF  02,44C
138E:  MOVFF  01,44B
1392:  MOVFF  00,44A
....................     L3 = L3_eq; 
1396:  MOVFF  44D,441
139A:  MOVFF  44C,440
139E:  MOVFF  44B,43F
13A2:  MOVFF  44A,43E
....................     rep3=0; 
13A6:  MOVLB  4
13A8:  CLRF   x52
....................     L3_eq=0; 
13AA:  CLRF   x4D
13AC:  CLRF   x4C
13AE:  CLRF   x4B
13B0:  CLRF   x4A
....................    } 
....................     
....................    if (L3<0) 
13B2:  MOVFF  441,4C6
13B6:  MOVFF  440,4C5
13BA:  MOVFF  43F,4C4
13BE:  MOVFF  43E,4C3
13C2:  CLRF   xCA
13C4:  CLRF   xC9
13C6:  CLRF   xC8
13C8:  CLRF   xC7
13CA:  MOVLB  0
13CC:  RCALL  0C3C
13CE:  BNC   13DA
....................    { 
....................       L3=0; 
13D0:  MOVLB  4
13D2:  CLRF   x41
13D4:  CLRF   x40
13D6:  CLRF   x3F
13D8:  CLRF   x3E
13DA:  MOVLB  0
....................    }  
....................     
....................  }//leitura sensores 
13DC:  GOTO   39C2 (RETURN)
....................     
....................  void controle_saidas() 
.................... { 
....................   
....................  if(Mod_Start==0&&menu_lib==0||menu>=1) 
*
32D2:  MOVLB  4
32D4:  MOVF   x09,F
32D6:  BNZ   32DC
32D8:  MOVF   x7B,F
32DA:  BZ    32E4
32DC:  MOVF   x7A,W
32DE:  SUBLW  00
32E0:  BTFSC  FD8.0
32E2:  BRA    34A8
....................  { 
....................   if(!input (pin_D0)) 
32E4:  BSF    F95.0
32E6:  BTFSC  F83.0
32E8:  BRA    32EC
....................   { 
....................     start_on=0; 
32EA:  CLRF   x07
....................   } 
....................   if(!input(pin_D1)&&input(pin_D0)&&filtro==0) 
32EC:  BSF    F95.1
32EE:  BTFSC  F83.1
32F0:  BRA    3302
32F2:  BSF    F95.0
32F4:  BTFSS  F83.0
32F6:  BRA    3302
32F8:  MOVF   x08,F
32FA:  BNZ   3302
....................   { 
....................     start_on=1; 
32FC:  MOVLW  01
32FE:  MOVWF  x07
....................     filtro++; 
3300:  INCF   x08,F
....................   } 
....................   if(start_on==1) 
3302:  DECFSZ x07,W
3304:  BRA    3318
....................   { 
....................     output_high(pin_C4); 
3306:  BCF    F94.4
3308:  BSF    F8B.4
....................     output_high(pin_D3); 
330A:  BCF    F95.3
330C:  BSF    F8C.3
....................     output_low(pin_D2); 
330E:  BCF    F95.2
3310:  BCF    F8C.2
....................     tempo_on++;                                     
3312:  INCF   x05,F
3314:  BTFSC  FD8.2
3316:  INCF   x06,F
....................   } 
....................   if(tempo_on==TempoET&&start_on==1)        
3318:  MOVF   x7E,W
331A:  SUBWF  x05,W
331C:  BNZ   333A
331E:  MOVF   x06,F
3320:  BNZ   333A
3322:  DECFSZ x07,W
3324:  BRA    333A
....................   {  
....................     output_high(pin_C4); 
3326:  BCF    F94.4
3328:  BSF    F8B.4
....................     output_low(pin_D3); 
332A:  BCF    F95.3
332C:  BCF    F8C.3
....................     output_high(pin_D2); 
332E:  BCF    F95.2
3330:  BSF    F8C.2
....................     start_on=2; 
3332:  MOVLW  02
3334:  MOVWF  x07
....................     tempo_on=0; 
3336:  CLRF   x06
3338:  CLRF   x05
....................   }  
....................   if(start_on==2) 
333A:  MOVF   x07,W
333C:  SUBLW  02
333E:  BNZ   334C
....................   { 
....................     output_high(pin_C4); 
3340:  BCF    F94.4
3342:  BSF    F8B.4
....................     output_low(pin_D3); 
3344:  BCF    F95.3
3346:  BCF    F8C.3
....................     output_high(pin_D2); 
3348:  BCF    F95.2
334A:  BSF    F8C.2
....................   } 
....................         
....................   if(start_on==0) 
334C:  MOVF   x07,F
334E:  BTFSS  FD8.2
3350:  BRA    34A8
....................   { 
....................     output_low(pin_C4); 
3352:  BCF    F94.4
3354:  BCF    F8B.4
....................     output_low(pin_D3); 
3356:  BCF    F95.3
3358:  BCF    F8C.3
....................     output_low(pin_D2); 
335A:  BCF    F95.2
335C:  BCF    F8C.2
....................     tempo_on=0;   
335E:  CLRF   x06
3360:  CLRF   x05
....................     filtro=0; 
3362:  CLRF   x08
....................     Ajuste_L1 = 2500 - tensao_L1; 
3364:  BSF    FD8.1
3366:  CLRF   xCA
3368:  MOVLW  40
336A:  MOVWF  xC9
336C:  MOVLW  1C
336E:  MOVWF  xC8
3370:  MOVLW  8A
3372:  MOVWF  xC7
3374:  MOVFF  456,4CE
3378:  MOVFF  455,4CD
337C:  MOVFF  454,4CC
3380:  MOVFF  453,4CB
3384:  MOVLB  0
3386:  CALL   0866
338A:  MOVFF  03,45A
338E:  MOVFF  02,459
3392:  MOVFF  01,458
3396:  MOVFF  00,457
....................     Ajuste_L2 = 2500 - tensao_L2; 
339A:  BSF    FD8.1
339C:  MOVLB  4
339E:  CLRF   xCA
33A0:  MOVLW  40
33A2:  MOVWF  xC9
33A4:  MOVLW  1C
33A6:  MOVWF  xC8
33A8:  MOVLW  8A
33AA:  MOVWF  xC7
33AC:  MOVFF  45E,4CE
33B0:  MOVFF  45D,4CD
33B4:  MOVFF  45C,4CC
33B8:  MOVFF  45B,4CB
33BC:  MOVLB  0
33BE:  CALL   0866
33C2:  MOVFF  03,462
33C6:  MOVFF  02,461
33CA:  MOVFF  01,460
33CE:  MOVFF  00,45F
....................     Ajuste_L3 = 2500 - tensao_L3; 
33D2:  BSF    FD8.1
33D4:  MOVLB  4
33D6:  CLRF   xCA
33D8:  MOVLW  40
33DA:  MOVWF  xC9
33DC:  MOVLW  1C
33DE:  MOVWF  xC8
33E0:  MOVLW  8A
33E2:  MOVWF  xC7
33E4:  MOVFF  466,4CE
33E8:  MOVFF  465,4CD
33EC:  MOVFF  464,4CC
33F0:  MOVFF  463,4CB
33F4:  MOVLB  0
33F6:  CALL   0866
33FA:  MOVFF  03,46A
33FE:  MOVFF  02,469
3402:  MOVFF  01,468
3406:  MOVFF  00,467
....................     tensao_L1 = tensao_L1*(-1); 
340A:  MOVFF  456,4D7
340E:  MOVFF  455,4D6
3412:  MOVFF  454,4D5
3416:  MOVFF  453,4D4
341A:  MOVLB  4
341C:  CLRF   xDB
341E:  CLRF   xDA
3420:  MOVLW  80
3422:  MOVWF  xD9
3424:  MOVLW  7F
3426:  MOVWF  xD8
3428:  MOVLB  0
342A:  CALL   0770
342E:  MOVFF  03,456
3432:  MOVFF  02,455
3436:  MOVFF  01,454
343A:  MOVFF  00,453
....................     tensao_L2 = tensao_L2*(-1); 
343E:  MOVFF  45E,4D7
3442:  MOVFF  45D,4D6
3446:  MOVFF  45C,4D5
344A:  MOVFF  45B,4D4
344E:  MOVLB  4
3450:  CLRF   xDB
3452:  CLRF   xDA
3454:  MOVLW  80
3456:  MOVWF  xD9
3458:  MOVLW  7F
345A:  MOVWF  xD8
345C:  MOVLB  0
345E:  CALL   0770
3462:  MOVFF  03,45E
3466:  MOVFF  02,45D
346A:  MOVFF  01,45C
346E:  MOVFF  00,45B
....................     tensao_L3 = tensao_L3*(-1); 
3472:  MOVFF  466,4D7
3476:  MOVFF  465,4D6
347A:  MOVFF  464,4D5
347E:  MOVFF  463,4D4
3482:  MOVLB  4
3484:  CLRF   xDB
3486:  CLRF   xDA
3488:  MOVLW  80
348A:  MOVWF  xD9
348C:  MOVLW  7F
348E:  MOVWF  xD8
3490:  MOVLB  0
3492:  CALL   0770
3496:  MOVFF  03,466
349A:  MOVFF  02,465
349E:  MOVFF  01,464
34A2:  MOVFF  00,463
34A6:  MOVLB  4
....................   } 
....................  } //if controletring 
....................   
....................   
....................   
....................   if(Mod_Start==1&&menu_lib==0) 
34A8:  DECFSZ x09,W
34AA:  BRA    3698
34AC:  MOVF   x7B,F
34AE:  BTFSS  FD8.2
34B0:  BRA    3698
....................  { 
....................   if(!input (pin_D0)) 
34B2:  BSF    F95.0
34B4:  BTFSC  F83.0
34B6:  BRA    34BA
....................   { 
....................     start_on=0; 
34B8:  CLRF   x07
....................   } 
....................   if(!input(pin_D1)&&input(pin_D0)&&filtro==0) 
34BA:  BSF    F95.1
34BC:  BTFSC  F83.1
34BE:  BRA    34D0
34C0:  BSF    F95.0
34C2:  BTFSS  F83.0
34C4:  BRA    34D0
34C6:  MOVF   x08,F
34C8:  BNZ   34D0
....................   { 
....................     start_on=1; 
34CA:  MOVLW  01
34CC:  MOVWF  x07
....................     filtro++; 
34CE:  INCF   x08,F
....................   } 
....................     if(pulse_qnd==pulse_qnd_set) 
34D0:  MOVF   x13,W
34D2:  SUBWF  x12,W
34D4:  BNZ   34DA
....................   { 
....................     output_high(pin_C4); 
34D6:  BCF    F94.4
34D8:  BSF    F8B.4
....................   } 
....................   if(start_on==1&&tempo_off_pulse==0&&pulse_qnd!=pulse_qnd_set) 
34DA:  DECFSZ x07,W
34DC:  BRA    34F6
34DE:  MOVF   x0C,F
34E0:  BNZ   34F6
34E2:  MOVF   x0D,F
34E4:  BNZ   34F6
34E6:  MOVF   x13,W
34E8:  SUBWF  x12,W
34EA:  BZ    34F6
....................   { 
....................     output_high(pin_C4); 
34EC:  BCF    F94.4
34EE:  BSF    F8B.4
....................     tempo_on_pulse++;  
34F0:  INCF   x0A,F
34F2:  BTFSC  FD8.2
34F4:  INCF   x0B,F
....................   } 
....................   if(tempo_on_pulse==tempo_on_pulse_set&&start_on==1&&pulse_qnd!=pulse_qnd_set)        
34F6:  MOVF   x0E,W
34F8:  SUBWF  x0A,W
34FA:  BNZ   3516
34FC:  MOVF   x0F,W
34FE:  SUBWF  x0B,W
3500:  BNZ   3516
3502:  DECFSZ x07,W
3504:  BRA    3516
3506:  MOVF   x13,W
3508:  SUBWF  x12,W
350A:  BZ    3516
....................   {  
....................     output_low(pin_C4); 
350C:  BCF    F94.4
350E:  BCF    F8B.4
....................     tempo_off_pulse++; 
3510:  INCF   x0C,F
3512:  BTFSC  FD8.2
3514:  INCF   x0D,F
....................   }  
....................    if(tempo_off_pulse==tempo_off_pulse_set&&start_on==1&&pulse_qnd!=pulse_qnd_set)        
3516:  MOVF   x10,W
3518:  SUBWF  x0C,W
351A:  BNZ   3536
351C:  MOVF   x11,W
351E:  SUBWF  x0D,W
3520:  BNZ   3536
3522:  DECFSZ x07,W
3524:  BRA    3536
3526:  MOVF   x13,W
3528:  SUBWF  x12,W
352A:  BZ    3536
....................   {  
....................     tempo_on_pulse=0; 
352C:  CLRF   x0B
352E:  CLRF   x0A
....................     tempo_off_pulse=0; 
3530:  CLRF   x0D
3532:  CLRF   x0C
....................     pulse_qnd++; 
3534:  INCF   x12,F
....................   }  
....................         
....................   if(start_on==0) 
3536:  MOVF   x07,F
3538:  BTFSS  FD8.2
353A:  BRA    3698
....................   { 
....................     output_low(pin_C4); 
353C:  BCF    F94.4
353E:  BCF    F8B.4
....................     output_low(pin_D3); 
3540:  BCF    F95.3
3542:  BCF    F8C.3
....................     output_low(pin_D2);   
3544:  BCF    F95.2
3546:  BCF    F8C.2
....................     filtro=0; 
3548:  CLRF   x08
....................     tempo_on_pulse=0; 
354A:  CLRF   x0B
354C:  CLRF   x0A
....................     tempo_off_pulse=0;  
354E:  CLRF   x0D
3550:  CLRF   x0C
....................     pulse_qnd=0; 
3552:  CLRF   x12
....................     Ajuste_L1 = 2500 - tensao_L1; 
3554:  BSF    FD8.1
3556:  CLRF   xCA
3558:  MOVLW  40
355A:  MOVWF  xC9
355C:  MOVLW  1C
355E:  MOVWF  xC8
3560:  MOVLW  8A
3562:  MOVWF  xC7
3564:  MOVFF  456,4CE
3568:  MOVFF  455,4CD
356C:  MOVFF  454,4CC
3570:  MOVFF  453,4CB
3574:  MOVLB  0
3576:  CALL   0866
357A:  MOVFF  03,45A
357E:  MOVFF  02,459
3582:  MOVFF  01,458
3586:  MOVFF  00,457
....................     Ajuste_L2 = 2500 - tensao_L2; 
358A:  BSF    FD8.1
358C:  MOVLB  4
358E:  CLRF   xCA
3590:  MOVLW  40
3592:  MOVWF  xC9
3594:  MOVLW  1C
3596:  MOVWF  xC8
3598:  MOVLW  8A
359A:  MOVWF  xC7
359C:  MOVFF  45E,4CE
35A0:  MOVFF  45D,4CD
35A4:  MOVFF  45C,4CC
35A8:  MOVFF  45B,4CB
35AC:  MOVLB  0
35AE:  CALL   0866
35B2:  MOVFF  03,462
35B6:  MOVFF  02,461
35BA:  MOVFF  01,460
35BE:  MOVFF  00,45F
....................     Ajuste_L3 = 2500 - tensao_L3; 
35C2:  BSF    FD8.1
35C4:  MOVLB  4
35C6:  CLRF   xCA
35C8:  MOVLW  40
35CA:  MOVWF  xC9
35CC:  MOVLW  1C
35CE:  MOVWF  xC8
35D0:  MOVLW  8A
35D2:  MOVWF  xC7
35D4:  MOVFF  466,4CE
35D8:  MOVFF  465,4CD
35DC:  MOVFF  464,4CC
35E0:  MOVFF  463,4CB
35E4:  MOVLB  0
35E6:  CALL   0866
35EA:  MOVFF  03,46A
35EE:  MOVFF  02,469
35F2:  MOVFF  01,468
35F6:  MOVFF  00,467
....................     tensao_L1 = tensao_L1*(-1); 
35FA:  MOVFF  456,4D7
35FE:  MOVFF  455,4D6
3602:  MOVFF  454,4D5
3606:  MOVFF  453,4D4
360A:  MOVLB  4
360C:  CLRF   xDB
360E:  CLRF   xDA
3610:  MOVLW  80
3612:  MOVWF  xD9
3614:  MOVLW  7F
3616:  MOVWF  xD8
3618:  MOVLB  0
361A:  CALL   0770
361E:  MOVFF  03,456
3622:  MOVFF  02,455
3626:  MOVFF  01,454
362A:  MOVFF  00,453
....................     tensao_L2 = tensao_L2*(-1); 
362E:  MOVFF  45E,4D7
3632:  MOVFF  45D,4D6
3636:  MOVFF  45C,4D5
363A:  MOVFF  45B,4D4
363E:  MOVLB  4
3640:  CLRF   xDB
3642:  CLRF   xDA
3644:  MOVLW  80
3646:  MOVWF  xD9
3648:  MOVLW  7F
364A:  MOVWF  xD8
364C:  MOVLB  0
364E:  CALL   0770
3652:  MOVFF  03,45E
3656:  MOVFF  02,45D
365A:  MOVFF  01,45C
365E:  MOVFF  00,45B
....................     tensao_L3 = tensao_L3*(-1); 
3662:  MOVFF  466,4D7
3666:  MOVFF  465,4D6
366A:  MOVFF  464,4D5
366E:  MOVFF  463,4D4
3672:  MOVLB  4
3674:  CLRF   xDB
3676:  CLRF   xDA
3678:  MOVLW  80
367A:  MOVWF  xD9
367C:  MOVLW  7F
367E:  MOVWF  xD8
3680:  MOVLB  0
3682:  CALL   0770
3686:  MOVFF  03,466
368A:  MOVFF  02,465
368E:  MOVFF  01,464
3692:  MOVFF  00,463
3696:  MOVLB  4
....................   } 
....................  } //if controletring 
....................   
.................... } //controle_saidas 
3698:  MOVLB  0
369A:  GOTO   39D4 (RETURN)
....................  
....................  void controle_menu() 
....................  { 
....................   glcd_fillScreen(OFF);//clear glcd 
*
1DD8:  MOVLB  4
1DDA:  CLRF   xC3
1DDC:  MOVLB  0
1DDE:  CALL   0404
....................   if(!input(pin_E0)&&menu>0&&menu<6&&filtro_E0==0) // Condição de menu depois de menu=1 
1DE2:  BSF    F96.0
1DE4:  BTFSC  F84.0
1DE6:  BRA    1E10
1DE8:  MOVLB  4
1DEA:  MOVF   x7A,F
1DEC:  BTFSS  FD8.2
1DEE:  BRA    1DF4
1DF0:  MOVLB  0
1DF2:  BRA    1E10
1DF4:  MOVF   x7A,W
1DF6:  SUBLW  05
1DF8:  BTFSC  FD8.0
1DFA:  BRA    1E00
1DFC:  MOVLB  0
1DFE:  BRA    1E10
1E00:  MOVF   x7C,F
1E02:  BTFSC  FD8.2
1E04:  BRA    1E0A
1E06:  MOVLB  0
1E08:  BRA    1E10
....................   { 
....................    menu++; 
1E0A:  INCF   x7A,F
....................    filtro_E0++; 
1E0C:  INCF   x7C,F
1E0E:  MOVLB  0
....................   } 
....................   if(!input(pin_E0)&&menu_lib<5&&filtro_E0==0&&menu==0) //  
1E10:  BSF    F96.0
1E12:  BTFSC  F84.0
1E14:  BRA    1E3E
1E16:  MOVLB  4
1E18:  MOVF   x7B,W
1E1A:  SUBLW  04
1E1C:  BTFSC  FD8.0
1E1E:  BRA    1E24
1E20:  MOVLB  0
1E22:  BRA    1E3E
1E24:  MOVF   x7C,F
1E26:  BTFSC  FD8.2
1E28:  BRA    1E2E
1E2A:  MOVLB  0
1E2C:  BRA    1E3E
1E2E:  MOVF   x7A,F
1E30:  BTFSC  FD8.2
1E32:  BRA    1E38
1E34:  MOVLB  0
1E36:  BRA    1E3E
....................   { 
....................    menu_lib++; 
1E38:  INCF   x7B,F
....................    filtro_E0++; 
1E3A:  INCF   x7C,F
1E3C:  MOVLB  0
....................   } 
....................    
....................   if(!input(pin_E0)&&menu_lib==1&&menu==0) // Condição de menu depois de menu=1 
1E3E:  BSF    F96.0
1E40:  BTFSC  F84.0
1E42:  BRA    1E5C
1E44:  MOVLB  4
1E46:  DECFSZ x7B,W
1E48:  BRA    1E4C
1E4A:  BRA    1E50
1E4C:  MOVLB  0
1E4E:  BRA    1E5C
1E50:  MOVF   x7A,F
1E52:  BTFSC  FD8.2
1E54:  BRA    1E5A
1E56:  MOVLB  0
1E58:  BRA    1E5C
....................   { 
....................    filtro_E0++; 
1E5A:  INCF   x7C,F
....................   } 
....................    
....................   if(filtro_E0>20) //Condição para entrar no primeiro menu de calibrações 
1E5C:  MOVLB  4
1E5E:  MOVF   x7C,W
1E60:  SUBLW  14
1E62:  BC    1E68
....................   { 
....................    menu=1; 
1E64:  MOVLW  01
1E66:  MOVWF  x7A
....................   } 
....................   
....................   if(input(pin_E0)) //Filtra tecla de descida  
1E68:  BSF    F96.0
1E6A:  BTFSS  F84.0
1E6C:  BRA    1E70
....................   { 
....................    filtro_E0=0; 
1E6E:  CLRF   x7C
....................   } 
....................    
....................   if(!input(pin_C3)&&menu>0&&filtro_c3==0) // Sobe Menu 
1E70:  BSF    F94.3
1E72:  BTFSC  F82.3
1E74:  BRA    1E84
1E76:  MOVF   x7A,F
1E78:  BZ    1E84
1E7A:  MOVF   x7D,F
1E7C:  BNZ   1E84
....................   { 
....................    menu--; 
1E7E:  DECF   x7A,F
....................    filtro_c3++; 
1E80:  INCF   x7D,F
....................    start_on=0; 
1E82:  CLRF   x07
....................   } 
....................    if(!input(pin_C3)&&menu_lib>0&&filtro_c3==0) // Sobe Menu 
1E84:  BSF    F94.3
1E86:  BTFSC  F82.3
1E88:  BRA    1E98
1E8A:  MOVF   x7B,F
1E8C:  BZ    1E98
1E8E:  MOVF   x7D,F
1E90:  BNZ   1E98
....................   { 
....................    menu_lib--; 
1E92:  DECF   x7B,F
....................    filtro_c3++; 
1E94:  INCF   x7D,F
....................    start_on=0; 
1E96:  CLRF   x07
....................   } 
....................    
....................   if(input(pin_C3)) // Filtra tecla de subida 
1E98:  BSF    F94.3
1E9A:  BTFSS  F82.3
1E9C:  BRA    1EA0
....................   { 
....................    filtro_c3=0; 
1E9E:  CLRF   x7D
....................   } 
....................      
.................... }//controle_menu 
1EA0:  MOVLB  0
1EA2:  GOTO   39CE (RETURN)
....................  
....................  void menus() 
.................... { 
....................   if (menu==0&&menu_lib==0) 
*
219E:  MOVLB  4
21A0:  MOVF   x7A,F
21A2:  BTFSS  FD8.2
21A4:  BRA    24D2
21A6:  MOVF   x7B,F
21A8:  BTFSS  FD8.2
21AA:  BRA    24D2
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd   
21AC:  CLRF   xC3
21AE:  MOVLB  0
21B0:  CALL   0404
....................     
....................    sprintf(string, "%.1f", (float)L1); // Converte adc em texto 
21B4:  MOVLW  04
21B6:  MOVLB  4
21B8:  MOVWF  xC2
21BA:  MOVLW  8F
21BC:  MOVWF  xC1
21BE:  MOVLW  89
21C0:  MOVWF  FE9
21C2:  MOVFF  417,4CA
21C6:  MOVFF  416,4C9
21CA:  MOVFF  415,4C8
21CE:  MOVFF  414,4C7
21D2:  MOVLW  01
21D4:  MOVWF  xCB
21D6:  MOVLB  0
21D8:  CALL   1514
....................  
....................    if(L1>=100) 
21DC:  MOVLB  4
21DE:  CLRF   xC6
21E0:  CLRF   xC5
21E2:  MOVLW  48
21E4:  MOVWF  xC4
21E6:  MOVLW  85
21E8:  MOVWF  xC3
21EA:  MOVFF  417,4CA
21EE:  MOVFF  416,4C9
21F2:  MOVFF  415,4C8
21F6:  MOVFF  414,4C7
21FA:  MOVLB  0
21FC:  CALL   0C3C
2200:  BC    2204
2202:  BNZ   220C
....................    { 
....................      string[6] = '\0'; 
2204:  MOVLB  4
2206:  CLRF   x95
....................      string[5] = 'A'; 
2208:  MOVLW  41
220A:  MOVWF  x94
....................    } 
....................    if(L1<100) 
220C:  MOVFF  417,4C6
2210:  MOVFF  416,4C5
2214:  MOVFF  415,4C4
2218:  MOVFF  414,4C3
221C:  MOVLB  4
221E:  CLRF   xCA
2220:  CLRF   xC9
2222:  MOVLW  48
2224:  MOVWF  xC8
2226:  MOVLW  85
2228:  MOVWF  xC7
222A:  MOVLB  0
222C:  CALL   0C3C
2230:  BNC   223A
....................    { 
....................      string[5] = '\0'; 
2232:  MOVLB  4
2234:  CLRF   x94
....................      string[4] = 'A'; 
2236:  MOVLW  41
2238:  MOVWF  x93
....................    } 
....................    if(L1<10) 
223A:  MOVFF  417,4C6
223E:  MOVFF  416,4C5
2242:  MOVFF  415,4C4
2246:  MOVFF  414,4C3
224A:  MOVLB  4
224C:  CLRF   xCA
224E:  CLRF   xC9
2250:  MOVLW  20
2252:  MOVWF  xC8
2254:  MOVLW  82
2256:  MOVWF  xC7
2258:  MOVLB  0
225A:  CALL   0C3C
225E:  BNC   2268
....................    { 
....................      string[4] = '\0'; 
2260:  MOVLB  4
2262:  CLRF   x93
....................      string[3] = 'A'; 
2264:  MOVLW  41
2266:  MOVWF  x92
....................    } 
....................     
....................    glcd_text57(18, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
2268:  MOVLW  12
226A:  MOVLB  4
226C:  MOVWF  xC3
226E:  MOVLW  01
2270:  MOVWF  xC4
2272:  MOVLW  04
2274:  MOVWF  xC6
2276:  MOVLW  8F
2278:  MOVWF  xC5
227A:  MOVLW  01
227C:  MOVWF  xC7
227E:  MOVWF  xC8
2280:  MOVLB  0
2282:  CALL   17BE
....................       
....................    sprintf(string, "L1:"); // Converte char em texto 
2286:  MOVLW  04
2288:  MOVLB  4
228A:  MOVWF  xC2
228C:  MOVLW  8F
228E:  MOVWF  xC1
2290:  MOVLW  00
2292:  MOVWF  FF6
2294:  MOVLW  02
2296:  MOVWF  FF7
2298:  MOVLB  0
229A:  CALL   1966
....................    string[3] = '\0'; 
229E:  MOVLB  4
22A0:  CLRF   x92
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
22A2:  MOVLW  01
22A4:  MOVWF  xC3
22A6:  MOVWF  xC4
22A8:  MOVLW  04
22AA:  MOVWF  xC6
22AC:  MOVLW  8F
22AE:  MOVWF  xC5
22B0:  MOVLW  01
22B2:  MOVWF  xC7
22B4:  MOVWF  xC8
22B6:  MOVLB  0
22B8:  CALL   17BE
....................     
....................    sprintf(string, "%.1f", (float)L2); // Converte adc em texto 
22BC:  MOVLW  04
22BE:  MOVLB  4
22C0:  MOVWF  xC2
22C2:  MOVLW  8F
22C4:  MOVWF  xC1
22C6:  MOVLW  89
22C8:  MOVWF  FE9
22CA:  MOVFF  42C,4CA
22CE:  MOVFF  42B,4C9
22D2:  MOVFF  42A,4C8
22D6:  MOVFF  429,4C7
22DA:  MOVLW  01
22DC:  MOVWF  xCB
22DE:  MOVLB  0
22E0:  CALL   1514
....................       
....................    if(L2>=100) 
22E4:  MOVLB  4
22E6:  CLRF   xC6
22E8:  CLRF   xC5
22EA:  MOVLW  48
22EC:  MOVWF  xC4
22EE:  MOVLW  85
22F0:  MOVWF  xC3
22F2:  MOVFF  42C,4CA
22F6:  MOVFF  42B,4C9
22FA:  MOVFF  42A,4C8
22FE:  MOVFF  429,4C7
2302:  MOVLB  0
2304:  CALL   0C3C
2308:  BC    230C
230A:  BNZ   2314
....................    { 
....................      string[6] = '\0'; 
230C:  MOVLB  4
230E:  CLRF   x95
....................      string[5] = 'A'; 
2310:  MOVLW  41
2312:  MOVWF  x94
....................    } 
....................    if(L2<100) 
2314:  MOVFF  42C,4C6
2318:  MOVFF  42B,4C5
231C:  MOVFF  42A,4C4
2320:  MOVFF  429,4C3
2324:  MOVLB  4
2326:  CLRF   xCA
2328:  CLRF   xC9
232A:  MOVLW  48
232C:  MOVWF  xC8
232E:  MOVLW  85
2330:  MOVWF  xC7
2332:  MOVLB  0
2334:  CALL   0C3C
2338:  BNC   2342
....................    { 
....................      string[5] = '\0'; 
233A:  MOVLB  4
233C:  CLRF   x94
....................      string[4] = 'A'; 
233E:  MOVLW  41
2340:  MOVWF  x93
....................    } 
....................    if(L2<10) 
2342:  MOVFF  42C,4C6
2346:  MOVFF  42B,4C5
234A:  MOVFF  42A,4C4
234E:  MOVFF  429,4C3
2352:  MOVLB  4
2354:  CLRF   xCA
2356:  CLRF   xC9
2358:  MOVLW  20
235A:  MOVWF  xC8
235C:  MOVLW  82
235E:  MOVWF  xC7
2360:  MOVLB  0
2362:  CALL   0C3C
2366:  BNC   2370
....................    { 
....................      string[4] = '\0'; 
2368:  MOVLB  4
236A:  CLRF   x93
....................      string[3] = 'A'; 
236C:  MOVLW  41
236E:  MOVWF  x92
....................    } 
....................       
....................    glcd_text57(18, 10, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
2370:  MOVLW  12
2372:  MOVLB  4
2374:  MOVWF  xC3
2376:  MOVLW  0A
2378:  MOVWF  xC4
237A:  MOVLW  04
237C:  MOVWF  xC6
237E:  MOVLW  8F
2380:  MOVWF  xC5
2382:  MOVLW  01
2384:  MOVWF  xC7
2386:  MOVWF  xC8
2388:  MOVLB  0
238A:  CALL   17BE
....................     
....................    sprintf(string, "L2:"); // converte char em texto 
238E:  MOVLW  04
2390:  MOVLB  4
2392:  MOVWF  xC2
2394:  MOVLW  8F
2396:  MOVWF  xC1
2398:  MOVLW  04
239A:  MOVWF  FF6
239C:  MOVLW  02
239E:  MOVWF  FF7
23A0:  MOVLB  0
23A2:  CALL   1966
....................    string[3] = '\0'; 
23A6:  MOVLB  4
23A8:  CLRF   x92
....................    glcd_text57(1, 10, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
23AA:  MOVLW  01
23AC:  MOVWF  xC3
23AE:  MOVLW  0A
23B0:  MOVWF  xC4
23B2:  MOVLW  04
23B4:  MOVWF  xC6
23B6:  MOVLW  8F
23B8:  MOVWF  xC5
23BA:  MOVLW  01
23BC:  MOVWF  xC7
23BE:  MOVWF  xC8
23C0:  MOVLB  0
23C2:  CALL   17BE
....................     
....................    sprintf(string, "%.1f", (float)L3); // Converts adc em texto 
23C6:  MOVLW  04
23C8:  MOVLB  4
23CA:  MOVWF  xC2
23CC:  MOVLW  8F
23CE:  MOVWF  xC1
23D0:  MOVLW  89
23D2:  MOVWF  FE9
23D4:  MOVFF  441,4CA
23D8:  MOVFF  440,4C9
23DC:  MOVFF  43F,4C8
23E0:  MOVFF  43E,4C7
23E4:  MOVLW  01
23E6:  MOVWF  xCB
23E8:  MOVLB  0
23EA:  CALL   1514
....................    if(L3>=100) 
23EE:  MOVLB  4
23F0:  CLRF   xC6
23F2:  CLRF   xC5
23F4:  MOVLW  48
23F6:  MOVWF  xC4
23F8:  MOVLW  85
23FA:  MOVWF  xC3
23FC:  MOVFF  441,4CA
2400:  MOVFF  440,4C9
2404:  MOVFF  43F,4C8
2408:  MOVFF  43E,4C7
240C:  MOVLB  0
240E:  CALL   0C3C
2412:  BC    2416
2414:  BNZ   241E
....................    { 
....................      string[6] = '\0'; 
2416:  MOVLB  4
2418:  CLRF   x95
....................      string[5] = 'A'; 
241A:  MOVLW  41
241C:  MOVWF  x94
....................    } 
....................    if(L3<100) 
241E:  MOVFF  441,4C6
2422:  MOVFF  440,4C5
2426:  MOVFF  43F,4C4
242A:  MOVFF  43E,4C3
242E:  MOVLB  4
2430:  CLRF   xCA
2432:  CLRF   xC9
2434:  MOVLW  48
2436:  MOVWF  xC8
2438:  MOVLW  85
243A:  MOVWF  xC7
243C:  MOVLB  0
243E:  CALL   0C3C
2442:  BNC   244C
....................    { 
....................      string[5] = '\0'; 
2444:  MOVLB  4
2446:  CLRF   x94
....................      string[4] = 'A'; 
2448:  MOVLW  41
244A:  MOVWF  x93
....................    } 
....................    if(L3<10) 
244C:  MOVFF  441,4C6
2450:  MOVFF  440,4C5
2454:  MOVFF  43F,4C4
2458:  MOVFF  43E,4C3
245C:  MOVLB  4
245E:  CLRF   xCA
2460:  CLRF   xC9
2462:  MOVLW  20
2464:  MOVWF  xC8
2466:  MOVLW  82
2468:  MOVWF  xC7
246A:  MOVLB  0
246C:  CALL   0C3C
2470:  BNC   247A
....................    { 
....................      string[4] = '\0'; 
2472:  MOVLB  4
2474:  CLRF   x93
....................      string[3] = 'A'; 
2476:  MOVLW  41
2478:  MOVWF  x92
....................    } 
....................       
....................    glcd_text57(18, 19, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
247A:  MOVLW  12
247C:  MOVLB  4
247E:  MOVWF  xC3
2480:  MOVLW  13
2482:  MOVWF  xC4
2484:  MOVLW  04
2486:  MOVWF  xC6
2488:  MOVLW  8F
248A:  MOVWF  xC5
248C:  MOVLW  01
248E:  MOVWF  xC7
2490:  MOVWF  xC8
2492:  MOVLB  0
2494:  CALL   17BE
....................       
....................    sprintf(string, "L3:"); // converte char em texto 
2498:  MOVLW  04
249A:  MOVLB  4
249C:  MOVWF  xC2
249E:  MOVLW  8F
24A0:  MOVWF  xC1
24A2:  MOVLW  08
24A4:  MOVWF  FF6
24A6:  MOVLW  02
24A8:  MOVWF  FF7
24AA:  MOVLB  0
24AC:  CALL   1966
....................    string[3] = '\0'; 
24B0:  MOVLB  4
24B2:  CLRF   x92
....................    glcd_text57(1, 19, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
24B4:  MOVLW  01
24B6:  MOVWF  xC3
24B8:  MOVLW  13
24BA:  MOVWF  xC4
24BC:  MOVLW  04
24BE:  MOVWF  xC6
24C0:  MOVLW  8F
24C2:  MOVWF  xC5
24C4:  MOVLW  01
24C6:  MOVWF  xC7
24C8:  MOVWF  xC8
24CA:  MOVLB  0
24CC:  CALL   17BE
24D0:  MOVLB  4
....................      
....................   } //if menu=0 
....................     
....................   if(menu_lib==1&&menu==0)  //Menu de ajuste do tempo de estrela / triangulo 
24D2:  DECFSZ x7B,W
24D4:  BRA    2618
24D6:  MOVF   x7A,F
24D8:  BTFSS  FD8.2
24DA:  BRA    2618
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
24DC:  CLRF   xC3
24DE:  MOVLB  0
24E0:  CALL   0404
....................     
....................    sprintf(string, "Defina o tempo do    Estrela / Triangulo"); // converte char em texto 
24E4:  MOVLW  04
24E6:  MOVLB  4
24E8:  MOVWF  xC2
24EA:  MOVLW  8F
24EC:  MOVWF  xC1
24EE:  MOVLW  0C
24F0:  MOVWF  FF6
24F2:  MOVLW  02
24F4:  MOVWF  FF7
24F6:  MOVLB  0
24F8:  CALL   1966
....................    string[40] = '\0'; 
24FC:  MOVLB  4
24FE:  CLRF   xB7
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2500:  MOVLW  01
2502:  MOVWF  xC3
2504:  MOVWF  xC4
2506:  MOVLW  04
2508:  MOVWF  xC6
250A:  MOVLW  8F
250C:  MOVWF  xC5
250E:  MOVLW  01
2510:  MOVWF  xC7
2512:  MOVWF  xC8
2514:  MOVLB  0
2516:  CALL   17BE
....................     
....................    sprintf(string, "Tempo:"); // converte char em texto 
251A:  MOVLW  04
251C:  MOVLB  4
251E:  MOVWF  xC2
2520:  MOVLW  8F
2522:  MOVWF  xC1
2524:  MOVLW  36
2526:  MOVWF  FF6
2528:  MOVLW  02
252A:  MOVWF  FF7
252C:  MOVLB  0
252E:  CALL   1966
....................    string[6] = '\0'; 
2532:  MOVLB  4
2534:  CLRF   x95
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2536:  MOVLW  01
2538:  MOVWF  xC3
253A:  MOVLW  19
253C:  MOVWF  xC4
253E:  MOVLW  04
2540:  MOVWF  xC6
2542:  MOVLW  8F
2544:  MOVWF  xC5
2546:  MOVLW  01
2548:  MOVWF  xC7
254A:  MOVWF  xC8
254C:  MOVLB  0
254E:  CALL   17BE
....................     
....................    sprintf(string, "%.1f",TempoETreal); // Converte adc em texto 
2552:  MOVLW  04
2554:  MOVLB  4
2556:  MOVWF  xC2
2558:  MOVLW  8F
255A:  MOVWF  xC1
255C:  MOVLW  89
255E:  MOVWF  FE9
2560:  MOVFF  482,4CA
2564:  MOVFF  481,4C9
2568:  MOVFF  480,4C8
256C:  MOVFF  47F,4C7
2570:  MOVLW  01
2572:  MOVWF  xCB
2574:  MOVLB  0
2576:  CALL   1514
....................    string[4] = '\0'; 
257A:  MOVLB  4
257C:  CLRF   x93
....................    string[3] = 's'; 
257E:  MOVLW  73
2580:  MOVWF  x92
....................     
....................  
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2582:  MOVLW  32
2584:  MOVWF  xC3
2586:  MOVLW  19
2588:  MOVWF  xC4
258A:  MOVLW  04
258C:  MOVWF  xC6
258E:  MOVLW  8F
2590:  MOVWF  xC5
2592:  MOVLW  01
2594:  MOVWF  xC7
2596:  MOVWF  xC8
2598:  MOVLB  0
259A:  CALL   17BE
....................     
....................    if(!input(pin_E1)&&TempoET<45) //incrementa && valor maximo 
259E:  BSF    F96.1
25A0:  BTFSC  F84.1
25A2:  BRA    25B6
25A4:  MOVLB  4
25A6:  MOVF   x7E,W
25A8:  SUBLW  2C
25AA:  BTFSC  FD8.0
25AC:  BRA    25B2
25AE:  MOVLB  0
25B0:  BRA    25B6
....................    { 
....................     TempoET++; 
25B2:  INCF   x7E,F
25B4:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&TempoET>5) //decrementa && valor minimo 
25B6:  BSF    F94.2
25B8:  BTFSC  F82.2
25BA:  BRA    25CC
25BC:  MOVLB  4
25BE:  MOVF   x7E,W
25C0:  SUBLW  05
25C2:  BTFSS  FD8.0
25C4:  BRA    25CA
25C6:  MOVLB  0
25C8:  BRA    25CC
....................    { 
....................     TempoET--; 
25CA:  DECF   x7E,F
....................    } 
....................    TempoETreal = TempoET/4.54; //converte em segungos 
25CC:  MOVLB  4
25CE:  CLRF   xC4
25D0:  MOVFF  47E,4C3
25D4:  MOVLB  0
25D6:  CALL   073A
25DA:  MOVFF  03,4CA
25DE:  MOVFF  02,4C9
25E2:  MOVFF  01,4C8
25E6:  MOVFF  00,4C7
25EA:  MOVLW  AE
25EC:  MOVLB  4
25EE:  MOVWF  xCE
25F0:  MOVLW  47
25F2:  MOVWF  xCD
25F4:  MOVLW  11
25F6:  MOVWF  xCC
25F8:  MOVLW  81
25FA:  MOVWF  xCB
25FC:  MOVLB  0
25FE:  CALL   0ADE
2602:  MOVFF  03,482
2606:  MOVFF  02,481
260A:  MOVFF  01,480
260E:  MOVFF  00,47F
....................     
....................    glcd_update();//update glcd 
2612:  CALL   0540
2616:  MOVLB  4
....................    
....................   } //if menu_lib=1 
....................    
....................    
....................   if(start_on==0&&menu_lib==2||menu_lib==3||menu_lib==4||menu_lib==5)  //Menu de ajuste do modo de start 
2618:  MOVF   x07,F
261A:  BNZ   2622
261C:  MOVF   x7B,W
261E:  SUBLW  02
2620:  BZ    2636
2622:  MOVF   x7B,W
2624:  SUBLW  03
2626:  BZ    2636
2628:  MOVF   x7B,W
262A:  SUBLW  04
262C:  BZ    2636
262E:  MOVF   x7B,W
2630:  SUBLW  05
2632:  BTFSS  FD8.2
2634:  BRA    2988
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
2636:  CLRF   xC3
2638:  MOVLB  0
263A:  CALL   0404
....................    
....................    sprintf(string, "Modo de ligamento"); // converte char em texto 
263E:  MOVLW  04
2640:  MOVLB  4
2642:  MOVWF  xC2
2644:  MOVLW  8F
2646:  MOVWF  xC1
2648:  MOVLW  3E
264A:  MOVWF  FF6
264C:  MOVLW  02
264E:  MOVWF  FF7
2650:  MOVLB  0
2652:  CALL   1966
....................    string[40] = '\0'; 
2656:  MOVLB  4
2658:  CLRF   xB7
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
265A:  MOVLW  01
265C:  MOVWF  xC3
265E:  MOVWF  xC4
2660:  MOVLW  04
2662:  MOVWF  xC6
2664:  MOVLW  8F
2666:  MOVWF  xC5
2668:  MOVLW  01
266A:  MOVWF  xC7
266C:  MOVWF  xC8
266E:  MOVLB  0
2670:  CALL   17BE
....................     
....................    sprintf(string, "Tipo:"); // converte char em texto 
2674:  MOVLW  04
2676:  MOVLB  4
2678:  MOVWF  xC2
267A:  MOVLW  8F
267C:  MOVWF  xC1
267E:  MOVLW  50
2680:  MOVWF  FF6
2682:  MOVLW  02
2684:  MOVWF  FF7
2686:  MOVLB  0
2688:  CALL   1966
....................    string[5] = '\0'; 
268C:  MOVLB  4
268E:  CLRF   x94
....................    glcd_text57(1, 15, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2690:  MOVLW  01
2692:  MOVWF  xC3
2694:  MOVLW  0F
2696:  MOVWF  xC4
2698:  MOVLW  04
269A:  MOVWF  xC6
269C:  MOVLW  8F
269E:  MOVWF  xC5
26A0:  MOVLW  01
26A2:  MOVWF  xC7
26A4:  MOVWF  xC8
26A6:  MOVLB  0
26A8:  CALL   17BE
....................     
....................    IF(Mod_Start==1) 
26AC:  MOVLB  4
26AE:  DECFSZ x09,W
26B0:  BRA    26EA
....................    { 
....................    sprintf(string, "Pulso"); // converte char em texto 
26B2:  MOVLW  04
26B4:  MOVWF  xC2
26B6:  MOVLW  8F
26B8:  MOVWF  xC1
26BA:  MOVLW  56
26BC:  MOVWF  FF6
26BE:  MOVLW  02
26C0:  MOVWF  FF7
26C2:  MOVLB  0
26C4:  CALL   1966
....................    string[7] = '\0'; 
26C8:  MOVLB  4
26CA:  CLRF   x96
....................    glcd_text57(70, 15, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
26CC:  MOVLW  46
26CE:  MOVWF  xC3
26D0:  MOVLW  0F
26D2:  MOVWF  xC4
26D4:  MOVLW  04
26D6:  MOVWF  xC6
26D8:  MOVLW  8F
26DA:  MOVWF  xC5
26DC:  MOVLW  01
26DE:  MOVWF  xC7
26E0:  MOVWF  xC8
26E2:  MOVLB  0
26E4:  CALL   17BE
26E8:  MOVLB  4
....................    } 
....................    IF(Mod_Start==0) 
26EA:  MOVF   x09,F
26EC:  BNZ   2726
....................    { 
....................    sprintf(string, "Direto"); // converte char em texto 
26EE:  MOVLW  04
26F0:  MOVWF  xC2
26F2:  MOVLW  8F
26F4:  MOVWF  xC1
26F6:  MOVLW  5C
26F8:  MOVWF  FF6
26FA:  MOVLW  02
26FC:  MOVWF  FF7
26FE:  MOVLB  0
2700:  CALL   1966
....................    string[7] = '\0'; 
2704:  MOVLB  4
2706:  CLRF   x96
....................    glcd_text57(70, 15, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2708:  MOVLW  46
270A:  MOVWF  xC3
270C:  MOVLW  0F
270E:  MOVWF  xC4
2710:  MOVLW  04
2712:  MOVWF  xC6
2714:  MOVLW  8F
2716:  MOVWF  xC5
2718:  MOVLW  01
271A:  MOVWF  xC7
271C:  MOVWF  xC8
271E:  MOVLB  0
2720:  CALL   17BE
2724:  MOVLB  4
....................    } 
....................     
....................    sprintf(string, "Pulsos ON:"); // converte char em texto 
2726:  MOVLW  04
2728:  MOVWF  xC2
272A:  MOVLW  8F
272C:  MOVWF  xC1
272E:  MOVLW  64
2730:  MOVWF  FF6
2732:  MOVLW  02
2734:  MOVWF  FF7
2736:  MOVLB  0
2738:  CALL   1966
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
273C:  MOVLW  01
273E:  MOVLB  4
2740:  MOVWF  xC3
2742:  MOVLW  23
2744:  MOVWF  xC4
2746:  MOVLW  04
2748:  MOVWF  xC6
274A:  MOVLW  8F
274C:  MOVWF  xC5
274E:  MOVLW  01
2750:  MOVWF  xC7
2752:  MOVWF  xC8
2754:  MOVLB  0
2756:  CALL   17BE
....................     
....................    sprintf(string, "%ld",tempo_on_pulse_set); // Converte adc em texto 
275A:  MOVLW  04
275C:  MOVLB  4
275E:  MOVWF  xC2
2760:  MOVLW  8F
2762:  MOVWF  xC1
2764:  MOVLW  10
2766:  MOVWF  FE9
2768:  MOVFF  40F,4C4
276C:  MOVFF  40E,4C3
2770:  MOVLB  0
2772:  CALL   1EA6
....................    glcd_text57(70, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2776:  MOVLW  46
2778:  MOVLB  4
277A:  MOVWF  xC3
277C:  MOVLW  23
277E:  MOVWF  xC4
2780:  MOVLW  04
2782:  MOVWF  xC6
2784:  MOVLW  8F
2786:  MOVWF  xC5
2788:  MOVLW  01
278A:  MOVWF  xC7
278C:  MOVWF  xC8
278E:  MOVLB  0
2790:  CALL   17BE
....................     
....................    sprintf(string, "Pulsos OFF:"); // converte char em texto 
2794:  MOVLW  04
2796:  MOVLB  4
2798:  MOVWF  xC2
279A:  MOVLW  8F
279C:  MOVWF  xC1
279E:  MOVLW  70
27A0:  MOVWF  FF6
27A2:  MOVLW  02
27A4:  MOVWF  FF7
27A6:  MOVLB  0
27A8:  CALL   1966
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
27AC:  MOVLW  01
27AE:  MOVLB  4
27B0:  MOVWF  xC3
27B2:  MOVLW  2D
27B4:  MOVWF  xC4
27B6:  MOVLW  04
27B8:  MOVWF  xC6
27BA:  MOVLW  8F
27BC:  MOVWF  xC5
27BE:  MOVLW  01
27C0:  MOVWF  xC7
27C2:  MOVWF  xC8
27C4:  MOVLB  0
27C6:  CALL   17BE
....................     
....................    sprintf(string, "%ld",tempo_off_pulse_set); // Converte adc em texto 
27CA:  MOVLW  04
27CC:  MOVLB  4
27CE:  MOVWF  xC2
27D0:  MOVLW  8F
27D2:  MOVWF  xC1
27D4:  MOVLW  10
27D6:  MOVWF  FE9
27D8:  MOVFF  411,4C4
27DC:  MOVFF  410,4C3
27E0:  MOVLB  0
27E2:  CALL   1EA6
....................    glcd_text57(70, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
27E6:  MOVLW  46
27E8:  MOVLB  4
27EA:  MOVWF  xC3
27EC:  MOVLW  2D
27EE:  MOVWF  xC4
27F0:  MOVLW  04
27F2:  MOVWF  xC6
27F4:  MOVLW  8F
27F6:  MOVWF  xC5
27F8:  MOVLW  01
27FA:  MOVWF  xC7
27FC:  MOVWF  xC8
27FE:  MOVLB  0
2800:  CALL   17BE
....................     
....................    sprintf(string, "Quantidade:"); // converte char em texto 
2804:  MOVLW  04
2806:  MOVLB  4
2808:  MOVWF  xC2
280A:  MOVLW  8F
280C:  MOVWF  xC1
280E:  MOVLW  7C
2810:  MOVWF  FF6
2812:  MOVLW  02
2814:  MOVWF  FF7
2816:  MOVLB  0
2818:  CALL   1966
....................    glcd_text57(1, 55, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
281C:  MOVLW  01
281E:  MOVLB  4
2820:  MOVWF  xC3
2822:  MOVLW  37
2824:  MOVWF  xC4
2826:  MOVLW  04
2828:  MOVWF  xC6
282A:  MOVLW  8F
282C:  MOVWF  xC5
282E:  MOVLW  01
2830:  MOVWF  xC7
2832:  MOVWF  xC8
2834:  MOVLB  0
2836:  CALL   17BE
....................     
....................    sprintf(string, "%d",pulse_qnd_set); // Converte adc em texto 
283A:  MOVLW  04
283C:  MOVLB  4
283E:  MOVWF  xC2
2840:  MOVLW  8F
2842:  MOVWF  xC1
2844:  MOVFF  413,4C3
2848:  MOVLW  18
284A:  MOVWF  xC4
284C:  MOVLB  0
284E:  CALL   19FA
....................    glcd_text57(70, 55, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2852:  MOVLW  46
2854:  MOVLB  4
2856:  MOVWF  xC3
2858:  MOVLW  37
285A:  MOVWF  xC4
285C:  MOVLW  04
285E:  MOVWF  xC6
2860:  MOVLW  8F
2862:  MOVWF  xC5
2864:  MOVLW  01
2866:  MOVWF  xC7
2868:  MOVWF  xC8
286A:  MOVLB  0
286C:  CALL   17BE
....................     
....................    glcd_update();//update glcd 
2870:  CALL   0540
....................    if(menu_lib==2) 
2874:  MOVLB  4
2876:  MOVF   x7B,W
2878:  SUBLW  02
287A:  BNZ   28BE
....................    { 
....................     
....................      glcd_rect(0, 14, 120, 22, yes, on); 
287C:  CLRF   xC3
287E:  MOVLW  0E
2880:  MOVWF  xC4
2882:  MOVLW  78
2884:  MOVWF  xC5
2886:  MOVLW  16
2888:  MOVWF  xC6
288A:  MOVLW  01
288C:  MOVWF  xC7
288E:  MOVWF  xC8
2890:  MOVLB  0
2892:  RCALL  20DA
....................      if(!input(pin_E1)&&Mod_Start<1) //incrementa && valor maximo 
2894:  BSF    F96.1
2896:  BTFSC  F84.1
2898:  BRA    28AA
289A:  MOVLB  4
289C:  MOVF   x09,F
289E:  BTFSC  FD8.2
28A0:  BRA    28A6
28A2:  MOVLB  0
28A4:  BRA    28AA
....................      { 
....................        Mod_Start++; 
28A6:  INCF   x09,F
28A8:  MOVLB  0
....................      } 
....................      if(!input(pin_C2)&&Mod_Start>0) //decrementa && valor minimo 
28AA:  BSF    F94.2
28AC:  BTFSC  F82.2
28AE:  BRA    28C0
28B0:  MOVLB  4
28B2:  MOVF   x09,F
28B4:  BTFSS  FD8.2
28B6:  BRA    28BC
28B8:  MOVLB  0
28BA:  BRA    28C0
....................      { 
....................        Mod_Start--; 
28BC:  DECF   x09,F
28BE:  MOVLB  0
....................      } 
....................    } 
....................    if(menu_lib==3)  //Menu de calibração do sensor L1 (offset) 
28C0:  MOVLB  4
28C2:  MOVF   x7B,W
28C4:  SUBLW  03
28C6:  BNZ   2902
....................    { 
....................        // glcd_fillScreen(OFF);//clear glcd 
....................       glcd_rect(0, 34, 120, 42, yes, on); 
28C8:  CLRF   xC3
28CA:  MOVLW  22
28CC:  MOVWF  xC4
28CE:  MOVLW  78
28D0:  MOVWF  xC5
28D2:  MOVLW  2A
28D4:  MOVWF  xC6
28D6:  MOVLW  01
28D8:  MOVWF  xC7
28DA:  MOVWF  xC8
28DC:  MOVLB  0
28DE:  CALL   20DA
....................     
....................       if(!input(pin_E1)) //incrementa && valor maximo 
28E2:  BSF    F96.1
28E4:  BTFSC  F84.1
28E6:  BRA    28F2
....................       { 
....................        tempo_on_pulse_set++; 
28E8:  MOVLB  4
28EA:  INCF   x0E,F
28EC:  BTFSC  FD8.2
28EE:  INCF   x0F,F
28F0:  MOVLB  0
....................       } 
....................       if(!input(pin_C2)) //decrementa && valor minimo 
28F2:  BSF    F94.2
28F4:  BTFSC  F82.2
28F6:  BRA    2904
....................       { 
....................        tempo_on_pulse_set--; 
28F8:  MOVLB  4
28FA:  MOVF   x0E,W
28FC:  BTFSC  FD8.2
28FE:  DECF   x0F,F
2900:  DECF   x0E,F
2902:  MOVLB  0
....................       } 
....................    } 
....................    if(menu_lib==4)  //Menu de calibração do sensor L1 (Ref) 
2904:  MOVLB  4
2906:  MOVF   x7B,W
2908:  SUBLW  04
290A:  BNZ   2946
....................   { 
....................      glcd_rect(0, 44, 120, 52, yes, on); 
290C:  CLRF   xC3
290E:  MOVLW  2C
2910:  MOVWF  xC4
2912:  MOVLW  78
2914:  MOVWF  xC5
2916:  MOVLW  34
2918:  MOVWF  xC6
291A:  MOVLW  01
291C:  MOVWF  xC7
291E:  MOVWF  xC8
2920:  MOVLB  0
2922:  CALL   20DA
....................     
....................      if(!input(pin_E1)) //incrementa && valor maximo 
2926:  BSF    F96.1
2928:  BTFSC  F84.1
292A:  BRA    2936
....................      { 
....................        tempo_off_pulse_set++; 
292C:  MOVLB  4
292E:  INCF   x10,F
2930:  BTFSC  FD8.2
2932:  INCF   x11,F
2934:  MOVLB  0
....................      } 
....................      if(!input(pin_C2)) //decrementa && valor minimo 
2936:  BSF    F94.2
2938:  BTFSC  F82.2
293A:  BRA    2948
....................      { 
....................        tempo_off_pulse_set--; 
293C:  MOVLB  4
293E:  MOVF   x10,W
2940:  BTFSC  FD8.2
2942:  DECF   x11,F
2944:  DECF   x10,F
2946:  MOVLB  0
....................      } 
....................   } 
....................    if(menu_lib==5)  //Menu de calibração do sensor L1 (Ref) 
2948:  MOVLB  4
294A:  MOVF   x7B,W
294C:  SUBLW  05
294E:  BNZ   2980
....................   { 
....................      //glcd_fillScreen(OFF);//clear glcd 
....................      glcd_rect(0, 54, 120, 62, yes, on); 
2950:  CLRF   xC3
2952:  MOVLW  36
2954:  MOVWF  xC4
2956:  MOVLW  78
2958:  MOVWF  xC5
295A:  MOVLW  3E
295C:  MOVWF  xC6
295E:  MOVLW  01
2960:  MOVWF  xC7
2962:  MOVWF  xC8
2964:  MOVLB  0
2966:  CALL   20DA
....................     
....................      if(!input(pin_E1)) //incrementa && valor maximo 
296A:  BSF    F96.1
296C:  BTFSC  F84.1
296E:  BRA    2976
....................      { 
....................        pulse_qnd_set++; 
2970:  MOVLB  4
2972:  INCF   x13,F
2974:  MOVLB  0
....................      } 
....................      if(!input(pin_C2)) //decrementa && valor minimo 
2976:  BSF    F94.2
2978:  BTFSC  F82.2
297A:  BRA    2982
....................      { 
....................        pulse_qnd_set--; 
297C:  MOVLB  4
297E:  DECF   x13,F
2980:  MOVLB  0
....................      } 
....................   } 
....................    
....................   glcd_update();//update glcd 
2982:  CALL   0540
2986:  MOVLB  4
....................   } 
....................  
....................   if(menu==1||menu==2||menu==3||menu==4||menu==5||menu==6||menu==7)  //Menu de calibração do sensor L1 (offset) 
2988:  DECFSZ x7A,W
298A:  BRA    298E
298C:  BRA    29B6
298E:  MOVF   x7A,W
2990:  SUBLW  02
2992:  BZ    29B6
2994:  MOVF   x7A,W
2996:  SUBLW  03
2998:  BZ    29B6
299A:  MOVF   x7A,W
299C:  SUBLW  04
299E:  BZ    29B6
29A0:  MOVF   x7A,W
29A2:  SUBLW  05
29A4:  BZ    29B6
29A6:  MOVF   x7A,W
29A8:  SUBLW  06
29AA:  BZ    29B6
29AC:  MOVF   x7A,W
29AE:  SUBLW  07
29B0:  BTFSS  FD8.2
29B2:  GOTO   32CC
....................  { 
....................    glcd_fillScreen(OFF);//clear glcd 
29B6:  CLRF   xC3
29B8:  MOVLB  0
29BA:  CALL   0404
....................     
....................    sprintf(string, "Calibracao           dos Sensores"); // converte char em texto 
29BE:  MOVLW  04
29C0:  MOVLB  4
29C2:  MOVWF  xC2
29C4:  MOVLW  8F
29C6:  MOVWF  xC1
29C8:  MOVLW  88
29CA:  MOVWF  FF6
29CC:  MOVLW  02
29CE:  MOVWF  FF7
29D0:  MOVLB  0
29D2:  CALL   1966
....................    string[40] = '\0'; 
29D6:  MOVLB  4
29D8:  CLRF   xB7
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
29DA:  MOVLW  01
29DC:  MOVWF  xC3
29DE:  MOVWF  xC4
29E0:  MOVLW  04
29E2:  MOVWF  xC6
29E4:  MOVLW  8F
29E6:  MOVWF  xC5
29E8:  MOVLW  01
29EA:  MOVWF  xC7
29EC:  MOVWF  xC8
29EE:  MOVLB  0
29F0:  CALL   17BE
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
29F4:  MOVLW  04
29F6:  MOVLB  4
29F8:  MOVWF  xC2
29FA:  MOVLW  8F
29FC:  MOVWF  xC1
29FE:  MOVLW  AA
2A00:  MOVWF  FF6
2A02:  MOVLW  02
2A04:  MOVWF  FF7
2A06:  MOVLB  0
2A08:  CALL   1966
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2A0C:  MOVLW  01
2A0E:  MOVLB  4
2A10:  MOVWF  xC3
2A12:  MOVLW  19
2A14:  MOVWF  xC4
2A16:  MOVLW  04
2A18:  MOVWF  xC6
2A1A:  MOVLW  8F
2A1C:  MOVWF  xC5
2A1E:  MOVLW  01
2A20:  MOVWF  xC7
2A22:  MOVWF  xC8
2A24:  MOVLB  0
2A26:  CALL   17BE
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
2A2A:  MOVLW  04
2A2C:  MOVLB  4
2A2E:  MOVWF  xC2
2A30:  MOVLW  8F
2A32:  MOVWF  xC1
2A34:  MOVLW  B2
2A36:  MOVWF  FF6
2A38:  MOVLW  02
2A3A:  MOVWF  FF7
2A3C:  MOVLB  0
2A3E:  CALL   1966
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2A42:  MOVLW  01
2A44:  MOVLB  4
2A46:  MOVWF  xC3
2A48:  MOVLW  23
2A4A:  MOVWF  xC4
2A4C:  MOVLW  04
2A4E:  MOVWF  xC6
2A50:  MOVLW  8F
2A52:  MOVWF  xC5
2A54:  MOVLW  01
2A56:  MOVWF  xC7
2A58:  MOVWF  xC8
2A5A:  MOVLB  0
2A5C:  CALL   17BE
....................     
....................    sprintf(string, "%f",ref_L1); // Converte adc em texto 
2A60:  MOVLW  04
2A62:  MOVLB  4
2A64:  MOVWF  xC2
2A66:  MOVLW  8F
2A68:  MOVWF  xC1
2A6A:  MOVLW  89
2A6C:  MOVWF  FE9
2A6E:  MOVFF  41F,4CA
2A72:  MOVFF  41E,4C9
2A76:  MOVFF  41D,4C8
2A7A:  MOVFF  41C,4C7
2A7E:  MOVLW  02
2A80:  MOVWF  xCB
2A82:  MOVLB  0
2A84:  CALL   1514
....................    glcd_text57(50, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2A88:  MOVLW  32
2A8A:  MOVLB  4
2A8C:  MOVWF  xC3
2A8E:  MOVLW  23
2A90:  MOVWF  xC4
2A92:  MOVLW  04
2A94:  MOVWF  xC6
2A96:  MOVLW  8F
2A98:  MOVWF  xC5
2A9A:  MOVLW  01
2A9C:  MOVWF  xC7
2A9E:  MOVWF  xC8
2AA0:  MOVLB  0
2AA2:  CALL   17BE
....................  
....................    glcd_update();//update glcd 
2AA6:  CALL   0540
....................     
....................    if(menu==1) 
2AAA:  MOVLB  4
2AAC:  DECFSZ x7A,W
2AAE:  BRA    2BE0
....................   {  
....................    sprintf(string, "%lf",Offset_L1); // Converte adc em texto 
2AB0:  MOVLW  04
2AB2:  MOVWF  xC2
2AB4:  MOVLW  8F
2AB6:  MOVWF  xC1
2AB8:  MOVLW  89
2ABA:  MOVWF  FE9
2ABC:  MOVFF  41B,4CA
2AC0:  MOVFF  41A,4C9
2AC4:  MOVFF  419,4C8
2AC8:  MOVFF  418,4C7
2ACC:  MOVLW  02
2ACE:  MOVWF  xCB
2AD0:  MOVLB  0
2AD2:  CALL   1514
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2AD6:  MOVLW  32
2AD8:  MOVLB  4
2ADA:  MOVWF  xC3
2ADC:  MOVLW  19
2ADE:  MOVWF  xC4
2AE0:  MOVLW  04
2AE2:  MOVWF  xC6
2AE4:  MOVLW  8F
2AE6:  MOVWF  xC5
2AE8:  MOVLW  01
2AEA:  MOVWF  xC7
2AEC:  MOVWF  xC8
2AEE:  MOVLB  0
2AF0:  CALL   17BE
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
2AF4:  MOVLB  4
2AF6:  CLRF   xC3
2AF8:  MOVLW  18
2AFA:  MOVWF  xC4
2AFC:  MOVLW  50
2AFE:  MOVWF  xC5
2B00:  MOVLW  20
2B02:  MOVWF  xC6
2B04:  MOVLW  01
2B06:  MOVWF  xC7
2B08:  MOVWF  xC8
2B0A:  MOVLB  0
2B0C:  CALL   20DA
....................    if(!input(pin_E1)&&Offset_L1<10) //incrementa && valor maximo 
2B10:  BSF    F96.1
2B12:  BTFSC  F84.1
2B14:  BRA    2B76
2B16:  MOVFF  41B,4C6
2B1A:  MOVFF  41A,4C5
2B1E:  MOVFF  419,4C4
2B22:  MOVFF  418,4C3
2B26:  MOVLB  4
2B28:  CLRF   xCA
2B2A:  CLRF   xC9
2B2C:  MOVLW  20
2B2E:  MOVWF  xC8
2B30:  MOVLW  82
2B32:  MOVWF  xC7
2B34:  MOVLB  0
2B36:  CALL   0C3C
2B3A:  BNC   2B76
....................    { 
....................      Offset_L1= offset_L1+0.1; 
2B3C:  BCF    FD8.1
2B3E:  MOVFF  41B,4CA
2B42:  MOVFF  41A,4C9
2B46:  MOVFF  419,4C8
2B4A:  MOVFF  418,4C7
2B4E:  MOVLW  CD
2B50:  MOVLB  4
2B52:  MOVWF  xCE
2B54:  MOVLW  CC
2B56:  MOVWF  xCD
2B58:  MOVLW  4C
2B5A:  MOVWF  xCC
2B5C:  MOVLW  7B
2B5E:  MOVWF  xCB
2B60:  MOVLB  0
2B62:  CALL   0866
2B66:  MOVFF  03,41B
2B6A:  MOVFF  02,41A
2B6E:  MOVFF  01,419
2B72:  MOVFF  00,418
....................    } 
....................    if(!input(pin_C2)&&Offset_L1>=0) //decrementa && valor minimo 
2B76:  BSF    F94.2
2B78:  BTFSC  F82.2
2B7A:  BRA    2BDA
2B7C:  MOVLB  4
2B7E:  CLRF   xC6
2B80:  CLRF   xC5
2B82:  CLRF   xC4
2B84:  CLRF   xC3
2B86:  MOVFF  41B,4CA
2B8A:  MOVFF  41A,4C9
2B8E:  MOVFF  419,4C8
2B92:  MOVFF  418,4C7
2B96:  MOVLB  0
2B98:  CALL   0C3C
2B9C:  BC    2BA0
2B9E:  BNZ   2BDA
....................    { 
....................      Offset_L1= offset_L1-0.1; 
2BA0:  BSF    FD8.1
2BA2:  MOVFF  41B,4CA
2BA6:  MOVFF  41A,4C9
2BAA:  MOVFF  419,4C8
2BAE:  MOVFF  418,4C7
2BB2:  MOVLW  CD
2BB4:  MOVLB  4
2BB6:  MOVWF  xCE
2BB8:  MOVLW  CC
2BBA:  MOVWF  xCD
2BBC:  MOVLW  4C
2BBE:  MOVWF  xCC
2BC0:  MOVLW  7B
2BC2:  MOVWF  xCB
2BC4:  MOVLB  0
2BC6:  CALL   0866
2BCA:  MOVFF  03,41B
2BCE:  MOVFF  02,41A
2BD2:  MOVFF  01,419
2BD6:  MOVFF  00,418
....................    } 
....................    glcd_update();//update glcd 
2BDA:  CALL   0540
2BDE:  MOVLB  4
....................   } 
....................    
....................   if(menu==2)  //Menu de calibração do sensor L1 (Ref) 
2BE0:  MOVF   x7A,W
2BE2:  SUBLW  02
2BE4:  BNZ   2CD2
....................   { 
....................    glcd_rect(0, 34, 80, 42, yes, on); 
2BE6:  CLRF   xC3
2BE8:  MOVLW  22
2BEA:  MOVWF  xC4
2BEC:  MOVLW  50
2BEE:  MOVWF  xC5
2BF0:  MOVLW  2A
2BF2:  MOVWF  xC6
2BF4:  MOVLW  01
2BF6:  MOVWF  xC7
2BF8:  MOVWF  xC8
2BFA:  MOVLB  0
2BFC:  CALL   20DA
....................       
....................    if(!input(pin_E1)&&ref_L1<30) //incrementa && valor maximo 
2C00:  BSF    F96.1
2C02:  BTFSC  F84.1
2C04:  BRA    2C66
2C06:  MOVFF  41F,4C6
2C0A:  MOVFF  41E,4C5
2C0E:  MOVFF  41D,4C4
2C12:  MOVFF  41C,4C3
2C16:  MOVLB  4
2C18:  CLRF   xCA
2C1A:  CLRF   xC9
2C1C:  MOVLW  70
2C1E:  MOVWF  xC8
2C20:  MOVLW  83
2C22:  MOVWF  xC7
2C24:  MOVLB  0
2C26:  CALL   0C3C
2C2A:  BNC   2C66
....................    { 
....................      ref_L1=ref_L1+0.1; 
2C2C:  BCF    FD8.1
2C2E:  MOVFF  41F,4CA
2C32:  MOVFF  41E,4C9
2C36:  MOVFF  41D,4C8
2C3A:  MOVFF  41C,4C7
2C3E:  MOVLW  CD
2C40:  MOVLB  4
2C42:  MOVWF  xCE
2C44:  MOVLW  CC
2C46:  MOVWF  xCD
2C48:  MOVLW  4C
2C4A:  MOVWF  xCC
2C4C:  MOVLW  7B
2C4E:  MOVWF  xCB
2C50:  MOVLB  0
2C52:  CALL   0866
2C56:  MOVFF  03,41F
2C5A:  MOVFF  02,41E
2C5E:  MOVFF  01,41D
2C62:  MOVFF  00,41C
....................    } 
....................    if(!input(pin_C2)&&ref_L1>5) //decrementa && valor minimo 
2C66:  BSF    F94.2
2C68:  BTFSC  F82.2
2C6A:  BRA    2CCC
2C6C:  MOVLB  4
2C6E:  CLRF   xC6
2C70:  CLRF   xC5
2C72:  MOVLW  20
2C74:  MOVWF  xC4
2C76:  MOVLW  81
2C78:  MOVWF  xC3
2C7A:  MOVFF  41F,4CA
2C7E:  MOVFF  41E,4C9
2C82:  MOVFF  41D,4C8
2C86:  MOVFF  41C,4C7
2C8A:  MOVLB  0
2C8C:  CALL   0C3C
2C90:  BNC   2CCC
....................    { 
....................      ref_L1=ref_L1-0.1; 
2C92:  BSF    FD8.1
2C94:  MOVFF  41F,4CA
2C98:  MOVFF  41E,4C9
2C9C:  MOVFF  41D,4C8
2CA0:  MOVFF  41C,4C7
2CA4:  MOVLW  CD
2CA6:  MOVLB  4
2CA8:  MOVWF  xCE
2CAA:  MOVLW  CC
2CAC:  MOVWF  xCD
2CAE:  MOVLW  4C
2CB0:  MOVWF  xCC
2CB2:  MOVLW  7B
2CB4:  MOVWF  xCB
2CB6:  MOVLB  0
2CB8:  CALL   0866
2CBC:  MOVFF  03,41F
2CC0:  MOVFF  02,41E
2CC4:  MOVFF  01,41D
2CC8:  MOVFF  00,41C
....................    } 
....................     
....................    glcd_update();//update glcd 
2CCC:  CALL   0540
2CD0:  MOVLB  4
....................    
....................   }//if menu=2 
....................  
....................   if(menu==1||menu==2) //Strings em comum - calibração do sensor L1  
2CD2:  DECFSZ x7A,W
2CD4:  BRA    2CD8
2CD6:  BRA    2CDE
2CD8:  MOVF   x7A,W
2CDA:  SUBLW  02
2CDC:  BNZ   2D60
....................   { 
....................    sprintf(string, "%.1f", (float)L1); // Converte adc em texto    
2CDE:  MOVLW  04
2CE0:  MOVWF  xC2
2CE2:  MOVLW  8F
2CE4:  MOVWF  xC1
2CE6:  MOVLW  89
2CE8:  MOVWF  FE9
2CEA:  MOVFF  417,4CA
2CEE:  MOVFF  416,4C9
2CF2:  MOVFF  415,4C8
2CF6:  MOVFF  414,4C7
2CFA:  MOVLW  01
2CFC:  MOVWF  xCB
2CFE:  MOVLB  0
2D00:  CALL   1514
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
2D04:  MOVLW  12
2D06:  MOVLB  4
2D08:  MOVWF  xC3
2D0A:  MOVLW  2D
2D0C:  MOVWF  xC4
2D0E:  MOVLW  04
2D10:  MOVWF  xC6
2D12:  MOVLW  8F
2D14:  MOVWF  xC5
2D16:  MOVLW  01
2D18:  MOVWF  xC7
2D1A:  MOVWF  xC8
2D1C:  MOVLB  0
2D1E:  CALL   17BE
....................    
....................    sprintf(string, "L1:"); // Converte char em texto 
2D22:  MOVLW  04
2D24:  MOVLB  4
2D26:  MOVWF  xC2
2D28:  MOVLW  8F
2D2A:  MOVWF  xC1
2D2C:  MOVLW  B8
2D2E:  MOVWF  FF6
2D30:  MOVLW  02
2D32:  MOVWF  FF7
2D34:  MOVLB  0
2D36:  CALL   1966
....................    string[3] = '\0'; 
2D3A:  MOVLB  4
2D3C:  CLRF   x92
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2D3E:  MOVLW  01
2D40:  MOVWF  xC3
2D42:  MOVLW  2D
2D44:  MOVWF  xC4
2D46:  MOVLW  04
2D48:  MOVWF  xC6
2D4A:  MOVLW  8F
2D4C:  MOVWF  xC5
2D4E:  MOVLW  01
2D50:  MOVWF  xC7
2D52:  MOVWF  xC8
2D54:  MOVLB  0
2D56:  CALL   17BE
....................     
....................    glcd_update();//update glcd 
2D5A:  CALL   0540
2D5E:  MOVLB  4
....................    
....................   }//if menu = 2 ou 3 
....................    
....................   if(menu==3)  //Menu de calibração do sensor L2 (offset) 
2D60:  MOVF   x7A,W
2D62:  SUBLW  03
2D64:  BTFSS  FD8.2
2D66:  BRA    2E96
....................   { 
....................    sprintf(string, "%lf",Offset_L2); // Converte adc em texto 
2D68:  MOVLW  04
2D6A:  MOVWF  xC2
2D6C:  MOVLW  8F
2D6E:  MOVWF  xC1
2D70:  MOVLW  89
2D72:  MOVWF  FE9
2D74:  MOVFF  430,4CA
2D78:  MOVFF  42F,4C9
2D7C:  MOVFF  42E,4C8
2D80:  MOVFF  42D,4C7
2D84:  MOVLW  02
2D86:  MOVWF  xCB
2D88:  MOVLB  0
2D8A:  CALL   1514
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2D8E:  MOVLW  32
2D90:  MOVLB  4
2D92:  MOVWF  xC3
2D94:  MOVLW  19
2D96:  MOVWF  xC4
2D98:  MOVLW  04
2D9A:  MOVWF  xC6
2D9C:  MOVLW  8F
2D9E:  MOVWF  xC5
2DA0:  MOVLW  01
2DA2:  MOVWF  xC7
2DA4:  MOVWF  xC8
2DA6:  MOVLB  0
2DA8:  CALL   17BE
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
2DAC:  MOVLB  4
2DAE:  CLRF   xC3
2DB0:  MOVLW  18
2DB2:  MOVWF  xC4
2DB4:  MOVLW  50
2DB6:  MOVWF  xC5
2DB8:  MOVLW  20
2DBA:  MOVWF  xC6
2DBC:  MOVLW  01
2DBE:  MOVWF  xC7
2DC0:  MOVWF  xC8
2DC2:  MOVLB  0
2DC4:  CALL   20DA
....................     
....................    if(!input(pin_E1)&&Offset_L2<10) //incrementa && valor maximo 
2DC8:  BSF    F96.1
2DCA:  BTFSC  F84.1
2DCC:  BRA    2E2E
2DCE:  MOVFF  430,4C6
2DD2:  MOVFF  42F,4C5
2DD6:  MOVFF  42E,4C4
2DDA:  MOVFF  42D,4C3
2DDE:  MOVLB  4
2DE0:  CLRF   xCA
2DE2:  CLRF   xC9
2DE4:  MOVLW  20
2DE6:  MOVWF  xC8
2DE8:  MOVLW  82
2DEA:  MOVWF  xC7
2DEC:  MOVLB  0
2DEE:  CALL   0C3C
2DF2:  BNC   2E2E
....................    { 
....................      Offset_L2 = offset_L2+0.1; 
2DF4:  BCF    FD8.1
2DF6:  MOVFF  430,4CA
2DFA:  MOVFF  42F,4C9
2DFE:  MOVFF  42E,4C8
2E02:  MOVFF  42D,4C7
2E06:  MOVLW  CD
2E08:  MOVLB  4
2E0A:  MOVWF  xCE
2E0C:  MOVLW  CC
2E0E:  MOVWF  xCD
2E10:  MOVLW  4C
2E12:  MOVWF  xCC
2E14:  MOVLW  7B
2E16:  MOVWF  xCB
2E18:  MOVLB  0
2E1A:  CALL   0866
2E1E:  MOVFF  03,430
2E22:  MOVFF  02,42F
2E26:  MOVFF  01,42E
2E2A:  MOVFF  00,42D
....................    } 
....................    if(!input(pin_C2)&&Offset_L2>0) //decrementa && valor minimo 
2E2E:  BSF    F94.2
2E30:  BTFSC  F82.2
2E32:  BRA    2E90
2E34:  MOVLB  4
2E36:  CLRF   xC6
2E38:  CLRF   xC5
2E3A:  CLRF   xC4
2E3C:  CLRF   xC3
2E3E:  MOVFF  430,4CA
2E42:  MOVFF  42F,4C9
2E46:  MOVFF  42E,4C8
2E4A:  MOVFF  42D,4C7
2E4E:  MOVLB  0
2E50:  CALL   0C3C
2E54:  BNC   2E90
....................    { 
....................      Offset_L2= offset_L2-0.1; 
2E56:  BSF    FD8.1
2E58:  MOVFF  430,4CA
2E5C:  MOVFF  42F,4C9
2E60:  MOVFF  42E,4C8
2E64:  MOVFF  42D,4C7
2E68:  MOVLW  CD
2E6A:  MOVLB  4
2E6C:  MOVWF  xCE
2E6E:  MOVLW  CC
2E70:  MOVWF  xCD
2E72:  MOVLW  4C
2E74:  MOVWF  xCC
2E76:  MOVLW  7B
2E78:  MOVWF  xCB
2E7A:  MOVLB  0
2E7C:  CALL   0866
2E80:  MOVFF  03,430
2E84:  MOVFF  02,42F
2E88:  MOVFF  01,42E
2E8C:  MOVFF  00,42D
....................    } 
....................    glcd_update();//update glcd 
2E90:  CALL   0540
2E94:  MOVLB  4
....................    
....................   }//if menu=4 
....................    
....................   if(menu==4)  //Menu de calibração do sensor L2 (Ref) 
2E96:  MOVF   x7A,W
2E98:  SUBLW  04
2E9A:  BNZ   2F88
....................   { 
....................    glcd_rect(0, 34, 80, 42, yes, on); 
2E9C:  CLRF   xC3
2E9E:  MOVLW  22
2EA0:  MOVWF  xC4
2EA2:  MOVLW  50
2EA4:  MOVWF  xC5
2EA6:  MOVLW  2A
2EA8:  MOVWF  xC6
2EAA:  MOVLW  01
2EAC:  MOVWF  xC7
2EAE:  MOVWF  xC8
2EB0:  MOVLB  0
2EB2:  CALL   20DA
....................     
....................    if(!input(pin_E1)&&ref_L2<30) //incrementa && valor maximo 
2EB6:  BSF    F96.1
2EB8:  BTFSC  F84.1
2EBA:  BRA    2F1C
2EBC:  MOVFF  434,4C6
2EC0:  MOVFF  433,4C5
2EC4:  MOVFF  432,4C4
2EC8:  MOVFF  431,4C3
2ECC:  MOVLB  4
2ECE:  CLRF   xCA
2ED0:  CLRF   xC9
2ED2:  MOVLW  70
2ED4:  MOVWF  xC8
2ED6:  MOVLW  83
2ED8:  MOVWF  xC7
2EDA:  MOVLB  0
2EDC:  CALL   0C3C
2EE0:  BNC   2F1C
....................    { 
....................      ref_L2=ref_L2+0.1; 
2EE2:  BCF    FD8.1
2EE4:  MOVFF  434,4CA
2EE8:  MOVFF  433,4C9
2EEC:  MOVFF  432,4C8
2EF0:  MOVFF  431,4C7
2EF4:  MOVLW  CD
2EF6:  MOVLB  4
2EF8:  MOVWF  xCE
2EFA:  MOVLW  CC
2EFC:  MOVWF  xCD
2EFE:  MOVLW  4C
2F00:  MOVWF  xCC
2F02:  MOVLW  7B
2F04:  MOVWF  xCB
2F06:  MOVLB  0
2F08:  CALL   0866
2F0C:  MOVFF  03,434
2F10:  MOVFF  02,433
2F14:  MOVFF  01,432
2F18:  MOVFF  00,431
....................    } 
....................    if(!input(pin_C2)&&ref_L2>5) //decrementa && valor minimo 
2F1C:  BSF    F94.2
2F1E:  BTFSC  F82.2
2F20:  BRA    2F82
2F22:  MOVLB  4
2F24:  CLRF   xC6
2F26:  CLRF   xC5
2F28:  MOVLW  20
2F2A:  MOVWF  xC4
2F2C:  MOVLW  81
2F2E:  MOVWF  xC3
2F30:  MOVFF  434,4CA
2F34:  MOVFF  433,4C9
2F38:  MOVFF  432,4C8
2F3C:  MOVFF  431,4C7
2F40:  MOVLB  0
2F42:  CALL   0C3C
2F46:  BNC   2F82
....................    { 
....................      ref_L2=ref_L2-0.1; 
2F48:  BSF    FD8.1
2F4A:  MOVFF  434,4CA
2F4E:  MOVFF  433,4C9
2F52:  MOVFF  432,4C8
2F56:  MOVFF  431,4C7
2F5A:  MOVLW  CD
2F5C:  MOVLB  4
2F5E:  MOVWF  xCE
2F60:  MOVLW  CC
2F62:  MOVWF  xCD
2F64:  MOVLW  4C
2F66:  MOVWF  xCC
2F68:  MOVLW  7B
2F6A:  MOVWF  xCB
2F6C:  MOVLB  0
2F6E:  CALL   0866
2F72:  MOVFF  03,434
2F76:  MOVFF  02,433
2F7A:  MOVFF  01,432
2F7E:  MOVFF  00,431
....................    } 
....................     
....................    glcd_update();//update glcd 
2F82:  CALL   0540
2F86:  MOVLB  4
....................    
....................   }//if menu=5 
....................  
....................   if(menu==3||menu==4) //Strings em comum - calibração do sensor L2  
2F88:  MOVF   x7A,W
2F8A:  SUBLW  03
2F8C:  BZ    2F94
2F8E:  MOVF   x7A,W
2F90:  SUBLW  04
2F92:  BNZ   3016
....................   {  
....................    sprintf(string, "%.1f", (float)L2); // Converte adc em texto 
2F94:  MOVLW  04
2F96:  MOVWF  xC2
2F98:  MOVLW  8F
2F9A:  MOVWF  xC1
2F9C:  MOVLW  89
2F9E:  MOVWF  FE9
2FA0:  MOVFF  42C,4CA
2FA4:  MOVFF  42B,4C9
2FA8:  MOVFF  42A,4C8
2FAC:  MOVFF  429,4C7
2FB0:  MOVLW  01
2FB2:  MOVWF  xCB
2FB4:  MOVLB  0
2FB6:  CALL   1514
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
2FBA:  MOVLW  12
2FBC:  MOVLB  4
2FBE:  MOVWF  xC3
2FC0:  MOVLW  2D
2FC2:  MOVWF  xC4
2FC4:  MOVLW  04
2FC6:  MOVWF  xC6
2FC8:  MOVLW  8F
2FCA:  MOVWF  xC5
2FCC:  MOVLW  01
2FCE:  MOVWF  xC7
2FD0:  MOVWF  xC8
2FD2:  MOVLB  0
2FD4:  CALL   17BE
....................       
....................    sprintf(string, "L2:"); // Converte char em texto 
2FD8:  MOVLW  04
2FDA:  MOVLB  4
2FDC:  MOVWF  xC2
2FDE:  MOVLW  8F
2FE0:  MOVWF  xC1
2FE2:  MOVLW  BC
2FE4:  MOVWF  FF6
2FE6:  MOVLW  02
2FE8:  MOVWF  FF7
2FEA:  MOVLB  0
2FEC:  CALL   1966
....................    string[3] = '\0'; 
2FF0:  MOVLB  4
2FF2:  CLRF   x92
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2FF4:  MOVLW  01
2FF6:  MOVWF  xC3
2FF8:  MOVLW  2D
2FFA:  MOVWF  xC4
2FFC:  MOVLW  04
2FFE:  MOVWF  xC6
3000:  MOVLW  8F
3002:  MOVWF  xC5
3004:  MOVLW  01
3006:  MOVWF  xC7
3008:  MOVWF  xC8
300A:  MOVLB  0
300C:  CALL   17BE
....................     
....................    glcd_update();//update glcd 
3010:  CALL   0540
3014:  MOVLB  4
....................    
....................   }//if menu = 4 ou 5 
....................    
....................   if(menu==5)  //Menu de calibração do sensor L3 (offset) 
3016:  MOVF   x7A,W
3018:  SUBLW  05
301A:  BTFSS  FD8.2
301C:  BRA    314C
....................   { 
....................    sprintf(string, "%lf",Offset_L3); // Converte adc em texto 
301E:  MOVLW  04
3020:  MOVWF  xC2
3022:  MOVLW  8F
3024:  MOVWF  xC1
3026:  MOVLW  89
3028:  MOVWF  FE9
302A:  MOVFF  445,4CA
302E:  MOVFF  444,4C9
3032:  MOVFF  443,4C8
3036:  MOVFF  442,4C7
303A:  MOVLW  02
303C:  MOVWF  xCB
303E:  MOVLB  0
3040:  CALL   1514
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3044:  MOVLW  32
3046:  MOVLB  4
3048:  MOVWF  xC3
304A:  MOVLW  19
304C:  MOVWF  xC4
304E:  MOVLW  04
3050:  MOVWF  xC6
3052:  MOVLW  8F
3054:  MOVWF  xC5
3056:  MOVLW  01
3058:  MOVWF  xC7
305A:  MOVWF  xC8
305C:  MOVLB  0
305E:  CALL   17BE
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
3062:  MOVLB  4
3064:  CLRF   xC3
3066:  MOVLW  18
3068:  MOVWF  xC4
306A:  MOVLW  50
306C:  MOVWF  xC5
306E:  MOVLW  20
3070:  MOVWF  xC6
3072:  MOVLW  01
3074:  MOVWF  xC7
3076:  MOVWF  xC8
3078:  MOVLB  0
307A:  CALL   20DA
....................  
....................    if(!input(pin_E1)&&Offset_L3<10) //incrementa && valor maximo 
307E:  BSF    F96.1
3080:  BTFSC  F84.1
3082:  BRA    30E4
3084:  MOVFF  445,4C6
3088:  MOVFF  444,4C5
308C:  MOVFF  443,4C4
3090:  MOVFF  442,4C3
3094:  MOVLB  4
3096:  CLRF   xCA
3098:  CLRF   xC9
309A:  MOVLW  20
309C:  MOVWF  xC8
309E:  MOVLW  82
30A0:  MOVWF  xC7
30A2:  MOVLB  0
30A4:  CALL   0C3C
30A8:  BNC   30E4
....................    { 
....................      Offset_L3 = offset_L3+0.1; 
30AA:  BCF    FD8.1
30AC:  MOVFF  445,4CA
30B0:  MOVFF  444,4C9
30B4:  MOVFF  443,4C8
30B8:  MOVFF  442,4C7
30BC:  MOVLW  CD
30BE:  MOVLB  4
30C0:  MOVWF  xCE
30C2:  MOVLW  CC
30C4:  MOVWF  xCD
30C6:  MOVLW  4C
30C8:  MOVWF  xCC
30CA:  MOVLW  7B
30CC:  MOVWF  xCB
30CE:  MOVLB  0
30D0:  CALL   0866
30D4:  MOVFF  03,445
30D8:  MOVFF  02,444
30DC:  MOVFF  01,443
30E0:  MOVFF  00,442
....................    } 
....................    if(!input(pin_C2)&&Offset_L3>0) //decrementa && valor minimo 
30E4:  BSF    F94.2
30E6:  BTFSC  F82.2
30E8:  BRA    3146
30EA:  MOVLB  4
30EC:  CLRF   xC6
30EE:  CLRF   xC5
30F0:  CLRF   xC4
30F2:  CLRF   xC3
30F4:  MOVFF  445,4CA
30F8:  MOVFF  444,4C9
30FC:  MOVFF  443,4C8
3100:  MOVFF  442,4C7
3104:  MOVLB  0
3106:  CALL   0C3C
310A:  BNC   3146
....................    { 
....................      Offset_L3 = offset_L3-0.1; 
310C:  BSF    FD8.1
310E:  MOVFF  445,4CA
3112:  MOVFF  444,4C9
3116:  MOVFF  443,4C8
311A:  MOVFF  442,4C7
311E:  MOVLW  CD
3120:  MOVLB  4
3122:  MOVWF  xCE
3124:  MOVLW  CC
3126:  MOVWF  xCD
3128:  MOVLW  4C
312A:  MOVWF  xCC
312C:  MOVLW  7B
312E:  MOVWF  xCB
3130:  MOVLB  0
3132:  CALL   0866
3136:  MOVFF  03,445
313A:  MOVFF  02,444
313E:  MOVFF  01,443
3142:  MOVFF  00,442
....................    } 
....................    glcd_update();//update glcd 
3146:  CALL   0540
314A:  MOVLB  4
....................    
....................   }//if menu=6 
....................    
....................   if(menu==6)  //Menu de calibração do sensor L3 (Ref) 
314C:  MOVF   x7A,W
314E:  SUBLW  06
3150:  BNZ   323E
....................   { 
....................    glcd_rect(0, 34, 80, 42, yes, on); 
3152:  CLRF   xC3
3154:  MOVLW  22
3156:  MOVWF  xC4
3158:  MOVLW  50
315A:  MOVWF  xC5
315C:  MOVLW  2A
315E:  MOVWF  xC6
3160:  MOVLW  01
3162:  MOVWF  xC7
3164:  MOVWF  xC8
3166:  MOVLB  0
3168:  CALL   20DA
....................     
....................    if(!input(pin_E1)&&ref_L3<30) //incrementa && valor maximo 
316C:  BSF    F96.1
316E:  BTFSC  F84.1
3170:  BRA    31D2
3172:  MOVFF  449,4C6
3176:  MOVFF  448,4C5
317A:  MOVFF  447,4C4
317E:  MOVFF  446,4C3
3182:  MOVLB  4
3184:  CLRF   xCA
3186:  CLRF   xC9
3188:  MOVLW  70
318A:  MOVWF  xC8
318C:  MOVLW  83
318E:  MOVWF  xC7
3190:  MOVLB  0
3192:  CALL   0C3C
3196:  BNC   31D2
....................    { 
....................      ref_L3=ref_L3+0.1; 
3198:  BCF    FD8.1
319A:  MOVFF  449,4CA
319E:  MOVFF  448,4C9
31A2:  MOVFF  447,4C8
31A6:  MOVFF  446,4C7
31AA:  MOVLW  CD
31AC:  MOVLB  4
31AE:  MOVWF  xCE
31B0:  MOVLW  CC
31B2:  MOVWF  xCD
31B4:  MOVLW  4C
31B6:  MOVWF  xCC
31B8:  MOVLW  7B
31BA:  MOVWF  xCB
31BC:  MOVLB  0
31BE:  CALL   0866
31C2:  MOVFF  03,449
31C6:  MOVFF  02,448
31CA:  MOVFF  01,447
31CE:  MOVFF  00,446
....................    } 
....................    if(!input(pin_C2)&&ref_L3>5) //decrementa && valor minimo 
31D2:  BSF    F94.2
31D4:  BTFSC  F82.2
31D6:  BRA    3238
31D8:  MOVLB  4
31DA:  CLRF   xC6
31DC:  CLRF   xC5
31DE:  MOVLW  20
31E0:  MOVWF  xC4
31E2:  MOVLW  81
31E4:  MOVWF  xC3
31E6:  MOVFF  449,4CA
31EA:  MOVFF  448,4C9
31EE:  MOVFF  447,4C8
31F2:  MOVFF  446,4C7
31F6:  MOVLB  0
31F8:  CALL   0C3C
31FC:  BNC   3238
....................    { 
....................      ref_L3=ref_L3-0.1; 
31FE:  BSF    FD8.1
3200:  MOVFF  449,4CA
3204:  MOVFF  448,4C9
3208:  MOVFF  447,4C8
320C:  MOVFF  446,4C7
3210:  MOVLW  CD
3212:  MOVLB  4
3214:  MOVWF  xCE
3216:  MOVLW  CC
3218:  MOVWF  xCD
321A:  MOVLW  4C
321C:  MOVWF  xCC
321E:  MOVLW  7B
3220:  MOVWF  xCB
3222:  MOVLB  0
3224:  CALL   0866
3228:  MOVFF  03,449
322C:  MOVFF  02,448
3230:  MOVFF  01,447
3234:  MOVFF  00,446
....................    } 
....................     
....................    glcd_update();//update glcd 
3238:  CALL   0540
323C:  MOVLB  4
....................    
....................   }//if menu=7 
....................  
....................   if(menu==5||menu==6) //Strings em comum - calibração do sensor L3  
323E:  MOVF   x7A,W
3240:  SUBLW  05
3242:  BZ    324A
3244:  MOVF   x7A,W
3246:  SUBLW  06
3248:  BNZ   32CC
....................   { 
....................    sprintf(string, "%.1f", (float)L3); // Converte adc em texto 
324A:  MOVLW  04
324C:  MOVWF  xC2
324E:  MOVLW  8F
3250:  MOVWF  xC1
3252:  MOVLW  89
3254:  MOVWF  FE9
3256:  MOVFF  441,4CA
325A:  MOVFF  440,4C9
325E:  MOVFF  43F,4C8
3262:  MOVFF  43E,4C7
3266:  MOVLW  01
3268:  MOVWF  xCB
326A:  MOVLB  0
326C:  CALL   1514
....................     
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
3270:  MOVLW  12
3272:  MOVLB  4
3274:  MOVWF  xC3
3276:  MOVLW  2D
3278:  MOVWF  xC4
327A:  MOVLW  04
327C:  MOVWF  xC6
327E:  MOVLW  8F
3280:  MOVWF  xC5
3282:  MOVLW  01
3284:  MOVWF  xC7
3286:  MOVWF  xC8
3288:  MOVLB  0
328A:  CALL   17BE
....................       
....................    sprintf(string, "L3:"); // Converte char em texto 
328E:  MOVLW  04
3290:  MOVLB  4
3292:  MOVWF  xC2
3294:  MOVLW  8F
3296:  MOVWF  xC1
3298:  MOVLW  C0
329A:  MOVWF  FF6
329C:  MOVLW  02
329E:  MOVWF  FF7
32A0:  MOVLB  0
32A2:  CALL   1966
....................    string[3] = '\0'; 
32A6:  MOVLB  4
32A8:  CLRF   x92
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
32AA:  MOVLW  01
32AC:  MOVWF  xC3
32AE:  MOVLW  2D
32B0:  MOVWF  xC4
32B2:  MOVLW  04
32B4:  MOVWF  xC6
32B6:  MOVLW  8F
32B8:  MOVWF  xC5
32BA:  MOVLW  01
32BC:  MOVWF  xC7
32BE:  MOVWF  xC8
32C0:  MOVLB  0
32C2:  CALL   17BE
....................     
....................    glcd_update();//update glcd 
32C6:  CALL   0540
32CA:  MOVLB  4
....................    
....................   }//if menu = 6 ou 7 
....................   
....................  }//if menu==1,2,3,4,5,6,7 
....................   
.................... }//void menus 
32CC:  MOVLB  0
32CE:  GOTO   39D2 (RETURN)
....................  
....................  void calculos_potencia() 
....................  { 
....................   if (menu==0&&menu_lib==0) 
*
1AB6:  MOVLB  4
1AB8:  MOVF   x7A,F
1ABA:  BTFSS  FD8.2
1ABC:  BRA    1DD2
1ABE:  MOVF   x7B,F
1AC0:  BTFSS  FD8.2
1AC2:  BRA    1DD2
....................   { 
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    corrente_media= L1+L2+L3; 
1AC4:  BCF    FD8.1
1AC6:  MOVFF  417,4CA
1ACA:  MOVFF  416,4C9
1ACE:  MOVFF  415,4C8
1AD2:  MOVFF  414,4C7
1AD6:  MOVFF  42C,4CE
1ADA:  MOVFF  42B,4CD
1ADE:  MOVFF  42A,4CC
1AE2:  MOVFF  429,4CB
1AE6:  MOVLB  0
1AE8:  CALL   0866
1AEC:  MOVFF  00,4C3
1AF0:  MOVFF  01,4C4
1AF4:  MOVFF  02,4C5
1AF8:  MOVFF  03,4C6
1AFC:  BCF    FD8.1
1AFE:  MOVFF  03,4CA
1B02:  MOVFF  02,4C9
1B06:  MOVFF  01,4C8
1B0A:  MOVFF  00,4C7
1B0E:  MOVFF  441,4CE
1B12:  MOVFF  440,4CD
1B16:  MOVFF  43F,4CC
1B1A:  MOVFF  43E,4CB
1B1E:  CALL   0866
1B22:  MOVFF  03,48B
1B26:  MOVFF  02,48A
1B2A:  MOVFF  01,489
1B2E:  MOVFF  00,488
....................    corrente_media= corrente_media/3; 
1B32:  MOVFF  48B,4CA
1B36:  MOVFF  48A,4C9
1B3A:  MOVFF  489,4C8
1B3E:  MOVFF  488,4C7
1B42:  MOVLB  4
1B44:  CLRF   xCE
1B46:  CLRF   xCD
1B48:  MOVLW  40
1B4A:  MOVWF  xCC
1B4C:  MOVLW  80
1B4E:  MOVWF  xCB
1B50:  MOVLB  0
1B52:  CALL   0ADE
1B56:  MOVFF  03,48B
1B5A:  MOVFF  02,48A
1B5E:  MOVFF  01,489
1B62:  MOVFF  00,488
....................    
....................    //calcula potencia real em Watts 
....................    pot_real=tensao_rede*corrente_media*1.732*0.85; 
1B66:  MOVFF  487,4C4
1B6A:  MOVFF  486,4C3
1B6E:  CALL   073A
1B72:  MOVFF  03,4D7
1B76:  MOVFF  02,4D6
1B7A:  MOVFF  01,4D5
1B7E:  MOVFF  00,4D4
1B82:  MOVFF  48B,4DB
1B86:  MOVFF  48A,4DA
1B8A:  MOVFF  489,4D9
1B8E:  MOVFF  488,4D8
1B92:  CALL   0770
1B96:  MOVFF  00,4C3
1B9A:  MOVFF  01,4C4
1B9E:  MOVFF  02,4C5
1BA2:  MOVFF  03,4C6
1BA6:  MOVFF  03,4D7
1BAA:  MOVFF  02,4D6
1BAE:  MOVFF  01,4D5
1BB2:  MOVFF  00,4D4
1BB6:  MOVLW  2D
1BB8:  MOVLB  4
1BBA:  MOVWF  xDB
1BBC:  MOVLW  B2
1BBE:  MOVWF  xDA
1BC0:  MOVLW  5D
1BC2:  MOVWF  xD9
1BC4:  MOVLW  7F
1BC6:  MOVWF  xD8
1BC8:  MOVLB  0
1BCA:  CALL   0770
1BCE:  MOVFF  00,4C3
1BD2:  MOVFF  01,4C4
1BD6:  MOVFF  02,4C5
1BDA:  MOVFF  03,4C6
1BDE:  MOVFF  03,4D7
1BE2:  MOVFF  02,4D6
1BE6:  MOVFF  01,4D5
1BEA:  MOVFF  00,4D4
1BEE:  MOVLW  9A
1BF0:  MOVLB  4
1BF2:  MOVWF  xDB
1BF4:  MOVLW  99
1BF6:  MOVWF  xDA
1BF8:  MOVLW  59
1BFA:  MOVWF  xD9
1BFC:  MOVLW  7E
1BFE:  MOVWF  xD8
1C00:  MOVLB  0
1C02:  CALL   0770
1C06:  MOVFF  03,4C6
1C0A:  MOVFF  02,4C5
1C0E:  MOVFF  01,4C4
1C12:  MOVFF  00,4C3
1C16:  CALL   13E0
1C1A:  MOVFF  02,484
1C1E:  MOVFF  01,483
....................     
....................    sprintf(string, "%.1lf", (float)pot_real); // Converte adc em texto 
1C22:  MOVFF  484,4C4
1C26:  MOVFF  483,4C3
1C2A:  CALL   073A
1C2E:  MOVFF  00,4C3
1C32:  MOVFF  01,4C4
1C36:  MOVFF  02,4C5
1C3A:  MOVFF  03,4C6
1C3E:  MOVLW  04
1C40:  MOVLB  4
1C42:  MOVWF  xC2
1C44:  MOVLW  8F
1C46:  MOVWF  xC1
1C48:  MOVLW  89
1C4A:  MOVWF  FE9
1C4C:  MOVFF  03,4CA
1C50:  MOVFF  02,4C9
1C54:  MOVFF  01,4C8
1C58:  MOVFF  00,4C7
1C5C:  MOVLW  01
1C5E:  MOVWF  xCB
1C60:  MOVLB  0
1C62:  RCALL  1514
....................  
....................    if(pot_real>10000) 
1C64:  MOVLB  4
1C66:  MOVF   x84,W
1C68:  SUBLW  26
1C6A:  BC    1C7C
1C6C:  XORLW  FF
1C6E:  BNZ   1C76
1C70:  MOVF   x83,W
1C72:  SUBLW  10
1C74:  BC    1C7C
....................    { 
....................      string[8] = '\0'; 
1C76:  CLRF   x97
....................      string[7] = 'W'; 
1C78:  MOVLW  57
1C7A:  MOVWF  x96
....................    } 
....................     
....................    if(pot_real<10000) 
1C7C:  MOVF   x84,W
1C7E:  SUBLW  27
1C80:  BNC   1C90
1C82:  BNZ   1C8A
1C84:  MOVF   x83,W
1C86:  SUBLW  0F
1C88:  BNC   1C90
....................    { 
....................      string[7] = '\0'; 
1C8A:  CLRF   x96
....................      string[6] = 'W'; 
1C8C:  MOVLW  57
1C8E:  MOVWF  x95
....................    } 
....................  
....................    if(pot_real<1000) 
1C90:  MOVF   x84,W
1C92:  SUBLW  03
1C94:  BNC   1CA4
1C96:  BNZ   1C9E
1C98:  MOVF   x83,W
1C9A:  SUBLW  E7
1C9C:  BNC   1CA4
....................    { 
....................      string[6] = '\0'; 
1C9E:  CLRF   x95
....................      string[5] = 'W'; 
1CA0:  MOVLW  57
1CA2:  MOVWF  x94
....................    } 
....................    if(pot_real<100) 
1CA4:  MOVF   x84,F
1CA6:  BNZ   1CB4
1CA8:  MOVF   x83,W
1CAA:  SUBLW  63
1CAC:  BNC   1CB4
....................    { 
....................      string[5] = '\0'; 
1CAE:  CLRF   x94
....................      string[4] = 'W'; 
1CB0:  MOVLW  57
1CB2:  MOVWF  x93
....................    } 
....................    if(pot_real<10) 
1CB4:  MOVF   x84,F
1CB6:  BNZ   1CC4
1CB8:  MOVF   x83,W
1CBA:  SUBLW  09
1CBC:  BNC   1CC4
....................    { 
....................      string[4] = '\0'; 
1CBE:  CLRF   x93
....................      string[3] = 'W'; 
1CC0:  MOVLW  57
1CC2:  MOVWF  x92
....................    } 
....................     
....................    glcd_text57(60, 40, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
1CC4:  MOVLW  3C
1CC6:  MOVWF  xC3
1CC8:  MOVLW  28
1CCA:  MOVWF  xC4
1CCC:  MOVLW  04
1CCE:  MOVWF  xC6
1CD0:  MOVLW  8F
1CD2:  MOVWF  xC5
1CD4:  MOVLW  01
1CD6:  MOVWF  xC7
1CD8:  MOVWF  xC8
1CDA:  MOVLB  0
1CDC:  RCALL  17BE
....................       
....................    sprintf(string, "P(Real)="); // Converte char em texto 
1CDE:  MOVLW  04
1CE0:  MOVLB  4
1CE2:  MOVWF  xC2
1CE4:  MOVLW  8F
1CE6:  MOVWF  xC1
1CE8:  MOVLW  C4
1CEA:  MOVWF  FF6
1CEC:  MOVLW  02
1CEE:  MOVWF  FF7
1CF0:  MOVLB  0
1CF2:  RCALL  1966
....................    string[8] = '\0'; 
1CF4:  MOVLB  4
1CF6:  CLRF   x97
....................    glcd_text57(1, 40, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
1CF8:  MOVLW  01
1CFA:  MOVWF  xC3
1CFC:  MOVLW  28
1CFE:  MOVWF  xC4
1D00:  MOVLW  04
1D02:  MOVWF  xC6
1D04:  MOVLW  8F
1D06:  MOVWF  xC5
1D08:  MOVLW  01
1D0A:  MOVWF  xC7
1D0C:  MOVWF  xC8
1D0E:  MOVLB  0
1D10:  RCALL  17BE
....................     
....................     
....................     
....................    //Calcula potenia em HP 
....................    pot_HP = 3*(pot_real/736); 
1D12:  MOVFF  484,4C4
1D16:  MOVFF  483,4C3
1D1A:  MOVLW  02
1D1C:  MOVLB  4
1D1E:  MOVWF  xC6
1D20:  MOVLW  E0
1D22:  MOVWF  xC5
1D24:  MOVLB  0
1D26:  BRA    1986
1D28:  MOVFF  02,4C4
1D2C:  MOVLB  4
1D2E:  MOVFF  01,4C3
1D32:  CLRF   xE5
1D34:  MOVLW  03
1D36:  MOVWF  xE4
1D38:  MOVFF  02,4E7
1D3C:  MOVFF  01,4E6
1D40:  MOVLB  0
1D42:  CALL   03E2
1D46:  MOVFF  01,485
....................       
....................    sprintf(string, "%2.0d", pot_HP); // Converte adc em texto 
1D4A:  MOVLW  04
1D4C:  MOVLB  4
1D4E:  MOVWF  xC2
1D50:  MOVLW  8F
1D52:  MOVWF  xC1
1D54:  MOVFF  485,4C3
1D58:  MOVLW  11
1D5A:  MOVWF  xC4
1D5C:  MOVLB  0
1D5E:  RCALL  19FA
....................    if(pot_HP<100) 
1D60:  MOVLB  4
1D62:  MOVF   x85,W
1D64:  SUBLW  63
1D66:  BNC   1D72
....................    { 
....................      string[5] = '\0'; 
1D68:  CLRF   x94
....................      string[4] = 'P'; 
1D6A:  MOVLW  50
1D6C:  MOVWF  x93
....................      string[3] = 'H'; 
1D6E:  MOVLW  48
1D70:  MOVWF  x92
....................    } 
....................    if(pot_HP<10) 
1D72:  MOVF   x85,W
1D74:  SUBLW  09
1D76:  BNC   1D82
....................    { 
....................      string[4] = '\0'; 
1D78:  CLRF   x93
....................      string[3] = 'P'; 
1D7A:  MOVLW  50
1D7C:  MOVWF  x92
....................      string[2] = 'H'; 
1D7E:  MOVLW  48
1D80:  MOVWF  x91
....................    } 
....................     
....................    glcd_text57(53, 50, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
1D82:  MOVLW  35
1D84:  MOVWF  xC3
1D86:  MOVLW  32
1D88:  MOVWF  xC4
1D8A:  MOVLW  04
1D8C:  MOVWF  xC6
1D8E:  MOVLW  8F
1D90:  MOVWF  xC5
1D92:  MOVLW  01
1D94:  MOVWF  xC7
1D96:  MOVWF  xC8
1D98:  MOVLB  0
1D9A:  RCALL  17BE
....................       
....................    sprintf(string, "P(HP)="); // Converte char em texto 
1D9C:  MOVLW  04
1D9E:  MOVLB  4
1DA0:  MOVWF  xC2
1DA2:  MOVLW  8F
1DA4:  MOVWF  xC1
1DA6:  MOVLW  CE
1DA8:  MOVWF  FF6
1DAA:  MOVLW  02
1DAC:  MOVWF  FF7
1DAE:  MOVLB  0
1DB0:  RCALL  1966
....................    string[8] = '\0'; 
1DB2:  MOVLB  4
1DB4:  CLRF   x97
....................    glcd_text57(1, 50, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
1DB6:  MOVLW  01
1DB8:  MOVWF  xC3
1DBA:  MOVLW  32
1DBC:  MOVWF  xC4
1DBE:  MOVLW  04
1DC0:  MOVWF  xC6
1DC2:  MOVLW  8F
1DC4:  MOVWF  xC5
1DC6:  MOVLW  01
1DC8:  MOVWF  xC7
1DCA:  MOVWF  xC8
1DCC:  MOVLB  0
1DCE:  RCALL  17BE
1DD0:  MOVLB  4
....................  
....................   } //if menu=0 
....................  } //void calculos_potencia 
1DD2:  MOVLB  0
1DD4:  GOTO   39C6 (RETURN)
....................   
....................   
.................... //............................................................................................................... 
.................... void main(void) 
.................... { 
*
3702:  CLRF   FF8
3704:  BCF    FD0.7
3706:  CLRF   FEA
3708:  CLRF   FE9
370A:  BCF    F94.2
370C:  BSF    F8B.2
370E:  MOVLB  4
3710:  CLRF   x06
3712:  CLRF   x05
3714:  CLRF   x07
3716:  CLRF   x08
3718:  CLRF   x09
371A:  CLRF   x0B
371C:  CLRF   x0A
371E:  CLRF   x0D
3720:  CLRF   x0C
3722:  CLRF   x0F
3724:  MOVLW  03
3726:  MOVWF  x0E
3728:  CLRF   x11
372A:  MOVWF  x10
372C:  CLRF   x12
372E:  MOVLW  05
3730:  MOVWF  x13
3732:  CLRF   x17
3734:  CLRF   x16
3736:  CLRF   x15
3738:  CLRF   x14
373A:  CLRF   x1B
373C:  CLRF   x1A
373E:  CLRF   x19
3740:  CLRF   x18
3742:  CLRF   x1F
3744:  CLRF   x1E
3746:  CLRF   x1D
3748:  CLRF   x1C
374A:  CLRF   x23
374C:  CLRF   x22
374E:  CLRF   x21
3750:  CLRF   x20
3752:  CLRF   x27
3754:  CLRF   x26
3756:  CLRF   x25
3758:  CLRF   x24
375A:  CLRF   x28
375C:  CLRF   x2C
375E:  CLRF   x2B
3760:  CLRF   x2A
3762:  CLRF   x29
3764:  CLRF   x30
3766:  CLRF   x2F
3768:  CLRF   x2E
376A:  CLRF   x2D
376C:  CLRF   x34
376E:  CLRF   x33
3770:  CLRF   x32
3772:  CLRF   x31
3774:  CLRF   x38
3776:  CLRF   x37
3778:  CLRF   x36
377A:  CLRF   x35
377C:  CLRF   x3C
377E:  CLRF   x3B
3780:  CLRF   x3A
3782:  CLRF   x39
3784:  CLRF   x3D
3786:  CLRF   x41
3788:  CLRF   x40
378A:  CLRF   x3F
378C:  CLRF   x3E
378E:  CLRF   x45
3790:  CLRF   x44
3792:  CLRF   x43
3794:  CLRF   x42
3796:  CLRF   x49
3798:  CLRF   x48
379A:  CLRF   x47
379C:  CLRF   x46
379E:  CLRF   x4D
37A0:  CLRF   x4C
37A2:  CLRF   x4B
37A4:  CLRF   x4A
37A6:  CLRF   x51
37A8:  CLRF   x50
37AA:  CLRF   x4F
37AC:  CLRF   x4E
37AE:  CLRF   x52
37B0:  CLRF   x56
37B2:  CLRF   x55
37B4:  CLRF   x54
37B6:  CLRF   x53
37B8:  CLRF   x5E
37BA:  CLRF   x5D
37BC:  CLRF   x5C
37BE:  CLRF   x5B
37C0:  CLRF   x66
37C2:  CLRF   x65
37C4:  CLRF   x64
37C6:  CLRF   x63
37C8:  CLRF   x6C
37CA:  CLRF   x6B
37CC:  CLRF   x6E
37CE:  CLRF   x6D
37D0:  CLRF   x70
37D2:  CLRF   x6F
37D4:  CLRF   x74
37D6:  CLRF   x73
37D8:  CLRF   x72
37DA:  CLRF   x71
37DC:  CLRF   x76
37DE:  CLRF   x75
37E0:  CLRF   x78
37E2:  CLRF   x77
37E4:  CLRF   x79
37E6:  CLRF   x7A
37E8:  CLRF   x7B
37EA:  CLRF   x7C
37EC:  CLRF   x7D
37EE:  CLRF   x84
37F0:  CLRF   x83
37F2:  CLRF   x85
37F4:  CLRF   x87
37F6:  MOVLW  DC
37F8:  MOVWF  x86
37FA:  CLRF   x8B
37FC:  CLRF   x8A
37FE:  CLRF   x89
3800:  CLRF   x88
3802:  CLRF   x8D
3804:  CLRF   x8C
3806:  CLRF   x8E
3808:  CLRF   xC2
380A:  CLRF   xC1
380C:  BSF    FC1.0
380E:  BSF    FC1.1
3810:  BSF    FC1.2
3812:  BCF    FC1.3
....................     
....................    setup_ADC_ports (AN0_AN1_AN3);         //Habilita portas Analógicas 
3814:  BCF    FC1.0
3816:  BCF    FC1.1
3818:  BSF    FC1.2
381A:  BCF    FC1.3
....................    setup_ADC(ADC_CLOCK_INTERNAL);         //Conversor AD em 4MHz (CLOCK INTERNO) 
381C:  BCF    FC1.6
381E:  BSF    FC2.6
3820:  BSF    FC2.7
3822:  BSF    FC1.7
3824:  BSF    FC2.0
....................    delay_ms(1); 
3826:  MOVLW  01
3828:  MOVWF  xC3
382A:  MOVLB  0
382C:  CALL   02D6
....................    glcd_init_graph();                     //glcd modo graphico 
3830:  GOTO   064C
....................    delay_ms(1); 
3834:  MOVLW  01
3836:  MOVLB  4
3838:  MOVWF  xC3
383A:  MOVLB  0
383C:  CALL   02D6
....................    glcd_fillScreen(off);                  //glcd clear full pixel 0 
3840:  MOVLB  4
3842:  CLRF   xC3
3844:  MOVLB  0
3846:  CALL   0404
....................    delay_ms(1); 
384A:  MOVLW  01
384C:  MOVLB  4
384E:  MOVWF  xC3
3850:  MOVLB  0
3852:  CALL   02D6
....................    glcd_update();                         //glcd update   
3856:  CALL   0540
....................    enable_interrupts(int_rda);            //Habilita interrupções 
385A:  BSF    F9D.5
....................    enable_interrupts(global);             //Habilita interrupções globais 
385C:  MOVLW  C0
385E:  IORWF  FF2,F
....................     
....................     
....................    // LÊ VALORES ANTES SALVOS NA MEMORIA EEPROM 
....................    TempoET=              read_eeprom (1);             
3860:  MOVFF  FF2,4C3
3864:  BCF    FF2.7
3866:  MOVLW  01
3868:  MOVWF  FA9
386A:  BCF    FA6.6
386C:  BCF    FA6.7
386E:  BSF    FA6.0
3870:  MOVF   FA8,W
3872:  MOVLB  4
3874:  BTFSC  xC3.7
3876:  BSF    FF2.7
3878:  MOVWF  x7E
....................    offset_L1=            read_int16_eeprom (10); 
387A:  MOVLW  0A
387C:  MOVWF  xC3
387E:  MOVLB  0
3880:  CALL   06E6
3884:  MOVFF  02,4C4
3888:  MOVFF  01,4C3
388C:  CALL   073A
3890:  MOVFF  03,41B
3894:  MOVFF  02,41A
3898:  MOVFF  01,419
389C:  MOVFF  00,418
....................    ref_L1=               read_int16_eeprom (20); 
38A0:  MOVLW  14
38A2:  MOVLB  4
38A4:  MOVWF  xC3
38A6:  MOVLB  0
38A8:  CALL   06E6
38AC:  MOVFF  02,4C4
38B0:  MOVFF  01,4C3
38B4:  CALL   073A
38B8:  MOVFF  03,41F
38BC:  MOVFF  02,41E
38C0:  MOVFF  01,41D
38C4:  MOVFF  00,41C
....................    offset_L2=            read_int16_eeprom (30); 
38C8:  MOVLW  1E
38CA:  MOVLB  4
38CC:  MOVWF  xC3
38CE:  MOVLB  0
38D0:  CALL   06E6
38D4:  MOVFF  02,4C4
38D8:  MOVFF  01,4C3
38DC:  CALL   073A
38E0:  MOVFF  03,430
38E4:  MOVFF  02,42F
38E8:  MOVFF  01,42E
38EC:  MOVFF  00,42D
....................    ref_L2=               read_int16_eeprom (40); 
38F0:  MOVLW  28
38F2:  MOVLB  4
38F4:  MOVWF  xC3
38F6:  MOVLB  0
38F8:  CALL   06E6
38FC:  MOVFF  02,4C4
3900:  MOVFF  01,4C3
3904:  CALL   073A
3908:  MOVFF  03,434
390C:  MOVFF  02,433
3910:  MOVFF  01,432
3914:  MOVFF  00,431
....................    offset_L3=            read_int16_eeprom (50); 
3918:  MOVLW  32
391A:  MOVLB  4
391C:  MOVWF  xC3
391E:  MOVLB  0
3920:  CALL   06E6
3924:  MOVFF  02,4C4
3928:  MOVFF  01,4C3
392C:  CALL   073A
3930:  MOVFF  03,445
3934:  MOVFF  02,444
3938:  MOVFF  01,443
393C:  MOVFF  00,442
....................    ref_L3=               read_int16_eeprom (60); 
3940:  MOVLW  3C
3942:  MOVLB  4
3944:  MOVWF  xC3
3946:  MOVLB  0
3948:  CALL   06E6
394C:  MOVFF  02,4C4
3950:  MOVFF  01,4C3
3954:  CALL   073A
3958:  MOVFF  03,449
395C:  MOVFF  02,448
3960:  MOVFF  01,447
3964:  MOVFF  00,446
....................     
....................    def_eeprom=          read_eeprom (70); 
3968:  MOVFF  FF2,4C3
396C:  BCF    FF2.7
396E:  MOVLW  46
3970:  MOVWF  FA9
3972:  BCF    FA6.6
3974:  BCF    FA6.7
3976:  BSF    FA6.0
3978:  MOVF   FA8,W
397A:  MOVLB  4
397C:  BTFSC  xC3.7
397E:  BSF    FF2.7
3980:  MOVWF  x8E
....................     
....................    //Valores default de calibração 
....................    if(def_eeprom!=6) 
3982:  MOVF   x8E,W
3984:  SUBLW  06
3986:  BZ    39BC
....................    { 
....................     Offset_L1=0;       //offset sensor 1 
3988:  CLRF   x1B
398A:  CLRF   x1A
398C:  CLRF   x19
398E:  CLRF   x18
....................     ref_L1=0;            //Referencia sensor 1 
3990:  CLRF   x1F
3992:  CLRF   x1E
3994:  CLRF   x1D
3996:  CLRF   x1C
....................     Offset_L2=0;       //offset sensor 2 
3998:  CLRF   x30
399A:  CLRF   x2F
399C:  CLRF   x2E
399E:  CLRF   x2D
....................     ref_L2=0;      
39A0:  CLRF   x34
39A2:  CLRF   x33
39A4:  CLRF   x32
39A6:  CLRF   x31
....................     Offset_L3=0;       //offset sensor 2 
39A8:  CLRF   x45
39AA:  CLRF   x44
39AC:  CLRF   x43
39AE:  CLRF   x42
....................     ref_L3=0;            //Referencia sensor 2 
39B0:  CLRF   x49
39B2:  CLRF   x48
39B4:  CLRF   x47
39B6:  CLRF   x46
....................     TempoET=25; 
39B8:  MOVLW  19
39BA:  MOVWF  x7E
....................    } 
....................     
....................     
....................     
....................     
....................     
.................... //.................................................................................................................    
....................    while (true) //loop principal 
....................    {   
....................       //Fluxo Principal 
....................       leitura_sensores(); 
39BC:  MOVLB  0
39BE:  GOTO   0CB6
....................       calculos_potencia(); 
39C2:  GOTO   1AB6
....................       glcd_update();                       
39C6:  CALL   0540
....................       controle_menu(); 
39CA:  GOTO   1DD8
....................       menus(); 
39CE:  GOTO   219E
....................       controle_saidas(); 
39D2:  BRA    32D2
....................        
....................        
....................       //Salva valores na EEPROM 
....................       leituraEeprom=read_eeprom(1); 
39D4:  MOVFF  FF2,4C3
39D8:  BCF    FF2.7
39DA:  MOVLW  01
39DC:  MOVWF  FA9
39DE:  BCF    FA6.6
39E0:  BCF    FA6.7
39E2:  BSF    FA6.0
39E4:  MOVF   FA8,W
39E6:  MOVLB  4
39E8:  BTFSC  xC3.7
39EA:  BSF    FF2.7
39EC:  CLRF   x8D
39EE:  MOVWF  x8C
....................       if(leituraEeprom!=TempoET) 
39F0:  MOVF   x7E,W
39F2:  SUBWF  x8C,W
39F4:  BNZ   39FA
39F6:  MOVF   x8D,F
39F8:  BZ    3A26
....................       {write_eeprom(1,TempoET);} 
39FA:  MOVLW  01
39FC:  MOVWF  FA9
39FE:  MOVFF  47E,FA8
3A02:  BCF    FA6.6
3A04:  BCF    FA6.7
3A06:  BSF    FA6.2
3A08:  MOVF   FF2,W
3A0A:  MOVWF  00
3A0C:  BCF    FF2.7
3A0E:  MOVLB  F
3A10:  MOVLW  55
3A12:  MOVWF  FA7
3A14:  MOVLW  AA
3A16:  MOVWF  FA7
3A18:  BSF    FA6.1
3A1A:  BTFSC  FA6.1
3A1C:  BRA    3A1A
3A1E:  BCF    FA6.2
3A20:  MOVF   00,W
3A22:  IORWF  FF2,F
3A24:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(10); 
3A26:  MOVLW  0A
3A28:  MOVWF  xC3
3A2A:  MOVLB  0
3A2C:  CALL   06E6
3A30:  MOVFF  02,48D
3A34:  MOVFF  01,48C
....................       if(leituraEeprom!=offset_L1) 
3A38:  MOVFF  48D,4C4
3A3C:  MOVFF  48C,4C3
3A40:  CALL   073A
3A44:  MOVFF  03,4C6
3A48:  MOVFF  02,4C5
3A4C:  MOVFF  01,4C4
3A50:  MOVFF  00,4C3
3A54:  MOVFF  41B,4CA
3A58:  MOVFF  41A,4C9
3A5C:  MOVFF  419,4C8
3A60:  MOVFF  418,4C7
3A64:  CALL   0C3C
3A68:  BZ    3A98
....................       {write_int16_eeprom(10,offset_L1);} 
3A6A:  MOVFF  41B,4C6
3A6E:  MOVFF  41A,4C5
3A72:  MOVFF  419,4C4
3A76:  MOVFF  418,4C3
3A7A:  CALL   13E0
3A7E:  MOVFF  02,4C4
3A82:  MOVFF  01,4C3
3A86:  MOVLW  0A
3A88:  MOVLB  4
3A8A:  MOVWF  xC5
3A8C:  MOVFF  02,4C7
3A90:  MOVFF  01,4C6
3A94:  MOVLB  0
3A96:  RCALL  369E
....................        
....................       leituraEeprom=read_int16_eeprom(20); 
3A98:  MOVLW  14
3A9A:  MOVLB  4
3A9C:  MOVWF  xC3
3A9E:  MOVLB  0
3AA0:  CALL   06E6
3AA4:  MOVFF  02,48D
3AA8:  MOVFF  01,48C
....................       if(leituraEeprom!=ref_L1) 
3AAC:  MOVFF  48D,4C4
3AB0:  MOVFF  48C,4C3
3AB4:  CALL   073A
3AB8:  MOVFF  03,4C6
3ABC:  MOVFF  02,4C5
3AC0:  MOVFF  01,4C4
3AC4:  MOVFF  00,4C3
3AC8:  MOVFF  41F,4CA
3ACC:  MOVFF  41E,4C9
3AD0:  MOVFF  41D,4C8
3AD4:  MOVFF  41C,4C7
3AD8:  CALL   0C3C
3ADC:  BZ    3B0C
....................       {write_int16_eeprom(20,ref_L1);} 
3ADE:  MOVFF  41F,4C6
3AE2:  MOVFF  41E,4C5
3AE6:  MOVFF  41D,4C4
3AEA:  MOVFF  41C,4C3
3AEE:  CALL   13E0
3AF2:  MOVFF  02,4C4
3AF6:  MOVFF  01,4C3
3AFA:  MOVLW  14
3AFC:  MOVLB  4
3AFE:  MOVWF  xC5
3B00:  MOVFF  02,4C7
3B04:  MOVFF  01,4C6
3B08:  MOVLB  0
3B0A:  RCALL  369E
....................        
....................       leituraEeprom=read_int16_eeprom(30); 
3B0C:  MOVLW  1E
3B0E:  MOVLB  4
3B10:  MOVWF  xC3
3B12:  MOVLB  0
3B14:  CALL   06E6
3B18:  MOVFF  02,48D
3B1C:  MOVFF  01,48C
....................       if(leituraEeprom!=offset_L2) 
3B20:  MOVFF  48D,4C4
3B24:  MOVFF  48C,4C3
3B28:  CALL   073A
3B2C:  MOVFF  03,4C6
3B30:  MOVFF  02,4C5
3B34:  MOVFF  01,4C4
3B38:  MOVFF  00,4C3
3B3C:  MOVFF  430,4CA
3B40:  MOVFF  42F,4C9
3B44:  MOVFF  42E,4C8
3B48:  MOVFF  42D,4C7
3B4C:  CALL   0C3C
3B50:  BZ    3B80
....................       {write_int16_eeprom(30,offset_L2);} 
3B52:  MOVFF  430,4C6
3B56:  MOVFF  42F,4C5
3B5A:  MOVFF  42E,4C4
3B5E:  MOVFF  42D,4C3
3B62:  CALL   13E0
3B66:  MOVFF  02,4C4
3B6A:  MOVFF  01,4C3
3B6E:  MOVLW  1E
3B70:  MOVLB  4
3B72:  MOVWF  xC5
3B74:  MOVFF  02,4C7
3B78:  MOVFF  01,4C6
3B7C:  MOVLB  0
3B7E:  RCALL  369E
....................        
....................       leituraEeprom=read_int16_eeprom(40); 
3B80:  MOVLW  28
3B82:  MOVLB  4
3B84:  MOVWF  xC3
3B86:  MOVLB  0
3B88:  CALL   06E6
3B8C:  MOVFF  02,48D
3B90:  MOVFF  01,48C
....................       if(leituraEeprom!=ref_L2) 
3B94:  MOVFF  48D,4C4
3B98:  MOVFF  48C,4C3
3B9C:  CALL   073A
3BA0:  MOVFF  03,4C6
3BA4:  MOVFF  02,4C5
3BA8:  MOVFF  01,4C4
3BAC:  MOVFF  00,4C3
3BB0:  MOVFF  434,4CA
3BB4:  MOVFF  433,4C9
3BB8:  MOVFF  432,4C8
3BBC:  MOVFF  431,4C7
3BC0:  CALL   0C3C
3BC4:  BZ    3BF4
....................       {write_int16_eeprom(40,ref_L2);} 
3BC6:  MOVFF  434,4C6
3BCA:  MOVFF  433,4C5
3BCE:  MOVFF  432,4C4
3BD2:  MOVFF  431,4C3
3BD6:  CALL   13E0
3BDA:  MOVFF  02,4C4
3BDE:  MOVFF  01,4C3
3BE2:  MOVLW  28
3BE4:  MOVLB  4
3BE6:  MOVWF  xC5
3BE8:  MOVFF  02,4C7
3BEC:  MOVFF  01,4C6
3BF0:  MOVLB  0
3BF2:  RCALL  369E
....................        
....................       leituraEeprom=read_int16_eeprom(50); 
3BF4:  MOVLW  32
3BF6:  MOVLB  4
3BF8:  MOVWF  xC3
3BFA:  MOVLB  0
3BFC:  CALL   06E6
3C00:  MOVFF  02,48D
3C04:  MOVFF  01,48C
....................       if(leituraEeprom!=offset_L3) 
3C08:  MOVFF  48D,4C4
3C0C:  MOVFF  48C,4C3
3C10:  CALL   073A
3C14:  MOVFF  03,4C6
3C18:  MOVFF  02,4C5
3C1C:  MOVFF  01,4C4
3C20:  MOVFF  00,4C3
3C24:  MOVFF  445,4CA
3C28:  MOVFF  444,4C9
3C2C:  MOVFF  443,4C8
3C30:  MOVFF  442,4C7
3C34:  CALL   0C3C
3C38:  BZ    3C68
....................       {write_int16_eeprom(50,offset_L3);} 
3C3A:  MOVFF  445,4C6
3C3E:  MOVFF  444,4C5
3C42:  MOVFF  443,4C4
3C46:  MOVFF  442,4C3
3C4A:  CALL   13E0
3C4E:  MOVFF  02,4C4
3C52:  MOVFF  01,4C3
3C56:  MOVLW  32
3C58:  MOVLB  4
3C5A:  MOVWF  xC5
3C5C:  MOVFF  02,4C7
3C60:  MOVFF  01,4C6
3C64:  MOVLB  0
3C66:  RCALL  369E
....................        
....................       leituraEeprom=read_int16_eeprom(60); 
3C68:  MOVLW  3C
3C6A:  MOVLB  4
3C6C:  MOVWF  xC3
3C6E:  MOVLB  0
3C70:  CALL   06E6
3C74:  MOVFF  02,48D
3C78:  MOVFF  01,48C
....................       if(leituraEeprom!=ref_L3) 
3C7C:  MOVFF  48D,4C4
3C80:  MOVFF  48C,4C3
3C84:  CALL   073A
3C88:  MOVFF  03,4C6
3C8C:  MOVFF  02,4C5
3C90:  MOVFF  01,4C4
3C94:  MOVFF  00,4C3
3C98:  MOVFF  449,4CA
3C9C:  MOVFF  448,4C9
3CA0:  MOVFF  447,4C8
3CA4:  MOVFF  446,4C7
3CA8:  CALL   0C3C
3CAC:  BZ    3CDC
....................       {write_int16_eeprom(60,ref_L3);} 
3CAE:  MOVFF  449,4C6
3CB2:  MOVFF  448,4C5
3CB6:  MOVFF  447,4C4
3CBA:  MOVFF  446,4C3
3CBE:  CALL   13E0
3CC2:  MOVFF  02,4C4
3CC6:  MOVFF  01,4C3
3CCA:  MOVLW  3C
3CCC:  MOVLB  4
3CCE:  MOVWF  xC5
3CD0:  MOVFF  02,4C7
3CD4:  MOVFF  01,4C6
3CD8:  MOVLB  0
3CDA:  RCALL  369E
....................        
....................       def_eeprom=6; 
3CDC:  MOVLW  06
3CDE:  MOVLB  4
3CE0:  MOVWF  x8E
....................       leituraEeprom=read_eeprom(70); 
3CE2:  MOVFF  FF2,4C3
3CE6:  BCF    FF2.7
3CE8:  MOVLW  46
3CEA:  MOVWF  FA9
3CEC:  BCF    FA6.6
3CEE:  BCF    FA6.7
3CF0:  BSF    FA6.0
3CF2:  MOVF   FA8,W
3CF4:  BTFSC  xC3.7
3CF6:  BSF    FF2.7
3CF8:  CLRF   x8D
3CFA:  MOVWF  x8C
....................       if(leituraEeprom!=def_eeprom) 
3CFC:  MOVF   x8E,W
3CFE:  SUBWF  x8C,W
3D00:  BNZ   3D06
3D02:  MOVF   x8D,F
3D04:  BZ    3D32
....................       {write_eeprom( 70,def_eeprom);} 
3D06:  MOVLW  46
3D08:  MOVWF  FA9
3D0A:  MOVFF  48E,FA8
3D0E:  BCF    FA6.6
3D10:  BCF    FA6.7
3D12:  BSF    FA6.2
3D14:  MOVF   FF2,W
3D16:  MOVWF  00
3D18:  BCF    FF2.7
3D1A:  MOVLB  F
3D1C:  MOVLW  55
3D1E:  MOVWF  FA7
3D20:  MOVLW  AA
3D22:  MOVWF  FA7
3D24:  BSF    FA6.1
3D26:  BTFSC  FA6.1
3D28:  BRA    3D26
3D2A:  BCF    FA6.2
3D2C:  MOVF   00,W
3D2E:  IORWF  FF2,F
3D30:  MOVLB  4
....................        
....................    }//loop principal 
3D32:  BRA    39BC
.................... }//main 
3D34:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C000   PROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
