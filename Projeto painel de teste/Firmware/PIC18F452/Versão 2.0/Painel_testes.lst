CCS PCH C Compiler, Version 4.135, 38112               22-jul-20 16:19

               Filename: C:\Users\Henrique\Desktop\Projeto painel de teste\Firmware\PIC18F452\Versão 2.0\Painel_testes.lst

               ROM used: 17618 bytes (54%)
                         Largest free fragment is 15150
               RAM used: 1148 (75%) at main() level
                         1533 (100%) worst case
               Stack:    5 locations

*
0000:  GOTO   3FC2
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... //Painel de testes de motores AC com sensores de corrente e tensão. Programado por: Henrique Xavier                                                                        // 
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F452.H> 
.................... //////// Standard Header file for the PIC18F452 device //////////////// 
.................... #device PIC18F452 
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay (clock=16000000) 
*
03C6:  MOVLW  05
03C8:  MOVWF  FEA
03CA:  MOVLW  D7
03CC:  MOVWF  FE9
03CE:  MOVF   FEF,W
03D0:  BZ    03EE
03D2:  MOVLW  05
03D4:  MOVWF  01
03D6:  CLRF   00
03D8:  DECFSZ 00,F
03DA:  BRA    03D8
03DC:  DECFSZ 01,F
03DE:  BRA    03D6
03E0:  MOVLW  2E
03E2:  MOVWF  00
03E4:  DECFSZ 00,F
03E6:  BRA    03E4
03E8:  BRA    03EA
03EA:  DECFSZ FEF,F
03EC:  BRA    03D2
03EE:  RETURN 0
.................... #fuses HS, NOWDT, PUT, NOBROWNOUT, NOLVP, PROTECT 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C2,rcv=PIN_C7,bits=8)// Pino RC2 é Tx e o Pino Rx é o Pino RC7 
....................  
.................... #define mode_4_bit       //GLCD Operando em 4 bits 
.................... #include <st7920.c>      //Biblioteca do GLCD 128x64 
....................  
.................... /*************************************************************************** 
.................... *                DRIVE PARA LCD GRAFICO 128X64 CHIP ST7920                 * 
.................... *   COMANDOS                                                               * 
.................... *   #define mode_8_bit user lcd mode 8 bit 
.................... *   #define mode_4_bit user lcd mode 4 bit 
.................... *   glcd_readByte()//LER DADOS DO LCD                                      * 
.................... *   glcd_check_busy()//VERIFICA SE LCD ESTA OCUPADO                        *                              * 
.................... *   glcd_instruction(instruções)//SETA INTRUÇÕES                           * 
.................... *   glcd_data(dados)//ENVIA DADOS PARA LCD                                 * 
.................... *   glcd_init_basic()//INICIA LCD  COMO MODO BASICO                        * 
.................... *   glcd_update()//ATUALIZA LCD                                            * 
.................... *   glcd_init_graph()//INICIA LCD MODO GRAFICO                             * 
.................... *   glcd_pixel( x,  y, color)//CONTROLE DE PIXEL                           * 
.................... *   glcd_fillScreen(on)//ENVIO NIVEL 1 PARA TODOS OS PIXEL DO LCD          * 
.................... *   glcd_fillScreen(off)//ENVIA NIVEL 0 PARA TODOS OS PIXEL DO LCD         * 
.................... *   glcd_plot_image(imagem,largura,altura,coluna,linha,cor) carrega imagem * 
.................... *                                                                          *                  
.................... *   PINAGEM DO LCD                                                         * 
.................... *   Pin 1 ------------> Gnd                                                *    
.................... *   Pin 2 ------------> +5volts                                            * 
.................... *   Pin 3 ------------> Contrast                                           * 
.................... *   Pin 4 ------------> Register Select                                    * 
.................... *   Pin 5 ------------> Read/Write                                         * 
.................... *   Pin 6 ------------> Enable                                             * 
.................... *   Pin 7-14 ---------> Data bits                                          * 
.................... *   Pin 15 -----------> PSB (parallel=high & serial=low)                   * 
.................... *   Pin 16 -----------> NoConnection                                       * 
.................... *   Pin 17 -----------> Reset                                              * 
.................... *   Pin 18 -----------> Vout                                               * 
.................... *   Pin 19 -----------> +5volts                                            * 
.................... *   Pin 20 -----------> Gnd                                                * 
.................... *                                                                          *  
.................... ***************************************************************************/ 
.................... //DEFINIÇÃO DE PINOS 
.................... //PIN DEFINITION 
.................... #define  RS        PIN_B2                    //COMMNAD/DATA SELECT 
.................... #define  RW        PIN_B3                    //READ/WRITE SELECT              
.................... #define  E         PIN_B4                    //ENABLE SIGNAL                  
.................... #define  RST       PIN_B5                    //RESET SIGNAL  
....................  
.................... #if defined(mode_8_bit)// define pin lcd 8 bit 
.................... #define  D0        PIN_D0 
.................... #define  D1        PIN_D1 
.................... #define  D2        PIN_D2 
.................... #define  D3        PIN_D3 
.................... #define  D4        PIN_D4 
.................... #define  D5        PIN_D5 
.................... #define  D6        PIN_D6 
.................... #define  D7        PIN_D7 
.................... #define mode       0x10 
.................... #endif 
....................  
.................... #if defined(mode_4_bit)// define pin lcd 4 bit 
.................... #define  D4        PIN_D4 
.................... #define  D5        PIN_D5 
.................... #define  D6        PIN_D6 
.................... #define  D7        PIN_D7 
.................... #define mode       0x00  
.................... #endif 
....................  
.................... #define  set_lcd_bit  0x20 | (mode) //mode 4 bit 
.................... #define  ext_instru   0x24 | (mode) //Select extended instruction set 
.................... #define  graphic_on   0x26 | (mode) // Graphic display ON.  
.................... #define  set_lcd_on   0x0C //display on cursor off and char blink off 
.................... #define  set_mode_lcd 0x06 //entry mode set 
.................... #define  clear_lcd    0x01 //display clear 
....................  
.................... #define  DADOS_IN  INPUT_D() 
.................... #define  BUSY_IN   PIN_D7 
.................... #define  ON   1 
.................... #define  OFF   0 
.................... //LCD GRAPHICO 128X64 
.................... #define  YVAL 64 // DEFINE 64 LINHAS 
.................... #define  XVAL 8 // DEFINE COLUNAS 8X16=128 COLUNAS 
....................  
.................... #define GLCD_WIDTH   128 //DEFINE 128 COLUNAS  
....................  
.................... typedef union 
.................... { 
....................   int16 word; 
....................   int8 nbyte[2]; 
.................... } Dots; 
....................  
.................... typedef struct 
.................... { 
....................   int1 refresh; 
....................   Dots pix[YVAL][XVAL];   // Max dimensions for display (x,y) = (128,32) 
....................   } GD_RAM;             //  (0,0) corresponds to upper lefthand corner. 
....................  
.................... GD_RAM gdram; 
....................  
....................  
.................... unsigned int8 glcd_readByte (unsigned int1 address)//LER BYTE DO LCD 
.................... { 
....................   unsigned int8 data;   // Stores the data read from the LCD 
....................   if(address==1) 
....................   { 
....................      output_high(rs); 
....................   } 
....................   if(address==0) 
....................   { 
....................      output_low(rs); 
....................   } 
....................   output_high(rw);//GLCD_RW = RW_READ;      // Set for reading 
....................   output_high(e);//GLCD_E = 1;      // Pulse the enable pin 
....................   delay_us(1); 
....................   data=DADOS_IN;      // Get the data from the display's output register 
....................   output_low(e);//GLCD_E = 0; 
....................   return (data); 
.................... } 
....................  
....................   
.................... void glcd_check_busy()//VERIFICA SE LCD ESTA OCUPADO 
.................... { 
03F0:  MOVLB  5
03F2:  BSF    xDD.0
....................    int1 busy=1; 
....................    output_low(rs);      // LOW RS and High RW will put the lcd to 
03F4:  BCF    F93.2
03F6:  BCF    F8A.2
....................    output_high(rw);      // read busy flag and address counter 
03F8:  BCF    F93.3
03FA:  BSF    F8A.3
....................    while(busy) 
....................    {         // will cycle until busy flag is 0 
03FC:  BTFSS  xDD.0
03FE:  BRA    0412
....................       output_high(e); 
0400:  BCF    F93.4
0402:  BSF    F8A.4
....................       if(!input(BUSY_IN)) 
0404:  BSF    F95.7
0406:  BTFSC  F83.7
0408:  BRA    040C
....................       { 
....................          busy=0; 
040A:  BCF    xDD.0
....................       } 
....................       output_low(e); 
040C:  BCF    F93.4
040E:  BCF    F8A.4
....................    } 
0410:  BRA    03FC
.................... } 
0412:  MOVLB  0
0414:  RETURN 0
....................   
.................... void glcd_instruction(unsigned char x)//ENVIA INSTRUÇÕES PARA LCD 
.................... { 
....................   #if defined(mode_8_bit)// 8 bit mode 
....................    glcd_check_busy();      //must be satisfied before sending instruction 
....................    output_low(rs);      // LOW RS and LOW RW will put the lcd to 
....................    output_low(rw);      // Write instruction mode    
....................    Delay_us(5);  //Delay 
....................    output_bit(D7,bit_test(x,7)); //send data bit 7 pin D7 
....................    output_bit(D6,bit_test(x,6)); //send data bit 6 pin D6 
....................    output_bit(D5,bit_test(x,5)); //send data bit 5 pin D5 
....................    output_bit(D4,bit_test(x,4)); //send data bit 4 pin D4 
....................    output_bit(D3,bit_test(x,3)); //send data bit 3 pin D3  
....................    output_bit(D2,bit_test(x,2)); //send data bit 2 pin D2 
....................    output_bit(D1,bit_test(x,1)); //send data bit 1 pin D1 
....................    output_bit(D0,bit_test(x,0)); //send data bit 0 pin D0 
....................    Delay_us(10); 
....................    output_high(e);//anable 
....................    Delay_us(20); 
....................    output_low(e);// disable        
....................    #endif 
....................  #if defined(mode_4_bit) // 4 bit mode 
....................    glcd_check_busy();      //must be satisfied before sending instruction 
0416:  RCALL  03F0
....................    output_low(rs);      // LOW RS and LOW RW will put the lcd to 
0418:  BCF    F93.2
041A:  BCF    F8A.2
....................    output_low(rw);      // Write instruction mode    
041C:  BCF    F93.3
041E:  BCF    F8A.3
....................    Delay_us(5);//Delay 
0420:  MOVLW  06
0422:  MOVWF  00
0424:  DECFSZ 00,F
0426:  BRA    0424
0428:  NOP   
....................    output_bit(D7,bit_test(x,7));  
042A:  MOVLB  5
042C:  BTFSC  xDA.7
042E:  BRA    0434
0430:  BCF    F8C.7
0432:  BRA    0436
0434:  BSF    F8C.7
0436:  BCF    F95.7
....................    output_bit(D6,bit_test(x,6)); 
0438:  BTFSC  xDA.6
043A:  BRA    0440
043C:  BCF    F8C.6
043E:  BRA    0442
0440:  BSF    F8C.6
0442:  BCF    F95.6
....................    output_bit(D5,bit_test(x,5)); 
0444:  BTFSC  xDA.5
0446:  BRA    044C
0448:  BCF    F8C.5
044A:  BRA    044E
044C:  BSF    F8C.5
044E:  BCF    F95.5
....................    output_bit(D4,bit_test(x,4)); 
0450:  BTFSC  xDA.4
0452:  BRA    0458
0454:  BCF    F8C.4
0456:  BRA    045A
0458:  BSF    F8C.4
045A:  BCF    F95.4
....................    Delay_us(5); 
045C:  MOVLW  06
045E:  MOVWF  00
0460:  DECFSZ 00,F
0462:  BRA    0460
0464:  NOP   
....................    output_high(e); //enable 
0466:  BCF    F93.4
0468:  BSF    F8A.4
....................    Delay_us(5); 
046A:  MOVLW  06
046C:  MOVWF  00
046E:  DECFSZ 00,F
0470:  BRA    046E
0472:  NOP   
....................    output_low(e); //disable 
0474:  BCF    F93.4
0476:  BCF    F8A.4
....................    Delay_us(5); 
0478:  MOVLW  06
047A:  MOVWF  00
047C:  DECFSZ 00,F
047E:  BRA    047C
0480:  NOP   
....................    output_bit(D7,bit_test(x,3));//send data low bit 3 pin D7  
0482:  BTFSC  xDA.3
0484:  BRA    048A
0486:  BCF    F8C.7
0488:  BRA    048C
048A:  BSF    F8C.7
048C:  BCF    F95.7
....................    output_bit(D6,bit_test(x,2));//send data low bit 2 pin D6 
048E:  BTFSC  xDA.2
0490:  BRA    0496
0492:  BCF    F8C.6
0494:  BRA    0498
0496:  BSF    F8C.6
0498:  BCF    F95.6
....................    output_bit(D5,bit_test(x,1));//send data low bit 1 pin D5 
049A:  BTFSC  xDA.1
049C:  BRA    04A2
049E:  BCF    F8C.5
04A0:  BRA    04A4
04A2:  BSF    F8C.5
04A4:  BCF    F95.5
....................    output_bit(D4,bit_test(x,0));//send data low bit 0 pin D4 
04A6:  BTFSC  xDA.0
04A8:  BRA    04AE
04AA:  BCF    F8C.4
04AC:  BRA    04B0
04AE:  BSF    F8C.4
04B0:  BCF    F95.4
....................    Delay_us(5); 
04B2:  MOVLW  06
04B4:  MOVWF  00
04B6:  DECFSZ 00,F
04B8:  BRA    04B6
04BA:  NOP   
....................    output_high(e); 
04BC:  BCF    F93.4
04BE:  BSF    F8A.4
....................    Delay_us(5); 
04C0:  MOVLW  06
04C2:  MOVWF  00
04C4:  DECFSZ 00,F
04C6:  BRA    04C4
04C8:  NOP   
....................    output_low(e); // disable  
04CA:  BCF    F93.4
04CC:  BCF    F8A.4
....................    #endif 
....................  
.................... } 
04CE:  MOVLB  0
04D0:  RETURN 0
.................... void glcd_data(unsigned char x)//ENVIA DADOS PARA LCD 
.................... { 
....................   #if defined(mode_8_bit) // 8 bit mode 
....................    glcd_check_busy(); 
....................    output_high(rs);      // HIGH RS and LOW RW will put the lcd to 
....................    output_low(rw);      // Write data register mode 
....................    Delay_us(5); 
....................    output_bit(D7,bit_test(x,7)); //send data bit 7 pin D7 
....................    output_bit(D6,bit_test(x,6)); //send data bit 6 pin D6 
....................    output_bit(D5,bit_test(x,5)); //send data bit 5 pin D5 
....................    output_bit(D4,bit_test(x,4)); //send data bit 4 pin D4 
....................    output_bit(D3,bit_test(x,3)); //send data bit 3 pin D3  
....................    output_bit(D2,bit_test(x,2)); //send data bit 2 pin D2 
....................    output_bit(D1,bit_test(x,1)); //send data bit 1 pin D1 
....................    output_bit(D0,bit_test(x,0)); //send data bit 0 pin D0 
....................    Delay_us(10); 
....................    output_high(e); 
....................    Delay_us(20); 
....................    output_low(e); // disable 
....................    #endif 
....................     
....................    #if defined(mode_4_bit) // 4 bit mode 
....................    glcd_check_busy();  
*
0574:  RCALL  03F0
....................    output_high(rs);      // HIGH RS and LOW RW will put the lcd to 
0576:  BCF    F93.2
0578:  BSF    F8A.2
....................    output_low(rw);      // Write data register mode    
057A:  BCF    F93.3
057C:  BCF    F8A.3
....................    Delay_us(5); 
057E:  MOVLW  06
0580:  MOVWF  00
0582:  DECFSZ 00,F
0584:  BRA    0582
0586:  NOP   
....................    output_bit(D7,bit_test(x,7));//send data high bit 7 pin D7  
0588:  MOVLB  5
058A:  BTFSC  xDC.7
058C:  BRA    0592
058E:  BCF    F8C.7
0590:  BRA    0594
0592:  BSF    F8C.7
0594:  BCF    F95.7
....................    output_bit(D6,bit_test(x,6));//send data high bit 6 pin D6 
0596:  BTFSC  xDC.6
0598:  BRA    059E
059A:  BCF    F8C.6
059C:  BRA    05A0
059E:  BSF    F8C.6
05A0:  BCF    F95.6
....................    output_bit(D5,bit_test(x,5));//send data high bit 5 pin D5 
05A2:  BTFSC  xDC.5
05A4:  BRA    05AA
05A6:  BCF    F8C.5
05A8:  BRA    05AC
05AA:  BSF    F8C.5
05AC:  BCF    F95.5
....................    output_bit(D4,bit_test(x,4));//send data high bit 4 pin D4 
05AE:  BTFSC  xDC.4
05B0:  BRA    05B6
05B2:  BCF    F8C.4
05B4:  BRA    05B8
05B6:  BSF    F8C.4
05B8:  BCF    F95.4
....................    Delay_us(5); 
05BA:  MOVLW  06
05BC:  MOVWF  00
05BE:  DECFSZ 00,F
05C0:  BRA    05BE
05C2:  NOP   
....................    output_high(e); 
05C4:  BCF    F93.4
05C6:  BSF    F8A.4
....................    Delay_us(5); 
05C8:  MOVLW  06
05CA:  MOVWF  00
05CC:  DECFSZ 00,F
05CE:  BRA    05CC
05D0:  NOP   
....................    output_low(e); // disable  
05D2:  BCF    F93.4
05D4:  BCF    F8A.4
....................    Delay_us(5); 
05D6:  MOVLW  06
05D8:  MOVWF  00
05DA:  DECFSZ 00,F
05DC:  BRA    05DA
05DE:  NOP   
....................    output_bit(D7,bit_test(x,3));//send data low bit 3 pin D7  
05E0:  BTFSC  xDC.3
05E2:  BRA    05E8
05E4:  BCF    F8C.7
05E6:  BRA    05EA
05E8:  BSF    F8C.7
05EA:  BCF    F95.7
....................    output_bit(D6,bit_test(x,2));//send data low bit 2 pin D6 
05EC:  BTFSC  xDC.2
05EE:  BRA    05F4
05F0:  BCF    F8C.6
05F2:  BRA    05F6
05F4:  BSF    F8C.6
05F6:  BCF    F95.6
....................    output_bit(D5,bit_test(x,1));//send data low bit 1 pin D5 
05F8:  BTFSC  xDC.1
05FA:  BRA    0600
05FC:  BCF    F8C.5
05FE:  BRA    0602
0600:  BSF    F8C.5
0602:  BCF    F95.5
....................    output_bit(D4,bit_test(x,0));//send data low bit 0 pin D4 
0604:  BTFSC  xDC.0
0606:  BRA    060C
0608:  BCF    F8C.4
060A:  BRA    060E
060C:  BSF    F8C.4
060E:  BCF    F95.4
....................    Delay_us(5); 
0610:  MOVLW  06
0612:  MOVWF  00
0614:  DECFSZ 00,F
0616:  BRA    0614
0618:  NOP   
....................    output_high(e); 
061A:  BCF    F93.4
061C:  BSF    F8A.4
....................    Delay_us(5); 
061E:  MOVLW  06
0620:  MOVWF  00
0622:  DECFSZ 00,F
0624:  BRA    0622
0626:  NOP   
....................    output_low(e); // disable  
0628:  BCF    F93.4
062A:  BCF    F8A.4
....................    #endif 
.................... } 
062C:  MOVLB  0
062E:  RETURN 0
....................   
.................... void glcd_fillScreen (unsigned int1 color)//GRAVA 1 OU 0 EM TODOS OS PIXEL 
.................... { 
....................   int8 v, h; 
....................   int16 d; 
....................   d = (color == ON ? 0xFFFF : 0x0000); 
*
04F4:  MOVLB  5
04F6:  DECFSZ xD7,W
04F8:  BRA    0500
04FA:  SETF   03
04FC:  MOVLW  FF
04FE:  BRA    0504
0500:  CLRF   03
0502:  MOVLW  00
0504:  MOVWF  xDA
0506:  MOVFF  03,5DB
....................  // d = (color == ON ? 0x0000 : 0xFFFF ); 
....................   for (v=0; v < YVAL; v++)//32 
050A:  CLRF   xD8
050C:  MOVF   xD8,W
050E:  SUBLW  3F
0510:  BNC   056E
....................   { 
....................     for (h=0; h < XVAL; h++)//16 
0512:  CLRF   xD9
0514:  MOVF   xD9,W
0516:  SUBLW  07
0518:  BNC   056A
....................     { 
....................       gdram.pix[v][h].word = d; 
051A:  CLRF   xF9
051C:  MOVFF  5D8,5F8
0520:  CLRF   xFB
0522:  MOVLW  10
0524:  MOVWF  xFA
0526:  MOVLB  0
0528:  RCALL  04D2
052A:  MOVFF  02,03
052E:  MOVF   01,W
0530:  ADDLW  01
0532:  MOVLB  5
0534:  MOVWF  xDC
0536:  MOVLW  00
0538:  ADDWFC 02,W
053A:  MOVWF  xDD
053C:  CLRF   03
053E:  MOVFF  5D9,02
0542:  BCF    FD8.0
0544:  RLCF   02,F
0546:  RLCF   03,F
0548:  MOVF   02,W
054A:  ADDWF  xDC,F
054C:  MOVF   03,W
054E:  ADDWFC xDD,F
0550:  MOVLW  04
0552:  ADDWF  xDC,W
0554:  MOVWF  FE9
0556:  MOVLW  00
0558:  ADDWFC xDD,W
055A:  MOVWF  FEA
055C:  MOVFF  5DB,FEC
0560:  MOVF   FED,F
0562:  MOVFF  5DA,FEF
....................     } 
0566:  INCF   xD9,F
0568:  BRA    0514
....................   } 
056A:  INCF   xD8,F
056C:  BRA    050C
....................   gdram.refresh = TRUE; 
056E:  BSF    04.0
.................... } 
0570:  MOVLB  0
0572:  RETURN 0
....................  
....................  
.................... void glcd_update ()//ATUALIZA LCD 
.................... { 
....................   int8 v, h; 
....................   if (gdram.refresh)//verifica se foi atualizado  
*
0630:  BTFSS  04.0
0632:  BRA    073A
....................   { 
....................     for (v=0; v <YVAL; v++) //64 linhas 
0634:  MOVLB  5
0636:  CLRF   xD7
0638:  MOVF   xD7,W
063A:  SUBLW  3F
063C:  BTFSS  FD8.0
063E:  BRA    0736
....................     { 
....................       if(v<32) 
0640:  MOVF   xD7,W
0642:  SUBLW  1F
0644:  BNC   0660
....................       { 
....................          glcd_instruction( 0x80 | v);   // Set Vertical Address. 
0646:  MOVF   xD7,W
0648:  IORLW  80
064A:  MOVWF  xD9
064C:  MOVWF  xDA
064E:  MOVLB  0
0650:  RCALL  0416
....................          glcd_instruction( 0x80);   // Set Horizontal Address.            
0652:  MOVLW  80
0654:  MOVLB  5
0656:  MOVWF  xDA
0658:  MOVLB  0
065A:  RCALL  0416
....................       } 
....................       else 
065C:  BRA    0678
065E:  MOVLB  5
....................       { 
....................          glcd_instruction( 0x80 | (v - 32));   // Set Vertical Address. 
0660:  MOVLW  20
0662:  SUBWF  xD7,W
0664:  IORLW  80
0666:  MOVWF  xD9
0668:  MOVWF  xDA
066A:  MOVLB  0
066C:  RCALL  0416
....................          glcd_instruction( 0x88);   // Set Horizontal Address.            
066E:  MOVLW  88
0670:  MOVLB  5
0672:  MOVWF  xDA
0674:  MOVLB  0
0676:  RCALL  0416
....................       } 
....................       for (h=0; h <XVAL; h++) //8x16=128 colunas 
0678:  MOVLB  5
067A:  CLRF   xD8
067C:  MOVF   xD8,W
067E:  SUBLW  07
0680:  BNC   0732
....................       { 
....................         glcd_data( gdram.pix[v][h].nbyte[1]);   // Write High Byte. 
0682:  CLRF   xF9
0684:  MOVFF  5D7,5F8
0688:  CLRF   xFB
068A:  MOVLW  10
068C:  MOVWF  xFA
068E:  MOVLB  0
0690:  RCALL  04D2
0692:  MOVFF  02,03
0696:  MOVF   01,W
0698:  ADDLW  01
069A:  MOVLB  5
069C:  MOVWF  xD9
069E:  MOVLW  00
06A0:  ADDWFC 02,W
06A2:  MOVWF  xDA
06A4:  CLRF   03
06A6:  MOVFF  5D8,02
06AA:  BCF    FD8.0
06AC:  RLCF   02,F
06AE:  RLCF   03,F
06B0:  MOVF   02,W
06B2:  ADDWF  xD9,F
06B4:  MOVF   03,W
06B6:  ADDWFC xDA,F
06B8:  MOVLW  01
06BA:  ADDWF  xD9,W
06BC:  MOVWF  01
06BE:  MOVLW  00
06C0:  ADDWFC xDA,W
06C2:  MOVWF  03
06C4:  MOVF   01,W
06C6:  ADDLW  04
06C8:  MOVWF  FE9
06CA:  MOVLW  00
06CC:  ADDWFC 03,W
06CE:  MOVWF  FEA
06D0:  MOVFF  FEF,5D9
06D4:  MOVFF  5D9,5DC
06D8:  MOVLB  0
06DA:  RCALL  0574
....................         glcd_data( gdram.pix[v][h].nbyte[0]);   // Write Low Byte. 
06DC:  MOVLB  5
06DE:  CLRF   xF9
06E0:  MOVFF  5D7,5F8
06E4:  CLRF   xFB
06E6:  MOVLW  10
06E8:  MOVWF  xFA
06EA:  MOVLB  0
06EC:  RCALL  04D2
06EE:  MOVFF  02,03
06F2:  MOVF   01,W
06F4:  ADDLW  01
06F6:  MOVLB  5
06F8:  MOVWF  xD9
06FA:  MOVLW  00
06FC:  ADDWFC 02,W
06FE:  MOVWF  xDA
0700:  CLRF   03
0702:  MOVFF  5D8,02
0706:  BCF    FD8.0
0708:  RLCF   02,F
070A:  RLCF   03,F
070C:  MOVF   02,W
070E:  ADDWF  xD9,F
0710:  MOVF   03,W
0712:  ADDWFC xDA,F
0714:  MOVLW  04
0716:  ADDWF  xD9,W
0718:  MOVWF  FE9
071A:  MOVLW  00
071C:  ADDWFC xDA,W
071E:  MOVWF  FEA
0720:  MOVFF  FEF,5DB
0724:  MOVFF  5DB,5DC
0728:  MOVLB  0
072A:  RCALL  0574
....................       } 
072C:  MOVLB  5
072E:  INCF   xD8,F
0730:  BRA    067C
....................     } 
0732:  INCF   xD7,F
0734:  BRA    0638
....................     gdram.refresh = FALSE; 
0736:  BCF    04.0
0738:  MOVLB  0
....................   } 
.................... } 
073A:  RETURN 0
....................  
....................  
....................  
.................... void glcd_init_graph()//INICIA EM MODO GRAPHICO 
.................... { 
....................    delay_ms(40); 
073C:  MOVLW  28
073E:  MOVLB  5
0740:  MOVWF  xD7
0742:  MOVLB  0
0744:  RCALL  03C6
....................    output_low(rst);  //reset LCD 
0746:  BCF    F93.5
0748:  BCF    F8A.5
....................    delay_us(1);                      
074A:  BRA    074C
074C:  BRA    074E
....................    output_high(rst);  //LCD normal operation 
074E:  BCF    F93.5
0750:  BSF    F8A.5
....................    glcd_instruction(set_lcd_bit);  //set 4 and 8  bit operation and basic instruction set 
0752:  MOVLW  20
0754:  MOVLB  5
0756:  MOVWF  xDA
0758:  MOVLB  0
075A:  RCALL  0416
....................    delay_us(144); 
075C:  MOVLW  BF
075E:  MOVWF  00
0760:  DECFSZ 00,F
0762:  BRA    0760
0764:  BRA    0766
....................    glcd_instruction(0x0C);  //display on cursor off and char blink off 
0766:  MOVLW  0C
0768:  MOVLB  5
076A:  MOVWF  xDA
076C:  MOVLB  0
076E:  RCALL  0416
....................    delay_us(100); 
0770:  MOVLW  85
0772:  MOVWF  00
0774:  DECFSZ 00,F
0776:  BRA    0774
....................    glcd_instruction(clear_lcd);  //display clear 
0778:  MOVLW  01
077A:  MOVLB  5
077C:  MOVWF  xDA
077E:  MOVLB  0
0780:  RCALL  0416
....................    delay_ms(10); 
0782:  MOVLW  0A
0784:  MOVLB  5
0786:  MOVWF  xD7
0788:  MOVLB  0
078A:  RCALL  03C6
....................    glcd_instruction(set_mode_lcd);  //entry mode set 
078C:  MOVLW  06
078E:  MOVLB  5
0790:  MOVWF  xDA
0792:  MOVLB  0
0794:  RCALL  0416
....................    delay_us(72);                  
0796:  MOVLW  5F
0798:  MOVWF  00
079A:  DECFSZ 00,F
079C:  BRA    079A
079E:  BRA    07A0
....................    glcd_instruction(ext_instru);  // Select extended instruction set. 
07A0:  MOVLW  24
07A2:  MOVLB  5
07A4:  MOVWF  xDA
07A6:  MOVLB  0
07A8:  RCALL  0416
....................    delay_us (72);    
07AA:  MOVLW  5F
07AC:  MOVWF  00
07AE:  DECFSZ 00,F
07B0:  BRA    07AE
07B2:  BRA    07B4
....................    glcd_instruction(graphic_on);  // Graphic display ON. 
07B4:  MOVLW  26
07B6:  MOVLB  5
07B8:  MOVWF  xDA
07BA:  MOVLB  0
07BC:  RCALL  0416
....................    delay_us (72); 
07BE:  MOVLW  5F
07C0:  MOVWF  00
07C2:  DECFSZ 00,F
07C4:  BRA    07C2
07C6:  BRA    07C8
....................    glcd_fillScreen (OFF); // clear all pixel 
07C8:  MOVLB  5
07CA:  CLRF   xD7
07CC:  MOVLB  0
07CE:  RCALL  04F4
....................    glcd_update (); // update display 
07D0:  RCALL  0630
....................  
.................... } 
07D2:  GOTO   40D6 (RETURN)
....................  
.................... void glcd_init_basic()//INICIA EM MODO BASICO 
.................... { 
....................    delay_ms(40); 
....................    output_low(rst);         //reset LCD 
....................    delay_us(1);                      
....................    output_high(rst);        //LCD normal operation 
....................    glcd_instruction(set_lcd_bit);   //set 4 bit operation and basic instruction set 
....................    delay_us(144); 
....................    glcd_instruction(0x0C);   //display on cursor off and char blink off 
....................    delay_us(100); 
....................    glcd_instruction(clear_lcd);   //display clear 
....................    delay_ms(10); 
....................    glcd_instruction(set_mode_lcd);   //entry mode set 
....................    delay_us(72);                  
.................... } 
.................... //              0     0        0 
.................... void glcd_pixel(int8 x, int8 y, int1 color)//GRAVA NOVO VALOR DOS PIXEL 
.................... { 
....................   int8 v, h, b; 
....................   v = y; 
*
1046:  MOVFF  5F3,5F5
....................   h = x/16; 
104A:  MOVLB  5
104C:  SWAPF  xF2,W
104E:  MOVWF  xF6
1050:  MOVLW  0F
1052:  ANDWF  xF6,F
....................   b = 15 - (x%16); 
1054:  MOVF   xF2,W
1056:  ANDLW  0F
1058:  XORLW  FF
105A:  ADDLW  10
105C:  MOVWF  xF7
....................   
....................   if (color == ON) 
105E:  DECFSZ xF4,W
1060:  BRA    10CE
....................   { 
....................    bit_set (gdram.pix[v][h].word, b); 
1062:  CLRF   xF9
1064:  MOVFF  5F5,5F8
1068:  CLRF   xFB
106A:  MOVLW  10
106C:  MOVWF  xFA
106E:  MOVLB  0
1070:  CALL   04D2
1074:  MOVFF  02,03
1078:  MOVF   01,W
107A:  ADDLW  01
107C:  MOVLB  5
107E:  MOVWF  xF8
1080:  MOVLW  00
1082:  ADDWFC 02,W
1084:  MOVWF  xF9
1086:  CLRF   03
1088:  MOVFF  5F6,02
108C:  BCF    FD8.0
108E:  RLCF   02,F
1090:  RLCF   03,F
1092:  MOVF   02,W
1094:  ADDWF  xF8,F
1096:  MOVF   03,W
1098:  ADDWFC xF9,F
109A:  MOVLW  04
109C:  ADDWF  xF8,W
109E:  MOVWF  01
10A0:  MOVLW  00
10A2:  ADDWFC xF9,W
10A4:  MOVWF  03
10A6:  MOVFF  01,FE9
10AA:  MOVWF  FEA
10AC:  CLRF   03
10AE:  MOVLW  01
10B0:  MOVWF  02
10B2:  MOVF   xF7,W
10B4:  MOVWF  00
10B6:  BZ    10C2
10B8:  BCF    FD8.0
10BA:  RLCF   02,F
10BC:  RLCF   03,F
10BE:  DECFSZ 00,F
10C0:  BRA    10B8
10C2:  MOVF   02,W
10C4:  IORWF  FEF,F
10C6:  MOVF   03,W
10C8:  IORWF  FEC,W
10CA:  MOVWF  FEF
....................   } 
....................   
....................   else 
10CC:  BRA    1142
....................   { 
....................    bit_clear (gdram.pix[v][h].word, b); 
10CE:  CLRF   xF9
10D0:  MOVFF  5F5,5F8
10D4:  CLRF   xFB
10D6:  MOVLW  10
10D8:  MOVWF  xFA
10DA:  MOVLB  0
10DC:  CALL   04D2
10E0:  MOVFF  02,03
10E4:  MOVF   01,W
10E6:  ADDLW  01
10E8:  MOVLB  5
10EA:  MOVWF  xF8
10EC:  MOVLW  00
10EE:  ADDWFC 02,W
10F0:  MOVWF  xF9
10F2:  CLRF   03
10F4:  MOVFF  5F6,02
10F8:  BCF    FD8.0
10FA:  RLCF   02,F
10FC:  RLCF   03,F
10FE:  MOVF   02,W
1100:  ADDWF  xF8,F
1102:  MOVF   03,W
1104:  ADDWFC xF9,F
1106:  MOVLW  04
1108:  ADDWF  xF8,W
110A:  MOVWF  01
110C:  MOVLW  00
110E:  ADDWFC xF9,W
1110:  MOVWF  03
1112:  MOVFF  01,FE9
1116:  MOVWF  FEA
1118:  CLRF   03
111A:  MOVLW  01
111C:  MOVWF  02
111E:  MOVF   xF7,W
1120:  MOVWF  00
1122:  BZ    112E
1124:  BCF    FD8.0
1126:  RLCF   02,F
1128:  RLCF   03,F
112A:  DECFSZ 00,F
112C:  BRA    1124
112E:  MOVF   02,W
1130:  XORLW  FF
1132:  MOVWF  00
1134:  MOVLW  FF
1136:  XORWF  03,F
1138:  MOVF   00,W
113A:  ANDWF  FEF,F
113C:  MOVF   03,W
113E:  ANDWF  FEC,W
1140:  MOVWF  FEF
....................   } 
....................   gdram.refresh = TRUE; 
1142:  BSF    04.0
.................... } 
1144:  MOVLB  0
1146:  RETURN 0
.................... //                        
.................... void glcd_plot_image(ROM char *img,int width,int height,int x,int y,int inverse)//CARREGA IMAGEM 
.................... { 
....................    unsigned int i=0, j=0, k=0; 
....................    unsigned int16 count=0; 
....................     
....................    //glcd_fillScreen(OFF);                        //Clears the screen (opt.) 
....................    for(j=0;j<height;j++)//linhas 
....................       {    
....................          for(;i<width;)//colunas 
....................          { 
....................            for(k=0;k<8;k++)//bite 
....................             { 
....................                if(inverse) 
....................                {//           0  ,0  , 
....................                  glcd_pixel(i+x,j+y,~bit_test(img[count],(k))); 
....................                } 
....................                else 
....................                { 
....................                   glcd_pixel(i+x,j+y,bit_test(img[count],(k))); 
....................                } 
....................                i++; 
....................             } 
....................             count++; 
....................          } 
....................       i=0; 
....................       } 
.................... }  
.................... /////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <graphics.c>    //Biblioteca grafica 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
.................... { 
*
2262:  MOVLW  01
2264:  MOVLB  5
2266:  MOVWF  xEB
2268:  MOVWF  xEC
226A:  CLRF   xF1
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
226C:  MOVF   xE2,W
226E:  SUBWF  xE4,W
2270:  MOVWF  xF2
2272:  MOVF   xF2,W
2274:  BTFSS  xF2.7
2276:  BRA    227E
2278:  MOVLW  00
227A:  BSF    FD8.0
227C:  SUBFWB xF2,W
227E:  CLRF   03
2280:  MOVWF  xE9
2282:  MOVFF  03,5EA
....................    dy = abs((signed int8)(y2 - y1)); 
2286:  MOVF   xE3,W
2288:  SUBWF  xE5,W
228A:  MOVWF  xF2
228C:  MOVF   xF2,W
228E:  BTFSS  xF2.7
2290:  BRA    2298
2292:  MOVLW  00
2294:  BSF    FD8.0
2296:  SUBFWB xF2,W
2298:  CLRF   03
229A:  MOVWF  xE7
229C:  MOVFF  03,5E8
....................    #endif 
....................  
....................    if(x1 > x2) 
22A0:  MOVF   xE2,W
22A2:  SUBWF  xE4,W
22A4:  BC    22A8
....................       addx = -1; 
22A6:  SETF   xEB
....................    if(y1 > y2) 
22A8:  MOVF   xE3,W
22AA:  SUBWF  xE5,W
22AC:  BC    22B0
....................       addy = -1; 
22AE:  SETF   xEC
....................  
....................    if(dx >= dy) 
22B0:  MOVF   xE8,W
22B2:  SUBWF  xEA,W
22B4:  BNC   232E
22B6:  BNZ   22BE
22B8:  MOVF   xE7,W
22BA:  SUBWF  xE9,W
22BC:  BNC   232E
....................    { 
....................       dy *= 2; 
22BE:  BCF    FD8.0
22C0:  RLCF   xE7,F
22C2:  RLCF   xE8,F
....................       P = dy - dx; 
22C4:  MOVF   xE9,W
22C6:  SUBWF  xE7,W
22C8:  MOVWF  00
22CA:  MOVF   xEA,W
22CC:  SUBWFB xE8,W
22CE:  MOVFF  00,5ED
22D2:  MOVWF  xEE
....................       diff = P - dx; 
22D4:  MOVF   xE9,W
22D6:  SUBWF  xED,W
22D8:  MOVWF  xEF
22DA:  MOVF   xEA,W
22DC:  SUBWFB xEE,W
22DE:  MOVWF  xF0
....................  
....................       for(; i<=dx; ++i) 
22E0:  MOVF   xEA,F
22E2:  BNZ   22EA
22E4:  MOVF   xF1,W
22E6:  SUBWF  xE9,W
22E8:  BNC   232C
....................       { 
....................          glcd_pixel(x1, y1, color); 
22EA:  MOVFF  5E2,5F2
22EE:  MOVFF  5E3,5F3
22F2:  MOVFF  5E6,5F4
22F6:  MOVLB  0
22F8:  CALL   1046
....................  
....................          if(P < 0) 
22FC:  MOVLB  5
22FE:  BTFSC  xEE.7
2300:  BRA    2304
2302:  BRA    2314
....................          { 
....................             P  += dy; 
2304:  MOVF   xE7,W
2306:  ADDWF  xED,F
2308:  MOVF   xE8,W
230A:  ADDWFC xEE,F
....................             x1 += addx; 
230C:  MOVF   xEB,W
230E:  ADDWF  xE2,W
2310:  MOVWF  xE2
....................          } 
....................          else 
2312:  BRA    2328
....................          { 
....................             P  += diff; 
2314:  MOVF   xEF,W
2316:  ADDWF  xED,F
2318:  MOVF   xF0,W
231A:  ADDWFC xEE,F
....................             x1 += addx; 
231C:  MOVF   xEB,W
231E:  ADDWF  xE2,W
2320:  MOVWF  xE2
....................             y1 += addy; 
2322:  MOVF   xEC,W
2324:  ADDWF  xE3,W
2326:  MOVWF  xE3
....................          } 
....................       } 
2328:  INCF   xF1,F
232A:  BRA    22E0
....................    } 
....................    else 
232C:  BRA    239C
....................    { 
....................       dx *= 2; 
232E:  BCF    FD8.0
2330:  RLCF   xE9,F
2332:  RLCF   xEA,F
....................       P = dx - dy; 
2334:  MOVF   xE7,W
2336:  SUBWF  xE9,W
2338:  MOVWF  00
233A:  MOVF   xE8,W
233C:  SUBWFB xEA,W
233E:  MOVFF  00,5ED
2342:  MOVWF  xEE
....................       diff = P - dy; 
2344:  MOVF   xE7,W
2346:  SUBWF  xED,W
2348:  MOVWF  xEF
234A:  MOVF   xE8,W
234C:  SUBWFB xEE,W
234E:  MOVWF  xF0
....................  
....................       for(; i<=dy; ++i) 
2350:  MOVF   xE8,F
2352:  BNZ   235A
2354:  MOVF   xF1,W
2356:  SUBWF  xE7,W
2358:  BNC   239C
....................       { 
....................          glcd_pixel(x1, y1, color); 
235A:  MOVFF  5E2,5F2
235E:  MOVFF  5E3,5F3
2362:  MOVFF  5E6,5F4
2366:  MOVLB  0
2368:  CALL   1046
....................  
....................          if(P < 0) 
236C:  MOVLB  5
236E:  BTFSC  xEE.7
2370:  BRA    2374
2372:  BRA    2384
....................          { 
....................             P  += dx; 
2374:  MOVF   xE9,W
2376:  ADDWF  xED,F
2378:  MOVF   xEA,W
237A:  ADDWFC xEE,F
....................             y1 += addy; 
237C:  MOVF   xEC,W
237E:  ADDWF  xE3,W
2380:  MOVWF  xE3
....................          } 
....................          else 
2382:  BRA    2398
....................          { 
....................             P  += diff; 
2384:  MOVF   xEF,W
2386:  ADDWF  xED,F
2388:  MOVF   xF0,W
238A:  ADDWFC xEE,F
....................             x1 += addx; 
238C:  MOVF   xEB,W
238E:  ADDWF  xE2,W
2390:  MOVWF  xE2
....................             y1 += addy; 
2392:  MOVF   xEC,W
2394:  ADDWF  xE3,W
2396:  MOVWF  xE3
....................          } 
....................       } 
2398:  INCF   xF1,F
239A:  BRA    2350
....................    } 
.................... } 
239C:  MOVLB  0
239E:  RETURN 0
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
23A0:  MOVLB  5
23A2:  MOVF   xDB,F
23A4:  BZ    2404
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
23A6:  MOVF   xD9,W
23A8:  SUBWF  xD7,W
23AA:  BC    23B6
....................       { 
....................          xmin = x1; 
23AC:  MOVFF  5D7,5DE
....................          xmax = x2; 
23B0:  MOVFF  5D9,5DF
....................       } 
....................       else 
23B4:  BRA    23BE
....................       { 
....................          xmin = x2; 
23B6:  MOVFF  5D9,5DE
....................          xmax = x1; 
23BA:  MOVFF  5D7,5DF
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
23BE:  MOVF   xDA,W
23C0:  SUBWF  xD8,W
23C2:  BC    23CE
....................       { 
....................          ymin = y1; 
23C4:  MOVFF  5D8,5E0
....................          ymax = y2; 
23C8:  MOVFF  5DA,5E1
....................       } 
....................       else 
23CC:  BRA    23D6
....................       { 
....................          ymin = y2; 
23CE:  MOVFF  5DA,5E0
....................          ymax = y1; 
23D2:  MOVFF  5D8,5E1
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
23D6:  MOVF   xDE,W
23D8:  SUBWF  xDF,W
23DA:  BNC   2402
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
23DC:  MOVFF  5E0,5DD
23E0:  MOVF   xDD,W
23E2:  SUBWF  xE1,W
23E4:  BNC   23FE
....................          { 
....................             glcd_pixel(xmin, i, color); 
23E6:  MOVFF  5DE,5F2
23EA:  MOVFF  5DD,5F3
23EE:  MOVFF  5DC,5F4
23F2:  MOVLB  0
23F4:  CALL   1046
....................          } 
23F8:  MOVLB  5
23FA:  INCF   xDD,F
23FC:  BRA    23E0
....................       } 
23FE:  INCF   xDE,F
2400:  BRA    23D6
....................    } 
....................    else 
2402:  BRA    2460
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
2404:  MOVFF  5D7,5E2
2408:  MOVFF  5D8,5E3
240C:  MOVFF  5D9,5E4
2410:  MOVFF  5D8,5E5
2414:  MOVFF  5DC,5E6
2418:  MOVLB  0
241A:  RCALL  2262
....................       glcd_line(x1, y2, x2, y2, color); 
241C:  MOVFF  5D7,5E2
2420:  MOVFF  5DA,5E3
2424:  MOVFF  5D9,5E4
2428:  MOVFF  5DA,5E5
242C:  MOVFF  5DC,5E6
2430:  RCALL  2262
....................       glcd_line(x1, y1, x1, y2, color); 
2432:  MOVFF  5D7,5E2
2436:  MOVFF  5D8,5E3
243A:  MOVFF  5D7,5E4
243E:  MOVFF  5DA,5E5
2442:  MOVFF  5DC,5E6
2446:  RCALL  2262
....................       glcd_line(x2, y1, x2, y2, color); 
2448:  MOVFF  5D9,5E2
244C:  MOVFF  5D8,5E3
2450:  MOVFF  5D9,5E4
2454:  MOVFF  5DA,5E5
2458:  MOVFF  5DC,5E6
245C:  RCALL  2262
245E:  MOVLB  5
....................    } 
.................... } 
2460:  MOVLB  0
2462:  RETURN 0
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
1148:  MOVFF  5DA,03
114C:  MOVLB  5
114E:  MOVFF  5D9,FE9
1152:  MOVFF  5DA,FEA
1156:  MOVF   FEF,F
1158:  BTFSC  FD8.2
115A:  BRA    12EC
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
115C:  MOVFF  5DA,03
1160:  MOVFF  5D9,FE9
1164:  MOVFF  5DA,FEA
1168:  MOVF   FEF,W
116A:  SUBLW  52
116C:  BNC   11B2
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
116E:  MOVFF  5DA,03
1172:  MOVFF  5D9,FE9
1176:  MOVFF  5DA,FEA
117A:  MOVLW  20
117C:  SUBWF  FEF,W
117E:  MULLW  05
1180:  MOVF   FF3,W
1182:  CLRF   03
1184:  MOVWF  xE6
1186:  MOVLW  05
1188:  MOVWF  FEA
118A:  MOVLW  E1
118C:  MOVWF  FE9
118E:  CLRF   xEA
1190:  MOVFF  5E6,5E9
1194:  MOVLW  05
1196:  MOVWF  01
1198:  CLRF   FF7
119A:  MOVF   xE6,W
119C:  MOVLB  0
119E:  CALL   0004
11A2:  TBLRD*-
11A4:  TBLRD*+
11A6:  MOVFF  FF5,FEE
11AA:  DECFSZ 01,F
11AC:  BRA    11A4
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
11AE:  BRA    1214
11B0:  MOVLB  5
11B2:  MOVFF  5DA,03
11B6:  MOVFF  5D9,FE9
11BA:  MOVFF  5DA,FEA
11BE:  MOVF   FEF,W
11C0:  SUBLW  7E
11C2:  BNC   1208
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
11C4:  MOVFF  5DA,03
11C8:  MOVFF  5D9,FE9
11CC:  MOVFF  5DA,FEA
11D0:  MOVLW  53
11D2:  SUBWF  FEF,W
11D4:  MULLW  05
11D6:  MOVF   FF3,W
11D8:  CLRF   03
11DA:  MOVWF  xE6
11DC:  MOVLW  05
11DE:  MOVWF  FEA
11E0:  MOVLW  E1
11E2:  MOVWF  FE9
11E4:  CLRF   xEA
11E6:  MOVFF  5E6,5E9
11EA:  MOVLW  05
11EC:  MOVWF  01
11EE:  CLRF   FF7
11F0:  MOVF   xE6,W
11F2:  MOVLB  0
11F4:  CALL   0114
11F8:  TBLRD*-
11FA:  TBLRD*+
11FC:  MOVFF  FF5,FEE
1200:  DECFSZ 01,F
1202:  BRA    11FA
....................       else 
1204:  BRA    1214
1206:  MOVLB  5
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
1208:  CLRF   xE1
120A:  CLRF   xE2
120C:  CLRF   xE3
120E:  CLRF   xE4
1210:  CLRF   xE5
1212:  MOVLB  0
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1214:  MOVFF  5DA,03
1218:  MOVLB  5
121A:  MOVF   xD9,W
121C:  MOVWF  FE9
121E:  MOVFF  03,FEA
1222:  MOVF   FEF,W
1224:  XORLW  0A
1226:  MOVLB  0
1228:  BZ    1230
122A:  XORLW  07
122C:  BZ    1240
122E:  BRA    1246
....................          case '\n': 
....................             y += 7*size + 1; 
1230:  MOVLB  5
1232:  MOVF   xDB,W
1234:  MULLW  07
1236:  MOVF   FF3,W
1238:  ADDLW  01
123A:  ADDWF  xD8,F
....................             continue; 
123C:  BRA    12DE
123E:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
1240:  MOVLB  5
1242:  CLRF   xD7
....................             continue; 
1244:  BRA    12DE
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1246:  MOVLB  5
1248:  MOVF   xDB,W
124A:  MULLW  05
124C:  MOVF   FF3,W
124E:  ADDWF  xD7,W
1250:  SUBLW  7F
1252:  BC    1260
....................       { 
....................          x = 0;                           // Set x at far left position 
1254:  CLRF   xD7
....................          y += 7*size + 1;                 // Set y at next position down 
1256:  MOVF   xDB,W
1258:  MULLW  07
125A:  MOVF   FF3,W
125C:  ADDLW  01
125E:  ADDWF  xD8,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
1260:  CLRF   xDD
1262:  MOVF   xDD,W
1264:  SUBLW  04
1266:  BNC   12DE
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
1268:  CLRF   xDE
126A:  MOVF   xDE,W
126C:  SUBLW  06
126E:  BNC   12D6
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
1270:  CLRF   03
1272:  MOVF   xDD,W
1274:  ADDLW  E1
1276:  MOVWF  FE9
1278:  MOVLW  05
127A:  ADDWFC 03,W
127C:  MOVWF  FEA
127E:  MOVFF  FEF,5E6
1282:  MOVFF  5E6,00
1286:  MOVF   xDE,W
1288:  MOVWF  01
128A:  BZ    1294
128C:  BCF    FD8.0
128E:  RRCF   00,F
1290:  DECFSZ 01,F
1292:  BRA    128C
1294:  BTFSS  00.0
1296:  BRA    12D2
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
1298:  CLRF   xDF
129A:  MOVF   xDB,W
129C:  SUBWF  xDF,W
129E:  BC    12D2
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
12A0:  CLRF   xE0
12A2:  MOVF   xDB,W
12A4:  SUBWF  xE0,W
12A6:  BC    12CE
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
12A8:  MOVF   xE0,W
12AA:  ADDWF  xD7,W
12AC:  MOVWF  xE6
12AE:  MOVF   xDE,W
12B0:  MULWF  xDB
12B2:  MOVF   FF3,W
12B4:  ADDWF  xD8,W
12B6:  ADDWF  xDF,W
12B8:  MOVWF  xE7
12BA:  MOVFF  5E6,5F2
12BE:  MOVWF  xF3
12C0:  MOVFF  5DC,5F4
12C4:  MOVLB  0
12C6:  RCALL  1046
....................                   } 
12C8:  MOVLB  5
12CA:  INCF   xE0,F
12CC:  BRA    12A2
....................                } 
12CE:  INCF   xDF,F
12D0:  BRA    129A
....................             } 
....................          } 
12D2:  INCF   xDE,F
12D4:  BRA    126A
....................       } 
12D6:  INCF   xDD,F
12D8:  MOVF   xDB,W
12DA:  ADDWF  xD7,F
12DC:  BRA    1262
....................    } 
12DE:  INCF   xD9,F
12E0:  BTFSC  FD8.2
12E2:  INCF   xDA,F
12E4:  INCF   xD7,F
12E6:  MOVLB  0
12E8:  BRA    1148
12EA:  MOVLB  5
.................... } 
12EC:  MOVLB  0
12EE:  RETURN 0
....................  
.................... #endif 
....................  
.................... #include <internal_eeprom.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                          internal_eeprom.c                             //// 
.................... ////                                                                        //// 
.................... ////       Utilities to write various data types to internal eeprom         //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                        //// 
.................... ////   void write_int1_eeprom(address, int8 bitPosition, int1 data)         //// 
.................... ////     Call to write one bit of data                                      //// 
.................... ////                                                                        //// 
.................... ////   int1 read_int1_eeprom(address, int8 bitPosition)                     //// 
.................... ////     Call to read one bit of data                                       //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_int16_eeprom(address, int16 data)                         //// 
.................... ////     Call to write a 16 bit integer                                     //// 
.................... ////                                                                        //// 
.................... ////   void write_int16_eeprom(address, int16 data)                         //// 
.................... ////     Call to read a 16 bit integer                                      //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_int32_eeprom(address, int32 data)                         //// 
.................... ////     Call to write a 32 bit integer                                     //// 
.................... ////                                                                        //// 
.................... ////   int16 read_int32_eeprom(address)                                     //// 
.................... ////     Call to read a 32 bit integer                                      //// 
.................... ////                                                                        //// 
.................... ////                                                                        //// 
.................... ////   void write_float_eeprom(address, float data)                         //// 
.................... ////     Call to write a floating point number                              //// 
.................... ////                                                                        //// 
.................... ////   float read_float_eeprom(address)                                     //// 
.................... ////     Call to read a floating point number                               //// 
.................... ////                                                                        //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services               //// 
.................... //// This source code may only be used by licensed users of the CCS C       //// 
.................... //// compiler.  This source code may only be distributed to other licensed  //// 
.................... //// users of the CCS C compiler.  No other use, reproduction or            //// 
.................... //// distribution is permitted without written permission. Derivative       //// 
.................... //// programs created using this software in object code form are not       //// 
.................... //// restricted in any way.                                                 //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef INTERNAL_EEPROM_UTILITIES 
.................... #define INTERNAL_EEPROM_UTILITIES 
....................  
.................... // Used to adjust the address range 
.................... #ifndef INT_EEPROM_ADDRESS 
.................... #define INT_EEPROM_ADDRESS  int8 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //// Internal EEPROM Functions 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... // Purpose:    Write one bit to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The bit position (LSB == 0) 
.................... //             3) The bit to write 
.................... // Outputs:    None 
.................... void write_int1_eeprom(INT_EEPROM_ADDRESS address, int8 bitPosition, int1 data) 
.................... { 
....................    int8 stored_data; 
....................  
....................    stored_data = read_eeprom(address); 
....................  
....................    if(data) 
....................    { 
....................       bit_set(stored_data, bitPosition); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(stored_data, bitPosition); 
....................    } 
....................  
....................    write_eeprom(address, stored_data); 
.................... } 
....................  
....................  
.................... // Purpose:    Read one bit from internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The bit position (LSB == 0) 
.................... // Outputs:    The bit read from internal eeprom 
.................... int1 read_int1_eeprom(INT_EEPROM_ADDRESS address, int8 bitPosition) 
.................... { 
....................    return bit_test(read_eeprom(address), bitPosition); 
.................... } 
....................  
....................  
.................... // Purpose:    Write a 16 bit number to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The 16 bit number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_int16_eeprom(INT_EEPROM_ADDRESS address, int16 data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 2; ++i) 
*
3F5E:  MOVLB  4
3F60:  CLRF   x7F
3F62:  MOVF   x7F,W
3F64:  SUBLW  01
3F66:  BNC   3FBE
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
3F68:  MOVF   x7F,W
3F6A:  ADDWF  x7C,W
3F6C:  MOVWF  x80
3F6E:  MOVLW  04
3F70:  MOVWF  x82
3F72:  MOVLW  7D
3F74:  MOVWF  x81
3F76:  MOVF   x7F,W
3F78:  ADDWF  x81,W
3F7A:  MOVWF  01
3F7C:  MOVLW  00
3F7E:  ADDWFC x82,W
3F80:  MOVWF  03
3F82:  MOVF   01,W
3F84:  MOVWF  FE9
3F86:  MOVFF  03,FEA
3F8A:  MOVFF  FEF,481
3F8E:  MOVFF  480,FA9
3F92:  MOVFF  481,FA8
3F96:  BCF    FA6.6
3F98:  BCF    FA6.7
3F9A:  BSF    FA6.2
3F9C:  MOVF   FF2,W
3F9E:  MOVWF  00
3FA0:  BCF    FF2.7
3FA2:  MOVLB  F
3FA4:  MOVLW  55
3FA6:  MOVWF  FA7
3FA8:  MOVLW  AA
3FAA:  MOVWF  FA7
3FAC:  BSF    FA6.1
3FAE:  BTFSC  FA6.1
3FB0:  BRA    3FAE
3FB2:  BCF    FA6.2
3FB4:  MOVF   00,W
3FB6:  IORWF  FF2,F
....................    } 
3FB8:  MOVLB  4
3FBA:  INCF   x7F,F
3FBC:  BRA    3F62
.................... } 
3FBE:  MOVLB  0
3FC0:  RETURN 0
....................  
....................  
.................... // Purpose:    Read a 16 bit number from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The 16 bit number read from internal eeprom 
.................... int16 read_int16_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8  i; 
....................    int16 data; 
....................  
....................    for(i = 0; i < 2; ++i) 
*
07D6:  MOVLB  4
07D8:  CLRF   x7B
07DA:  MOVF   x7B,W
07DC:  SUBLW  01
07DE:  BNC   081E
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
07E0:  MOVLW  04
07E2:  MOVWF  x7F
07E4:  MOVLW  7C
07E6:  MOVWF  x7E
07E8:  MOVF   x7B,W
07EA:  ADDWF  x7E,W
07EC:  MOVWF  01
07EE:  MOVLW  00
07F0:  ADDWFC x7F,W
07F2:  MOVWF  03
07F4:  MOVF   01,W
07F6:  MOVWF  FE9
07F8:  MOVFF  03,FEA
07FC:  MOVF   x7B,W
07FE:  ADDWF  x7A,W
0800:  MOVWF  x80
0802:  MOVFF  FF2,481
0806:  BCF    FF2.7
0808:  MOVFF  480,FA9
080C:  BCF    FA6.6
080E:  BCF    FA6.7
0810:  BSF    FA6.0
0812:  MOVF   FA8,W
0814:  BTFSC  x81.7
0816:  BSF    FF2.7
0818:  MOVWF  FEF
....................    } 
081A:  INCF   x7B,F
081C:  BRA    07DA
....................  
....................    return(data); 
081E:  MOVFF  47C,01
0822:  MOVFF  47D,02
.................... } 
0826:  MOVLB  0
0828:  RETURN 0
....................  
....................  
.................... // Purpose:    Write a 32 bit integer to internal eeprom 
.................... // Inputs:     1) An eeprom address 
.................... //             2) The 32 bit number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_int32_eeprom(INT_EEPROM_ADDRESS address, int32 data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
....................    } 
.................... } 
....................  
....................  
.................... // Purpose:    Read a 32 bit integer from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The 32 bit integer read from internal eeprom 
.................... int32 read_int32_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8  i; 
....................    int32 data; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
....................    } 
....................  
....................    return data; 
.................... } 
....................  
....................  
.................... // Purpose:    Write a floating point number to internal eeprom 
.................... // Inputs:     1) An eeprom address. Four eeprom locations will be used. 
.................... //             2) The floating point number to write to internal eeprom 
.................... // Outputs:    None 
.................... void write_float_eeprom(INT_EEPROM_ADDRESS address, float data) 
.................... { 
....................    int8 i; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      write_eeprom(address + i, *((int8 *)(&data) + i)); 
....................    } 
.................... } 
....................  
....................  
.................... // Purpose:    Read a floating point number from internal eeprom 
.................... // Inputs:     An eeprom address 
.................... // Outputs:    The floating point number read from the internal eeprom 
.................... float read_float_eeprom(INT_EEPROM_ADDRESS address) 
.................... { 
....................    int8 i; 
....................    float data; 
....................  
....................    for(i = 0; i < 4; ++i) 
....................    { 
....................      *((int8 *)(&data) + i) = read_eeprom(address + i); 
....................    } 
....................  
....................    return data; 
.................... } 
....................  
.................... #endif 
....................  
.................... //...................................................................................................    
....................    
....................  //Variaveis Globais 
....................    int16 tempo_on=0;          //incremento para controle de tempo do estrela triangulo 
....................    int   start_on=0;          //estado do modo estrela triangulo 
....................    int   filtro=0;            // filtro de tecla C0 e C1 
....................    int  Mod_Start=0; 
....................    int16  tempo_on_pulse=0; 
....................    int16  tempo_off_pulse=0; 
....................    int16  tempo_on_pulse_set=3; 
....................    int16  tempo_off_pulse_set=3; 
....................    int   pulse_qnd=0; 
....................    int   pulse_qnd_set=5; 
....................       
....................    float L1=0;                //Valor da string L1     
....................    int16 Offset_L1=0;         //offset sensor 1 
....................    float ref_L1=0;            //Referencia sensor 1 
....................    float L1_eq=0; 
....................    float L1_real=0; 
....................    int rep1=0; 
....................     
....................    float L2=0;                //Valor da string L2                     
....................    int16 Offset_L2=0;         //offset sensor 2 
....................    float ref_L2=0;            //Referencia sensor 2 
....................    float L2_eq=0; 
....................    float L2_real=0; 
....................    int rep2=0; 
....................     
....................    float L3=0;                 //Valor da string L3                     
....................    int16 Offset_L3=0;         //offset sensor 3 
....................    float ref_L3=0;            //Referencia sensor 3  
....................    float L3_eq=0; 
....................    float L3_real=0; 
....................    int rep3=0; 
....................   
....................    int16 mediaAD_L1=0;         //valor do ADC 1 
....................    int16 mediaAD_L2=0;         //valor do ADC 2 
....................    int16 mediaAD_L3=0;         //valor do ADC 3 
....................    float tensao=0;             //Auxiliar para valores de tensão dos sensores 
....................    int16 valor=0;              //Auxiliar para valores dos Conversores AD 
....................    int   rep=0;                //Auxiliar para repetiçoes (FOR) 
....................   
....................    int menu=0;                 //Telas de menu restrito 
....................    int menu_lib=0;             //Telas de menu liberado 
....................    int filtro_E0=0;            //Filtra a tecla de descida dos menus 
....................    int filtro_c3=0;            //Filtra a tecla de subida dos menus 
....................    int TempoET;                //Tempo do estrela triangulo 
....................    float TempoETreal;          //conversão do tempo de estrela triangulo para sugundos 
....................     
....................    int16 Pot_real=0;           // Valor da potencia real (Watts) 
....................    int   Pot_HP=0;             // Valor da potencia convertido em (HP) 
....................    int16 tensao_rede=220;      //tensão da rede 
....................    float corrente_media=0;     //valor da media das tres correntes (L1+L2+L3/3) 
....................    float corrente_eq=0;        //Valor da corrente real incrementada 
....................    float corrente_real=0;      //Media da corrente medida 
....................    int soma_corrente=0;        // 
....................    int16 leituraEeprom=0;      //Lê os valores salvos na eemprom para poder salvar se for mudado 
....................    int def_eeprom=0; 
....................     
....................  void leitura_sensores() 
....................  {  
....................   if (menu==0&&menu_lib==0) 
*
1310:  MOVLB  4
1312:  MOVF   x5A,F
1314:  BTFSS  FD8.2
1316:  GOTO   1C2A
131A:  MOVF   x5B,F
131C:  BTFSS  FD8.2
131E:  GOTO   1C2A
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
1322:  MOVLB  5
1324:  CLRF   xD7
1326:  MOVLB  0
1328:  CALL   04F4
....................     
....................    //------   LEITURA DO SENSOR DE string L1  -------- 
....................     
....................    set_adc_channel(0); 
132C:  MOVLW  00
132E:  MOVWF  01
1330:  MOVF   FC2,W
1332:  ANDLW  C7
1334:  IORWF  01,W
1336:  MOVWF  FC2
....................    delay_us(20); 
1338:  MOVLW  1A
133A:  MOVWF  00
133C:  DECFSZ 00,F
133E:  BRA    133C
1340:  NOP   
....................    mediaAD_L1=0; valor=0; tensao=0; 
1342:  MOVLB  4
1344:  CLRF   x4E
1346:  CLRF   x4D
1348:  CLRF   x58
134A:  CLRF   x57
134C:  CLRF   x56
134E:  CLRF   x55
1350:  CLRF   x54
1352:  CLRF   x53
....................     
....................    for(rep=1; rep<=8; rep++) 
1354:  MOVLW  01
1356:  MOVWF  x59
1358:  MOVF   x59,W
135A:  SUBLW  08
135C:  BNC   1386
....................    { 
....................      valor= read_adc(); 
135E:  BSF    FC2.2
1360:  BTFSC  FC2.2
1362:  BRA    1360
1364:  MOVFF  FC3,457
1368:  MOVFF  FC4,458
....................      delay_ms(4); 
136C:  MOVLW  04
136E:  MOVLB  5
1370:  MOVWF  xD7
1372:  MOVLB  0
1374:  CALL   03C6
....................      mediaAD_L1= mediaAD_L1 + valor; 
1378:  MOVLB  4
137A:  MOVF   x57,W
137C:  ADDWF  x4D,F
137E:  MOVF   x58,W
1380:  ADDWFC x4E,F
....................    } 
1382:  INCF   x59,F
1384:  BRA    1358
....................    mediaAD_L1= mediaAD_L1/8; 
1386:  RRCF   x4E,F
1388:  RRCF   x4D,F
138A:  RRCF   x4E,F
138C:  RRCF   x4D,F
138E:  RRCF   x4E,F
1390:  RRCF   x4D,F
1392:  MOVLW  1F
1394:  ANDWF  x4E,F
....................    tensao=(float)mediaAD_L1*4.8828; 
1396:  MOVFF  44E,5D8
139A:  MOVFF  44D,5D7
139E:  MOVLB  0
13A0:  CALL   082A
13A4:  MOVFF  00,481
13A8:  MOVFF  01,482
13AC:  MOVFF  02,483
13B0:  MOVFF  03,484
13B4:  MOVFF  03,5E7
13B8:  MOVFF  02,5E6
13BC:  MOVFF  01,5E5
13C0:  MOVFF  00,5E4
13C4:  MOVLW  E6
13C6:  MOVLB  5
13C8:  MOVWF  xEB
13CA:  MOVLW  3F
13CC:  MOVWF  xEA
13CE:  MOVLW  1C
13D0:  MOVWF  xE9
13D2:  MOVLW  81
13D4:  MOVWF  xE8
13D6:  MOVLB  0
13D8:  CALL   0860
13DC:  MOVFF  03,456
13E0:  MOVFF  02,455
13E4:  MOVFF  01,454
13E8:  MOVFF  00,453
....................    L1_real=(float) (tensao - Offset_L1)/ref_L1; 
13EC:  MOVFF  419,5D8
13F0:  MOVFF  418,5D7
13F4:  CALL   082A
13F8:  BSF    FD8.1
13FA:  MOVFF  456,5DA
13FE:  MOVFF  455,5D9
1402:  MOVFF  454,5D8
1406:  MOVFF  453,5D7
140A:  MOVFF  03,5DE
140E:  MOVFF  02,5DD
1412:  MOVFF  01,5DC
1416:  MOVFF  00,5DB
141A:  CALL   0956
141E:  MOVFF  00,481
1422:  MOVFF  01,482
1426:  MOVFF  02,483
142A:  MOVFF  03,484
142E:  MOVFF  03,5DE
1432:  MOVFF  02,5DD
1436:  MOVFF  01,5DC
143A:  MOVFF  00,5DB
143E:  MOVFF  41D,5E2
1442:  MOVFF  41C,5E1
1446:  MOVFF  41B,5E0
144A:  MOVFF  41A,5DF
144E:  CALL   0BCE
1452:  MOVFF  03,425
1456:  MOVFF  02,424
145A:  MOVFF  01,423
145E:  MOVFF  00,422
....................     
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep1++; 
1462:  MOVLB  4
1464:  INCF   x26,F
....................    L1_eq=L1_eq+L1_real; 
1466:  BCF    FD8.1
1468:  MOVFF  421,5DA
146C:  MOVFF  420,5D9
1470:  MOVFF  41F,5D8
1474:  MOVFF  41E,5D7
1478:  MOVFF  425,5DE
147C:  MOVFF  424,5DD
1480:  MOVFF  423,5DC
1484:  MOVFF  422,5DB
1488:  MOVLB  0
148A:  CALL   0956
148E:  MOVFF  03,421
1492:  MOVFF  02,420
1496:  MOVFF  01,41F
149A:  MOVFF  00,41E
....................   
....................    if(rep1>=10) 
149E:  MOVLB  4
14A0:  MOVF   x26,W
14A2:  SUBLW  09
14A4:  BC    14F6
....................    { 
....................     L1_eq = L1_eq/10;  
14A6:  MOVFF  421,5DE
14AA:  MOVFF  420,5DD
14AE:  MOVFF  41F,5DC
14B2:  MOVFF  41E,5DB
14B6:  MOVLB  5
14B8:  CLRF   xE2
14BA:  CLRF   xE1
14BC:  MOVLW  20
14BE:  MOVWF  xE0
14C0:  MOVLW  82
14C2:  MOVWF  xDF
14C4:  MOVLB  0
14C6:  CALL   0BCE
14CA:  MOVFF  03,421
14CE:  MOVFF  02,420
14D2:  MOVFF  01,41F
14D6:  MOVFF  00,41E
....................     L1 = L1_eq; 
14DA:  MOVFF  421,417
14DE:  MOVFF  420,416
14E2:  MOVFF  41F,415
14E6:  MOVFF  41E,414
....................     rep1=0; 
14EA:  MOVLB  4
14EC:  CLRF   x26
....................     L1_eq=0; 
14EE:  CLRF   x21
14F0:  CLRF   x20
14F2:  CLRF   x1F
14F4:  CLRF   x1E
....................    } 
....................     
....................     
....................    if (L1<0) 
14F6:  MOVFF  417,5DA
14FA:  MOVFF  416,5D9
14FE:  MOVFF  415,5D8
1502:  MOVFF  414,5D7
1506:  MOVLB  5
1508:  CLRF   xDE
150A:  CLRF   xDD
150C:  CLRF   xDC
150E:  CLRF   xDB
1510:  MOVLB  0
1512:  RCALL  0D2C
1514:  BNC   1522
....................    { 
....................      L1=0; 
1516:  MOVLB  4
1518:  CLRF   x17
151A:  CLRF   x16
151C:  CLRF   x15
151E:  CLRF   x14
1520:  MOVLB  0
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L1); // Converte adc em texto 
1522:  MOVLW  04
1524:  MOVLB  4
1526:  MOVWF  x79
1528:  MOVLW  7A
152A:  MOVWF  x78
152C:  MOVLW  89
152E:  MOVWF  FE9
1530:  MOVFF  417,5DA
1534:  MOVFF  416,5D9
1538:  MOVFF  415,5D8
153C:  MOVFF  414,5D7
1540:  MOVLW  01
1542:  MOVLB  5
1544:  MOVWF  xDB
1546:  MOVLB  0
1548:  RCALL  0EA0
....................  
....................    if(L1>=100) 
154A:  MOVLB  5
154C:  CLRF   xDA
154E:  CLRF   xD9
1550:  MOVLW  48
1552:  MOVWF  xD8
1554:  MOVLW  85
1556:  MOVWF  xD7
1558:  MOVFF  417,5DE
155C:  MOVFF  416,5DD
1560:  MOVFF  415,5DC
1564:  MOVFF  414,5DB
1568:  MOVLB  0
156A:  CALL   0D2C
156E:  BC    1572
1570:  BNZ   157A
....................    { 
....................      string[6] = '\0'; 
1572:  MOVLB  4
1574:  CLRF   x80
....................      string[5] = 'A'; 
1576:  MOVLW  41
1578:  MOVWF  x7F
....................    } 
....................    if(L1<100) 
157A:  MOVFF  417,5DA
157E:  MOVFF  416,5D9
1582:  MOVFF  415,5D8
1586:  MOVFF  414,5D7
158A:  MOVLB  5
158C:  CLRF   xDE
158E:  CLRF   xDD
1590:  MOVLW  48
1592:  MOVWF  xDC
1594:  MOVLW  85
1596:  MOVWF  xDB
1598:  MOVLB  0
159A:  CALL   0D2C
159E:  BNC   15A8
....................    { 
....................      string[5] = '\0'; 
15A0:  MOVLB  4
15A2:  CLRF   x7F
....................      string[4] = 'A'; 
15A4:  MOVLW  41
15A6:  MOVWF  x7E
....................    } 
....................    if(L1<10) 
15A8:  MOVFF  417,5DA
15AC:  MOVFF  416,5D9
15B0:  MOVFF  415,5D8
15B4:  MOVFF  414,5D7
15B8:  MOVLB  5
15BA:  CLRF   xDE
15BC:  CLRF   xDD
15BE:  MOVLW  20
15C0:  MOVWF  xDC
15C2:  MOVLW  82
15C4:  MOVWF  xDB
15C6:  MOVLB  0
15C8:  CALL   0D2C
15CC:  BNC   15D6
....................    { 
....................      string[4] = '\0'; 
15CE:  MOVLB  4
15D0:  CLRF   x7E
....................      string[3] = 'A'; 
15D2:  MOVLW  41
15D4:  MOVWF  x7D
....................    } 
....................     
....................    glcd_text57(18, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
15D6:  MOVLW  12
15D8:  MOVLB  5
15DA:  MOVWF  xD7
15DC:  MOVLW  01
15DE:  MOVWF  xD8
15E0:  MOVLW  04
15E2:  MOVWF  xDA
15E4:  MOVLW  7A
15E6:  MOVWF  xD9
15E8:  MOVLW  01
15EA:  MOVWF  xDB
15EC:  MOVWF  xDC
15EE:  MOVLB  0
15F0:  RCALL  1148
....................       
....................    sprintf(string, "L1:"); // Converte char em texto 
15F2:  MOVLW  04
15F4:  MOVLB  4
15F6:  MOVWF  x79
15F8:  MOVLW  7A
15FA:  MOVWF  x78
15FC:  MOVLW  00
15FE:  MOVWF  FF6
1600:  MOVLW  02
1602:  MOVWF  FF7
1604:  MOVLB  0
1606:  RCALL  12F0
....................    string[3] = '\0'; 
1608:  MOVLB  4
160A:  CLRF   x7D
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color)   
160C:  MOVLW  01
160E:  MOVLB  5
1610:  MOVWF  xD7
1612:  MOVWF  xD8
1614:  MOVLW  04
1616:  MOVWF  xDA
1618:  MOVLW  7A
161A:  MOVWF  xD9
161C:  MOVLW  01
161E:  MOVWF  xDB
1620:  MOVWF  xDC
1622:  MOVLB  0
1624:  RCALL  1148
....................       
....................    //------LEITURA DO SENSOR DE string L2  ------- 
....................       
....................    set_adc_channel(1); 
1626:  MOVLW  08
1628:  MOVWF  01
162A:  MOVF   FC2,W
162C:  ANDLW  C7
162E:  IORWF  01,W
1630:  MOVWF  FC2
....................    delay_us(20); 
1632:  MOVLW  1A
1634:  MOVWF  00
1636:  DECFSZ 00,F
1638:  BRA    1636
163A:  NOP   
....................    mediaAD_L2=0; valor=0; tensao=0; 
163C:  MOVLB  4
163E:  CLRF   x50
1640:  CLRF   x4F
1642:  CLRF   x58
1644:  CLRF   x57
1646:  CLRF   x56
1648:  CLRF   x55
164A:  CLRF   x54
164C:  CLRF   x53
....................     
....................    for(rep=1; rep<=8; rep++) 
164E:  MOVLW  01
1650:  MOVWF  x59
1652:  MOVF   x59,W
1654:  SUBLW  08
1656:  BNC   1680
....................    { 
....................      valor= read_adc(); 
1658:  BSF    FC2.2
165A:  BTFSC  FC2.2
165C:  BRA    165A
165E:  MOVFF  FC3,457
1662:  MOVFF  FC4,458
....................      delay_ms(4); 
1666:  MOVLW  04
1668:  MOVLB  5
166A:  MOVWF  xD7
166C:  MOVLB  0
166E:  CALL   03C6
....................      mediaAD_L2 = mediaAD_L2 + valor; 
1672:  MOVLB  4
1674:  MOVF   x57,W
1676:  ADDWF  x4F,F
1678:  MOVF   x58,W
167A:  ADDWFC x50,F
....................    } 
167C:  INCF   x59,F
167E:  BRA    1652
....................    mediaAD_L2= mediaAD_L2/8; 
1680:  RRCF   x50,F
1682:  RRCF   x4F,F
1684:  RRCF   x50,F
1686:  RRCF   x4F,F
1688:  RRCF   x50,F
168A:  RRCF   x4F,F
168C:  MOVLW  1F
168E:  ANDWF  x50,F
....................    tensao=(float)mediaAD_L2*4.8828; 
1690:  MOVFF  450,5D8
1694:  MOVFF  44F,5D7
1698:  MOVLB  0
169A:  CALL   082A
169E:  MOVFF  00,481
16A2:  MOVFF  01,482
16A6:  MOVFF  02,483
16AA:  MOVFF  03,484
16AE:  MOVFF  03,5E7
16B2:  MOVFF  02,5E6
16B6:  MOVFF  01,5E5
16BA:  MOVFF  00,5E4
16BE:  MOVLW  E6
16C0:  MOVLB  5
16C2:  MOVWF  xEB
16C4:  MOVLW  3F
16C6:  MOVWF  xEA
16C8:  MOVLW  1C
16CA:  MOVWF  xE9
16CC:  MOVLW  81
16CE:  MOVWF  xE8
16D0:  MOVLB  0
16D2:  CALL   0860
16D6:  MOVFF  03,456
16DA:  MOVFF  02,455
16DE:  MOVFF  01,454
16E2:  MOVFF  00,453
....................    L2_real=(float) (tensao - Offset_L2)/ref_L2; 
16E6:  MOVFF  42C,5D8
16EA:  MOVFF  42B,5D7
16EE:  CALL   082A
16F2:  BSF    FD8.1
16F4:  MOVFF  456,5DA
16F8:  MOVFF  455,5D9
16FC:  MOVFF  454,5D8
1700:  MOVFF  453,5D7
1704:  MOVFF  03,5DE
1708:  MOVFF  02,5DD
170C:  MOVFF  01,5DC
1710:  MOVFF  00,5DB
1714:  CALL   0956
1718:  MOVFF  00,481
171C:  MOVFF  01,482
1720:  MOVFF  02,483
1724:  MOVFF  03,484
1728:  MOVFF  03,5DE
172C:  MOVFF  02,5DD
1730:  MOVFF  01,5DC
1734:  MOVFF  00,5DB
1738:  MOVFF  430,5E2
173C:  MOVFF  42F,5E1
1740:  MOVFF  42E,5E0
1744:  MOVFF  42D,5DF
1748:  CALL   0BCE
174C:  MOVFF  03,438
1750:  MOVFF  02,437
1754:  MOVFF  01,436
1758:  MOVFF  00,435
....................     
....................       //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep2++; 
175C:  MOVLB  4
175E:  INCF   x39,F
....................    L2_eq=L2_eq+L2_real; 
1760:  BCF    FD8.1
1762:  MOVFF  434,5DA
1766:  MOVFF  433,5D9
176A:  MOVFF  432,5D8
176E:  MOVFF  431,5D7
1772:  MOVFF  438,5DE
1776:  MOVFF  437,5DD
177A:  MOVFF  436,5DC
177E:  MOVFF  435,5DB
1782:  MOVLB  0
1784:  CALL   0956
1788:  MOVFF  03,434
178C:  MOVFF  02,433
1790:  MOVFF  01,432
1794:  MOVFF  00,431
....................   
....................    if(rep2>=10) 
1798:  MOVLB  4
179A:  MOVF   x39,W
179C:  SUBLW  09
179E:  BC    17F0
....................    { 
....................     L2_eq = L2_eq/10;  
17A0:  MOVFF  434,5DE
17A4:  MOVFF  433,5DD
17A8:  MOVFF  432,5DC
17AC:  MOVFF  431,5DB
17B0:  MOVLB  5
17B2:  CLRF   xE2
17B4:  CLRF   xE1
17B6:  MOVLW  20
17B8:  MOVWF  xE0
17BA:  MOVLW  82
17BC:  MOVWF  xDF
17BE:  MOVLB  0
17C0:  CALL   0BCE
17C4:  MOVFF  03,434
17C8:  MOVFF  02,433
17CC:  MOVFF  01,432
17D0:  MOVFF  00,431
....................     L2 = L2_eq; 
17D4:  MOVFF  434,42A
17D8:  MOVFF  433,429
17DC:  MOVFF  432,428
17E0:  MOVFF  431,427
....................     rep2=0; 
17E4:  MOVLB  4
17E6:  CLRF   x39
....................     L2_eq=0; 
17E8:  CLRF   x34
17EA:  CLRF   x33
17EC:  CLRF   x32
17EE:  CLRF   x31
....................    } 
....................     
....................            
....................    if (L2<0) 
17F0:  MOVFF  42A,5DA
17F4:  MOVFF  429,5D9
17F8:  MOVFF  428,5D8
17FC:  MOVFF  427,5D7
1800:  MOVLB  5
1802:  CLRF   xDE
1804:  CLRF   xDD
1806:  CLRF   xDC
1808:  CLRF   xDB
180A:  MOVLB  0
180C:  CALL   0D2C
1810:  BNC   181C
....................    { 
....................      L2=0; 
1812:  MOVLB  4
1814:  CLRF   x2A
1816:  CLRF   x29
1818:  CLRF   x28
181A:  CLRF   x27
....................    } 
....................       
....................    sprintf(string, "%.1f", (float)L2); // Converte adc em texto 
181C:  MOVLW  04
181E:  MOVLB  4
1820:  MOVWF  x79
1822:  MOVLW  7A
1824:  MOVWF  x78
1826:  MOVLW  89
1828:  MOVWF  FE9
182A:  MOVFF  42A,5DA
182E:  MOVFF  429,5D9
1832:  MOVFF  428,5D8
1836:  MOVFF  427,5D7
183A:  MOVLW  01
183C:  MOVLB  5
183E:  MOVWF  xDB
1840:  MOVLB  0
1842:  CALL   0EA0
....................       
....................    if(L2>=100) 
1846:  MOVLB  5
1848:  CLRF   xDA
184A:  CLRF   xD9
184C:  MOVLW  48
184E:  MOVWF  xD8
1850:  MOVLW  85
1852:  MOVWF  xD7
1854:  MOVFF  42A,5DE
1858:  MOVFF  429,5DD
185C:  MOVFF  428,5DC
1860:  MOVFF  427,5DB
1864:  MOVLB  0
1866:  CALL   0D2C
186A:  BC    186E
186C:  BNZ   1876
....................    { 
....................      string[6] = '\0'; 
186E:  MOVLB  4
1870:  CLRF   x80
....................      string[5] = 'A'; 
1872:  MOVLW  41
1874:  MOVWF  x7F
....................    } 
....................    if(L2<100) 
1876:  MOVFF  42A,5DA
187A:  MOVFF  429,5D9
187E:  MOVFF  428,5D8
1882:  MOVFF  427,5D7
1886:  MOVLB  5
1888:  CLRF   xDE
188A:  CLRF   xDD
188C:  MOVLW  48
188E:  MOVWF  xDC
1890:  MOVLW  85
1892:  MOVWF  xDB
1894:  MOVLB  0
1896:  CALL   0D2C
189A:  BNC   18A4
....................    { 
....................      string[5] = '\0'; 
189C:  MOVLB  4
189E:  CLRF   x7F
....................      string[4] = 'A'; 
18A0:  MOVLW  41
18A2:  MOVWF  x7E
....................    } 
....................    if(L2<10) 
18A4:  MOVFF  42A,5DA
18A8:  MOVFF  429,5D9
18AC:  MOVFF  428,5D8
18B0:  MOVFF  427,5D7
18B4:  MOVLB  5
18B6:  CLRF   xDE
18B8:  CLRF   xDD
18BA:  MOVLW  20
18BC:  MOVWF  xDC
18BE:  MOVLW  82
18C0:  MOVWF  xDB
18C2:  MOVLB  0
18C4:  CALL   0D2C
18C8:  BNC   18D2
....................    { 
....................      string[4] = '\0'; 
18CA:  MOVLB  4
18CC:  CLRF   x7E
....................      string[3] = 'A'; 
18CE:  MOVLW  41
18D0:  MOVWF  x7D
....................    } 
....................       
....................    glcd_text57(18, 10, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
18D2:  MOVLW  12
18D4:  MOVLB  5
18D6:  MOVWF  xD7
18D8:  MOVLW  0A
18DA:  MOVWF  xD8
18DC:  MOVLW  04
18DE:  MOVWF  xDA
18E0:  MOVLW  7A
18E2:  MOVWF  xD9
18E4:  MOVLW  01
18E6:  MOVWF  xDB
18E8:  MOVWF  xDC
18EA:  MOVLB  0
18EC:  RCALL  1148
....................     
....................    sprintf(string, "L2:"); // converte char em texto 
18EE:  MOVLW  04
18F0:  MOVLB  4
18F2:  MOVWF  x79
18F4:  MOVLW  7A
18F6:  MOVWF  x78
18F8:  MOVLW  04
18FA:  MOVWF  FF6
18FC:  MOVLW  02
18FE:  MOVWF  FF7
1900:  MOVLB  0
1902:  RCALL  12F0
....................    string[3] = '\0'; 
1904:  MOVLB  4
1906:  CLRF   x7D
....................    glcd_text57(1, 10, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
1908:  MOVLW  01
190A:  MOVLB  5
190C:  MOVWF  xD7
190E:  MOVLW  0A
1910:  MOVWF  xD8
1912:  MOVLW  04
1914:  MOVWF  xDA
1916:  MOVLW  7A
1918:  MOVWF  xD9
191A:  MOVLW  01
191C:  MOVWF  xDB
191E:  MOVWF  xDC
1920:  MOVLB  0
1922:  RCALL  1148
....................       
....................      
....................   //------LEITURA DO SENSOR DE string L3  -------- 
....................      
....................    set_adc_channel(2); 
1924:  MOVLW  10
1926:  MOVWF  01
1928:  MOVF   FC2,W
192A:  ANDLW  C7
192C:  IORWF  01,W
192E:  MOVWF  FC2
....................    delay_us(20); 
1930:  MOVLW  1A
1932:  MOVWF  00
1934:  DECFSZ 00,F
1936:  BRA    1934
1938:  NOP   
....................    mediaAD_L3=0; valor=0; tensao=0; 
193A:  MOVLB  4
193C:  CLRF   x52
193E:  CLRF   x51
1940:  CLRF   x58
1942:  CLRF   x57
1944:  CLRF   x56
1946:  CLRF   x55
1948:  CLRF   x54
194A:  CLRF   x53
....................     
....................    for(rep=1; rep<=8; rep++) 
194C:  MOVLW  01
194E:  MOVWF  x59
1950:  MOVF   x59,W
1952:  SUBLW  08
1954:  BNC   197E
....................    { 
....................      valor= read_adc(); 
1956:  BSF    FC2.2
1958:  BTFSC  FC2.2
195A:  BRA    1958
195C:  MOVFF  FC3,457
1960:  MOVFF  FC4,458
....................      delay_ms(4); 
1964:  MOVLW  04
1966:  MOVLB  5
1968:  MOVWF  xD7
196A:  MOVLB  0
196C:  CALL   03C6
....................      mediaAD_L3= mediaAD_L3 + valor; 
1970:  MOVLB  4
1972:  MOVF   x57,W
1974:  ADDWF  x51,F
1976:  MOVF   x58,W
1978:  ADDWFC x52,F
....................    } 
197A:  INCF   x59,F
197C:  BRA    1950
....................    mediaAD_L3= mediaAD_L3/8; 
197E:  RRCF   x52,F
1980:  RRCF   x51,F
1982:  RRCF   x52,F
1984:  RRCF   x51,F
1986:  RRCF   x52,F
1988:  RRCF   x51,F
198A:  MOVLW  1F
198C:  ANDWF  x52,F
....................    tensao=(float)mediaAD_L3*4.8828; 
198E:  MOVFF  452,5D8
1992:  MOVFF  451,5D7
1996:  MOVLB  0
1998:  CALL   082A
199C:  MOVFF  00,481
19A0:  MOVFF  01,482
19A4:  MOVFF  02,483
19A8:  MOVFF  03,484
19AC:  MOVFF  03,5E7
19B0:  MOVFF  02,5E6
19B4:  MOVFF  01,5E5
19B8:  MOVFF  00,5E4
19BC:  MOVLW  E6
19BE:  MOVLB  5
19C0:  MOVWF  xEB
19C2:  MOVLW  3F
19C4:  MOVWF  xEA
19C6:  MOVLW  1C
19C8:  MOVWF  xE9
19CA:  MOVLW  81
19CC:  MOVWF  xE8
19CE:  MOVLB  0
19D0:  CALL   0860
19D4:  MOVFF  03,456
19D8:  MOVFF  02,455
19DC:  MOVFF  01,454
19E0:  MOVFF  00,453
....................    L3_real=(float) (tensao - Offset_L3)/ref_L3; 
19E4:  MOVFF  43F,5D8
19E8:  MOVFF  43E,5D7
19EC:  CALL   082A
19F0:  BSF    FD8.1
19F2:  MOVFF  456,5DA
19F6:  MOVFF  455,5D9
19FA:  MOVFF  454,5D8
19FE:  MOVFF  453,5D7
1A02:  MOVFF  03,5DE
1A06:  MOVFF  02,5DD
1A0A:  MOVFF  01,5DC
1A0E:  MOVFF  00,5DB
1A12:  CALL   0956
1A16:  MOVFF  00,481
1A1A:  MOVFF  01,482
1A1E:  MOVFF  02,483
1A22:  MOVFF  03,484
1A26:  MOVFF  03,5DE
1A2A:  MOVFF  02,5DD
1A2E:  MOVFF  01,5DC
1A32:  MOVFF  00,5DB
1A36:  MOVFF  443,5E2
1A3A:  MOVFF  442,5E1
1A3E:  MOVFF  441,5E0
1A42:  MOVFF  440,5DF
1A46:  CALL   0BCE
1A4A:  MOVFF  03,44B
1A4E:  MOVFF  02,44A
1A52:  MOVFF  01,449
1A56:  MOVFF  00,448
....................       
....................    rep3++; 
1A5A:  MOVLB  4
1A5C:  INCF   x4C,F
....................    L3_eq=L3_eq+L3_real; 
1A5E:  BCF    FD8.1
1A60:  MOVFF  447,5DA
1A64:  MOVFF  446,5D9
1A68:  MOVFF  445,5D8
1A6C:  MOVFF  444,5D7
1A70:  MOVFF  44B,5DE
1A74:  MOVFF  44A,5DD
1A78:  MOVFF  449,5DC
1A7C:  MOVFF  448,5DB
1A80:  MOVLB  0
1A82:  CALL   0956
1A86:  MOVFF  03,447
1A8A:  MOVFF  02,446
1A8E:  MOVFF  01,445
1A92:  MOVFF  00,444
....................   
....................    if(rep3>=10) 
1A96:  MOVLB  4
1A98:  MOVF   x4C,W
1A9A:  SUBLW  09
1A9C:  BC    1AEE
....................    { 
....................     L3_eq = L3_eq/10;  
1A9E:  MOVFF  447,5DE
1AA2:  MOVFF  446,5DD
1AA6:  MOVFF  445,5DC
1AAA:  MOVFF  444,5DB
1AAE:  MOVLB  5
1AB0:  CLRF   xE2
1AB2:  CLRF   xE1
1AB4:  MOVLW  20
1AB6:  MOVWF  xE0
1AB8:  MOVLW  82
1ABA:  MOVWF  xDF
1ABC:  MOVLB  0
1ABE:  CALL   0BCE
1AC2:  MOVFF  03,447
1AC6:  MOVFF  02,446
1ACA:  MOVFF  01,445
1ACE:  MOVFF  00,444
....................     L3 = L3_eq; 
1AD2:  MOVFF  447,43D
1AD6:  MOVFF  446,43C
1ADA:  MOVFF  445,43B
1ADE:  MOVFF  444,43A
....................     rep3=0; 
1AE2:  MOVLB  4
1AE4:  CLRF   x4C
....................     L3_eq=0; 
1AE6:  CLRF   x47
1AE8:  CLRF   x46
1AEA:  CLRF   x45
1AEC:  CLRF   x44
....................    } 
....................     
....................       
....................    if (L3<0) 
1AEE:  MOVFF  43D,5DA
1AF2:  MOVFF  43C,5D9
1AF6:  MOVFF  43B,5D8
1AFA:  MOVFF  43A,5D7
1AFE:  MOVLB  5
1B00:  CLRF   xDE
1B02:  CLRF   xDD
1B04:  CLRF   xDC
1B06:  CLRF   xDB
1B08:  MOVLB  0
1B0A:  CALL   0D2C
1B0E:  BNC   1B1A
....................    { 
....................       L3=0; 
1B10:  MOVLB  4
1B12:  CLRF   x3D
1B14:  CLRF   x3C
1B16:  CLRF   x3B
1B18:  CLRF   x3A
....................    } 
....................       
....................    sprintf(string, "%.1f", (float)L3); // Converts adc em texto 
1B1A:  MOVLW  04
1B1C:  MOVLB  4
1B1E:  MOVWF  x79
1B20:  MOVLW  7A
1B22:  MOVWF  x78
1B24:  MOVLW  89
1B26:  MOVWF  FE9
1B28:  MOVFF  43D,5DA
1B2C:  MOVFF  43C,5D9
1B30:  MOVFF  43B,5D8
1B34:  MOVFF  43A,5D7
1B38:  MOVLW  01
1B3A:  MOVLB  5
1B3C:  MOVWF  xDB
1B3E:  MOVLB  0
1B40:  CALL   0EA0
....................    if(L3>=100) 
1B44:  MOVLB  5
1B46:  CLRF   xDA
1B48:  CLRF   xD9
1B4A:  MOVLW  48
1B4C:  MOVWF  xD8
1B4E:  MOVLW  85
1B50:  MOVWF  xD7
1B52:  MOVFF  43D,5DE
1B56:  MOVFF  43C,5DD
1B5A:  MOVFF  43B,5DC
1B5E:  MOVFF  43A,5DB
1B62:  MOVLB  0
1B64:  CALL   0D2C
1B68:  BC    1B6C
1B6A:  BNZ   1B74
....................    { 
....................      string[6] = '\0'; 
1B6C:  MOVLB  4
1B6E:  CLRF   x80
....................      string[5] = 'A'; 
1B70:  MOVLW  41
1B72:  MOVWF  x7F
....................    } 
....................    if(L3<100) 
1B74:  MOVFF  43D,5DA
1B78:  MOVFF  43C,5D9
1B7C:  MOVFF  43B,5D8
1B80:  MOVFF  43A,5D7
1B84:  MOVLB  5
1B86:  CLRF   xDE
1B88:  CLRF   xDD
1B8A:  MOVLW  48
1B8C:  MOVWF  xDC
1B8E:  MOVLW  85
1B90:  MOVWF  xDB
1B92:  MOVLB  0
1B94:  CALL   0D2C
1B98:  BNC   1BA2
....................    { 
....................      string[5] = '\0'; 
1B9A:  MOVLB  4
1B9C:  CLRF   x7F
....................      string[4] = 'A'; 
1B9E:  MOVLW  41
1BA0:  MOVWF  x7E
....................    } 
....................    if(L3<10) 
1BA2:  MOVFF  43D,5DA
1BA6:  MOVFF  43C,5D9
1BAA:  MOVFF  43B,5D8
1BAE:  MOVFF  43A,5D7
1BB2:  MOVLB  5
1BB4:  CLRF   xDE
1BB6:  CLRF   xDD
1BB8:  MOVLW  20
1BBA:  MOVWF  xDC
1BBC:  MOVLW  82
1BBE:  MOVWF  xDB
1BC0:  MOVLB  0
1BC2:  CALL   0D2C
1BC6:  BNC   1BD0
....................    { 
....................      string[4] = '\0'; 
1BC8:  MOVLB  4
1BCA:  CLRF   x7E
....................      string[3] = 'A'; 
1BCC:  MOVLW  41
1BCE:  MOVWF  x7D
....................    } 
....................       
....................    glcd_text57(18, 19, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
1BD0:  MOVLW  12
1BD2:  MOVLB  5
1BD4:  MOVWF  xD7
1BD6:  MOVLW  13
1BD8:  MOVWF  xD8
1BDA:  MOVLW  04
1BDC:  MOVWF  xDA
1BDE:  MOVLW  7A
1BE0:  MOVWF  xD9
1BE2:  MOVLW  01
1BE4:  MOVWF  xDB
1BE6:  MOVWF  xDC
1BE8:  MOVLB  0
1BEA:  CALL   1148
....................       
....................    sprintf(string, "L3:"); // converte char em texto 
1BEE:  MOVLW  04
1BF0:  MOVLB  4
1BF2:  MOVWF  x79
1BF4:  MOVLW  7A
1BF6:  MOVWF  x78
1BF8:  MOVLW  08
1BFA:  MOVWF  FF6
1BFC:  MOVLW  02
1BFE:  MOVWF  FF7
1C00:  MOVLB  0
1C02:  CALL   12F0
....................    string[3] = '\0'; 
1C06:  MOVLB  4
1C08:  CLRF   x7D
....................    glcd_text57(1, 19, string, 1, on);//printf (linha, coluna, string,tamanho, color)   
1C0A:  MOVLW  01
1C0C:  MOVLB  5
1C0E:  MOVWF  xD7
1C10:  MOVLW  13
1C12:  MOVWF  xD8
1C14:  MOVLW  04
1C16:  MOVWF  xDA
1C18:  MOVLW  7A
1C1A:  MOVWF  xD9
1C1C:  MOVLW  01
1C1E:  MOVWF  xDB
1C20:  MOVWF  xDC
1C22:  MOVLB  0
1C24:  CALL   1148
1C28:  MOVLB  4
....................      
....................   // glcd_update();//update glcd 
....................    
....................   } //if menu 
....................     
....................  }//leitura sensores 
1C2A:  MOVLB  0
1C2C:  GOTO   4228 (RETURN)
....................     
....................  void controle_saidas() 
.................... { 
....................   
....................  if(Mod_Start==0&&menu_lib==0||menu>=1) 
*
3E22:  MOVLB  4
3E24:  MOVF   x09,F
3E26:  BNZ   3E2C
3E28:  MOVF   x5B,F
3E2A:  BZ    3E32
3E2C:  MOVF   x5A,W
3E2E:  SUBLW  00
3E30:  BC    3EB0
....................  { 
....................   if(!input (pin_D0)) 
3E32:  BSF    F95.0
3E34:  BTFSC  F83.0
3E36:  BRA    3E3A
....................   { 
....................     start_on=0; 
3E38:  CLRF   x07
....................   } 
....................   if(!input(pin_D1)&&input(pin_D0)&&filtro==0) 
3E3A:  BSF    F95.1
3E3C:  BTFSC  F83.1
3E3E:  BRA    3E50
3E40:  BSF    F95.0
3E42:  BTFSS  F83.0
3E44:  BRA    3E50
3E46:  MOVF   x08,F
3E48:  BNZ   3E50
....................   { 
....................     start_on=1; 
3E4A:  MOVLW  01
3E4C:  MOVWF  x07
....................     filtro++; 
3E4E:  INCF   x08,F
....................   } 
....................   if(start_on==1) 
3E50:  DECFSZ x07,W
3E52:  BRA    3E66
....................   { 
....................     output_high(pin_C4); 
3E54:  BCF    F94.4
3E56:  BSF    F8B.4
....................     output_high(pin_D3); 
3E58:  BCF    F95.3
3E5A:  BSF    F8C.3
....................     output_low(pin_D2); 
3E5C:  BCF    F95.2
3E5E:  BCF    F8C.2
....................     tempo_on++;                                     
3E60:  INCF   x05,F
3E62:  BTFSC  FD8.2
3E64:  INCF   x06,F
....................   } 
....................   if(tempo_on==TempoET&&start_on==1)        
3E66:  MOVF   x5E,W
3E68:  SUBWF  x05,W
3E6A:  BNZ   3E88
3E6C:  MOVF   x06,F
3E6E:  BNZ   3E88
3E70:  DECFSZ x07,W
3E72:  BRA    3E88
....................   {  
....................     output_high(pin_C4); 
3E74:  BCF    F94.4
3E76:  BSF    F8B.4
....................     output_low(pin_D3); 
3E78:  BCF    F95.3
3E7A:  BCF    F8C.3
....................     output_high(pin_D2); 
3E7C:  BCF    F95.2
3E7E:  BSF    F8C.2
....................     start_on=2; 
3E80:  MOVLW  02
3E82:  MOVWF  x07
....................     tempo_on=0; 
3E84:  CLRF   x06
3E86:  CLRF   x05
....................   }  
....................   if(start_on==2) 
3E88:  MOVF   x07,W
3E8A:  SUBLW  02
3E8C:  BNZ   3E9A
....................   { 
....................     output_high(pin_C4); 
3E8E:  BCF    F94.4
3E90:  BSF    F8B.4
....................     output_low(pin_D3); 
3E92:  BCF    F95.3
3E94:  BCF    F8C.3
....................     output_high(pin_D2); 
3E96:  BCF    F95.2
3E98:  BSF    F8C.2
....................   } 
....................         
....................   if(start_on==0) 
3E9A:  MOVF   x07,F
3E9C:  BNZ   3EB0
....................   { 
....................     output_low(pin_C4); 
3E9E:  BCF    F94.4
3EA0:  BCF    F8B.4
....................     output_low(pin_D3); 
3EA2:  BCF    F95.3
3EA4:  BCF    F8C.3
....................     output_low(pin_D2); 
3EA6:  BCF    F95.2
3EA8:  BCF    F8C.2
....................     tempo_on=0;   
3EAA:  CLRF   x06
3EAC:  CLRF   x05
....................     filtro=0; 
3EAE:  CLRF   x08
....................   } 
....................  } //if controletring 
....................   
....................   
....................   
....................   if(Mod_Start==1&&menu_lib==0) 
3EB0:  DECFSZ x09,W
3EB2:  BRA    3F58
3EB4:  MOVF   x5B,F
3EB6:  BNZ   3F58
....................  { 
....................   if(!input (pin_D0)) 
3EB8:  BSF    F95.0
3EBA:  BTFSC  F83.0
3EBC:  BRA    3EC0
....................   { 
....................     start_on=0; 
3EBE:  CLRF   x07
....................   } 
....................   if(!input(pin_D1)&&input(pin_D0)&&filtro==0) 
3EC0:  BSF    F95.1
3EC2:  BTFSC  F83.1
3EC4:  BRA    3ED6
3EC6:  BSF    F95.0
3EC8:  BTFSS  F83.0
3ECA:  BRA    3ED6
3ECC:  MOVF   x08,F
3ECE:  BNZ   3ED6
....................   { 
....................     start_on=1; 
3ED0:  MOVLW  01
3ED2:  MOVWF  x07
....................     filtro++; 
3ED4:  INCF   x08,F
....................   } 
....................     if(pulse_qnd==pulse_qnd_set) 
3ED6:  MOVF   x13,W
3ED8:  SUBWF  x12,W
3EDA:  BNZ   3EE0
....................   { 
....................     output_high(pin_C4); 
3EDC:  BCF    F94.4
3EDE:  BSF    F8B.4
....................   } 
....................   if(start_on==1&&tempo_off_pulse==0&&pulse_qnd!=pulse_qnd_set) 
3EE0:  DECFSZ x07,W
3EE2:  BRA    3EFC
3EE4:  MOVF   x0C,F
3EE6:  BNZ   3EFC
3EE8:  MOVF   x0D,F
3EEA:  BNZ   3EFC
3EEC:  MOVF   x13,W
3EEE:  SUBWF  x12,W
3EF0:  BZ    3EFC
....................   { 
....................     output_high(pin_C4); 
3EF2:  BCF    F94.4
3EF4:  BSF    F8B.4
....................     tempo_on_pulse++;  
3EF6:  INCF   x0A,F
3EF8:  BTFSC  FD8.2
3EFA:  INCF   x0B,F
....................   } 
....................   if(tempo_on_pulse==tempo_on_pulse_set&&start_on==1&&pulse_qnd!=pulse_qnd_set)        
3EFC:  MOVF   x0E,W
3EFE:  SUBWF  x0A,W
3F00:  BNZ   3F1C
3F02:  MOVF   x0F,W
3F04:  SUBWF  x0B,W
3F06:  BNZ   3F1C
3F08:  DECFSZ x07,W
3F0A:  BRA    3F1C
3F0C:  MOVF   x13,W
3F0E:  SUBWF  x12,W
3F10:  BZ    3F1C
....................   {  
....................     output_low(pin_C4); 
3F12:  BCF    F94.4
3F14:  BCF    F8B.4
....................     tempo_off_pulse++; 
3F16:  INCF   x0C,F
3F18:  BTFSC  FD8.2
3F1A:  INCF   x0D,F
....................   }  
....................    if(tempo_off_pulse==tempo_off_pulse_set&&start_on==1&&pulse_qnd!=pulse_qnd_set)        
3F1C:  MOVF   x10,W
3F1E:  SUBWF  x0C,W
3F20:  BNZ   3F3C
3F22:  MOVF   x11,W
3F24:  SUBWF  x0D,W
3F26:  BNZ   3F3C
3F28:  DECFSZ x07,W
3F2A:  BRA    3F3C
3F2C:  MOVF   x13,W
3F2E:  SUBWF  x12,W
3F30:  BZ    3F3C
....................   {  
....................     tempo_on_pulse=0; 
3F32:  CLRF   x0B
3F34:  CLRF   x0A
....................     tempo_off_pulse=0; 
3F36:  CLRF   x0D
3F38:  CLRF   x0C
....................     pulse_qnd++; 
3F3A:  INCF   x12,F
....................   }  
....................         
....................   if(start_on==0) 
3F3C:  MOVF   x07,F
3F3E:  BNZ   3F58
....................   { 
....................     output_low(pin_C4); 
3F40:  BCF    F94.4
3F42:  BCF    F8B.4
....................     output_low(pin_D3); 
3F44:  BCF    F95.3
3F46:  BCF    F8C.3
....................     output_low(pin_D2);   
3F48:  BCF    F95.2
3F4A:  BCF    F8C.2
....................     filtro=0; 
3F4C:  CLRF   x08
....................     tempo_on_pulse=0; 
3F4E:  CLRF   x0B
3F50:  CLRF   x0A
....................     tempo_off_pulse=0;  
3F52:  CLRF   x0D
3F54:  CLRF   x0C
....................     pulse_qnd=0; 
3F56:  CLRF   x12
....................   } 
....................  } //if controletring 
....................   
.................... } //controle_saidas 
3F58:  MOVLB  0
3F5A:  GOTO   4236 (RETURN)
....................  
....................  void controle_menu() 
....................  { 
....................   glcd_fillScreen(OFF);//clear glcd 
*
2464:  MOVLB  5
2466:  CLRF   xD7
2468:  MOVLB  0
246A:  CALL   04F4
....................   if(!input(pin_E0)&&menu>0&&menu<6&&filtro_E0==0) // Condição de menu depois de menu=1 
246E:  BSF    F96.0
2470:  BTFSC  F84.0
2472:  BRA    249C
2474:  MOVLB  4
2476:  MOVF   x5A,F
2478:  BTFSS  FD8.2
247A:  BRA    2480
247C:  MOVLB  0
247E:  BRA    249C
2480:  MOVF   x5A,W
2482:  SUBLW  05
2484:  BTFSC  FD8.0
2486:  BRA    248C
2488:  MOVLB  0
248A:  BRA    249C
248C:  MOVF   x5C,F
248E:  BTFSC  FD8.2
2490:  BRA    2496
2492:  MOVLB  0
2494:  BRA    249C
....................   { 
....................    menu++; 
2496:  INCF   x5A,F
....................    filtro_E0++; 
2498:  INCF   x5C,F
249A:  MOVLB  0
....................   } 
....................   if(!input(pin_E0)&&menu_lib<5&&filtro_E0==0&&menu==0) //  
249C:  BSF    F96.0
249E:  BTFSC  F84.0
24A0:  BRA    24CA
24A2:  MOVLB  4
24A4:  MOVF   x5B,W
24A6:  SUBLW  04
24A8:  BTFSC  FD8.0
24AA:  BRA    24B0
24AC:  MOVLB  0
24AE:  BRA    24CA
24B0:  MOVF   x5C,F
24B2:  BTFSC  FD8.2
24B4:  BRA    24BA
24B6:  MOVLB  0
24B8:  BRA    24CA
24BA:  MOVF   x5A,F
24BC:  BTFSC  FD8.2
24BE:  BRA    24C4
24C0:  MOVLB  0
24C2:  BRA    24CA
....................   { 
....................    menu_lib++; 
24C4:  INCF   x5B,F
....................    filtro_E0++; 
24C6:  INCF   x5C,F
24C8:  MOVLB  0
....................   } 
....................    
....................   if(!input(pin_E0)&&menu_lib==1&&menu==0) // Condição de menu depois de menu=1 
24CA:  BSF    F96.0
24CC:  BTFSC  F84.0
24CE:  BRA    24E8
24D0:  MOVLB  4
24D2:  DECFSZ x5B,W
24D4:  BRA    24D8
24D6:  BRA    24DC
24D8:  MOVLB  0
24DA:  BRA    24E8
24DC:  MOVF   x5A,F
24DE:  BTFSC  FD8.2
24E0:  BRA    24E6
24E2:  MOVLB  0
24E4:  BRA    24E8
....................   { 
....................    filtro_E0++; 
24E6:  INCF   x5C,F
....................   } 
....................    
....................   if(filtro_E0>20) //Condição para entrar no primeiro menu de calibrações 
24E8:  MOVLB  4
24EA:  MOVF   x5C,W
24EC:  SUBLW  14
24EE:  BC    24F4
....................   { 
....................    menu=1; 
24F0:  MOVLW  01
24F2:  MOVWF  x5A
....................   } 
....................   
....................   if(input(pin_E0)) //Filtra tecla de descida  
24F4:  BSF    F96.0
24F6:  BTFSS  F84.0
24F8:  BRA    24FC
....................   { 
....................    filtro_E0=0; 
24FA:  CLRF   x5C
....................   } 
....................    
....................   if(!input(pin_C3)&&menu>0&&filtro_c3==0) // Sobe Menu 
24FC:  BSF    F94.3
24FE:  BTFSC  F82.3
2500:  BRA    2510
2502:  MOVF   x5A,F
2504:  BZ    2510
2506:  MOVF   x5D,F
2508:  BNZ   2510
....................   { 
....................    menu--; 
250A:  DECF   x5A,F
....................    filtro_c3++; 
250C:  INCF   x5D,F
....................    start_on=0; 
250E:  CLRF   x07
....................   } 
....................    if(!input(pin_C3)&&menu_lib>0&&filtro_c3==0) // Sobe Menu 
2510:  BSF    F94.3
2512:  BTFSC  F82.3
2514:  BRA    2524
2516:  MOVF   x5B,F
2518:  BZ    2524
251A:  MOVF   x5D,F
251C:  BNZ   2524
....................   { 
....................    menu_lib--; 
251E:  DECF   x5B,F
....................    filtro_c3++; 
2520:  INCF   x5D,F
....................    start_on=0; 
2522:  CLRF   x07
....................   } 
....................    
....................   if(input(pin_C3)) // Filtra tecla de subida 
2524:  BSF    F94.3
2526:  BTFSS  F82.3
2528:  BRA    252C
....................   { 
....................    filtro_c3=0; 
252A:  CLRF   x5D
....................   } 
....................      
....................   if(menu_lib==1&&menu==0)  //Menu de ajuste do tempo de estrela / triangulo 
252C:  DECFSZ x5B,W
252E:  BRA    267C
2530:  MOVF   x5A,F
2532:  BTFSS  FD8.2
2534:  BRA    267C
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
2536:  MOVLB  5
2538:  CLRF   xD7
253A:  MOVLB  0
253C:  CALL   04F4
....................     
....................    char string[41]; 
....................    sprintf(string, "Defina o tempo do    Estrela / Triangulo"); // converte char em texto 
2540:  MOVLW  04
2542:  MOVLB  4
2544:  MOVWF  x79
2546:  MOVLW  7A
2548:  MOVWF  x78
254A:  MOVLW  0C
254C:  MOVWF  FF6
254E:  MOVLW  02
2550:  MOVWF  FF7
2552:  MOVLB  0
2554:  CALL   12F0
....................    string[40] = '\0'; 
2558:  MOVLB  4
255A:  CLRF   xA2
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
255C:  MOVLW  01
255E:  MOVLB  5
2560:  MOVWF  xD7
2562:  MOVWF  xD8
2564:  MOVLW  04
2566:  MOVWF  xDA
2568:  MOVLW  7A
256A:  MOVWF  xD9
256C:  MOVLW  01
256E:  MOVWF  xDB
2570:  MOVWF  xDC
2572:  MOVLB  0
2574:  CALL   1148
....................     
....................    sprintf(string, "Tempo:"); // converte char em texto 
2578:  MOVLW  04
257A:  MOVLB  4
257C:  MOVWF  x79
257E:  MOVLW  7A
2580:  MOVWF  x78
2582:  MOVLW  36
2584:  MOVWF  FF6
2586:  MOVLW  02
2588:  MOVWF  FF7
258A:  MOVLB  0
258C:  CALL   12F0
....................    string[6] = '\0'; 
2590:  MOVLB  4
2592:  CLRF   x80
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2594:  MOVLW  01
2596:  MOVLB  5
2598:  MOVWF  xD7
259A:  MOVLW  19
259C:  MOVWF  xD8
259E:  MOVLW  04
25A0:  MOVWF  xDA
25A2:  MOVLW  7A
25A4:  MOVWF  xD9
25A6:  MOVLW  01
25A8:  MOVWF  xDB
25AA:  MOVWF  xDC
25AC:  MOVLB  0
25AE:  CALL   1148
....................     
....................    sprintf(string, "%.1f",TempoETreal); // Converte adc em texto 
25B2:  MOVLW  04
25B4:  MOVLB  4
25B6:  MOVWF  x79
25B8:  MOVLW  7A
25BA:  MOVWF  x78
25BC:  MOVLW  89
25BE:  MOVWF  FE9
25C0:  MOVFF  462,5DA
25C4:  MOVFF  461,5D9
25C8:  MOVFF  460,5D8
25CC:  MOVFF  45F,5D7
25D0:  MOVLW  01
25D2:  MOVLB  5
25D4:  MOVWF  xDB
25D6:  MOVLB  0
25D8:  CALL   0EA0
....................    string[4] = '\0'; 
25DC:  MOVLB  4
25DE:  CLRF   x7E
....................    string[3] = 's'; 
25E0:  MOVLW  73
25E2:  MOVWF  x7D
....................     
....................  
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
25E4:  MOVLW  32
25E6:  MOVLB  5
25E8:  MOVWF  xD7
25EA:  MOVLW  19
25EC:  MOVWF  xD8
25EE:  MOVLW  04
25F0:  MOVWF  xDA
25F2:  MOVLW  7A
25F4:  MOVWF  xD9
25F6:  MOVLW  01
25F8:  MOVWF  xDB
25FA:  MOVWF  xDC
25FC:  MOVLB  0
25FE:  CALL   1148
....................     
....................    if(!input(pin_E1)&&TempoET<45) //incrementa && valor maximo 
2602:  BSF    F96.1
2604:  BTFSC  F84.1
2606:  BRA    261A
2608:  MOVLB  4
260A:  MOVF   x5E,W
260C:  SUBLW  2C
260E:  BTFSC  FD8.0
2610:  BRA    2616
2612:  MOVLB  0
2614:  BRA    261A
....................    { 
....................     TempoET++; 
2616:  INCF   x5E,F
2618:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&TempoET>5) //decrementa && valor minimo 
261A:  BSF    F94.2
261C:  BTFSC  F82.2
261E:  BRA    2630
2620:  MOVLB  4
2622:  MOVF   x5E,W
2624:  SUBLW  05
2626:  BTFSS  FD8.0
2628:  BRA    262E
262A:  MOVLB  0
262C:  BRA    2630
....................    { 
....................     TempoET--; 
262E:  DECF   x5E,F
....................    } 
....................    TempoETreal = TempoET/4.54; //converte em segungos 
2630:  MOVLB  5
2632:  CLRF   xD8
2634:  MOVFF  45E,5D7
2638:  MOVLB  0
263A:  CALL   082A
263E:  MOVFF  03,5DE
2642:  MOVFF  02,5DD
2646:  MOVFF  01,5DC
264A:  MOVFF  00,5DB
264E:  MOVLW  AE
2650:  MOVLB  5
2652:  MOVWF  xE2
2654:  MOVLW  47
2656:  MOVWF  xE1
2658:  MOVLW  11
265A:  MOVWF  xE0
265C:  MOVLW  81
265E:  MOVWF  xDF
2660:  MOVLB  0
2662:  CALL   0BCE
2666:  MOVFF  03,462
266A:  MOVFF  02,461
266E:  MOVFF  01,460
2672:  MOVFF  00,45F
....................     
....................    glcd_update();//update glcd 
2676:  CALL   0630
267A:  MOVLB  4
....................    
....................   } //if menu_lib=1 
....................    
....................    
....................   if(start_on==0&&menu_lib==2||menu_lib==3||menu_lib==4||menu_lib==5)  //Menu de ajuste do modo de start 
267C:  MOVF   x07,F
267E:  BNZ   2686
2680:  MOVF   x5B,W
2682:  SUBLW  02
2684:  BZ    269A
2686:  MOVF   x5B,W
2688:  SUBLW  03
268A:  BZ    269A
268C:  MOVF   x5B,W
268E:  SUBLW  04
2690:  BZ    269A
2692:  MOVF   x5B,W
2694:  SUBLW  05
2696:  BTFSS  FD8.2
2698:  BRA    29F6
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
269A:  MOVLB  5
269C:  CLRF   xD7
269E:  MOVLB  0
26A0:  CALL   04F4
....................    
....................    char string[41]; 
....................    sprintf(string, "Modo de ligamento"); // converte char em texto 
26A4:  MOVLW  04
26A6:  MOVLB  4
26A8:  MOVWF  x79
26AA:  MOVLW  A3
26AC:  MOVWF  x78
26AE:  MOVLW  3E
26B0:  MOVWF  FF6
26B2:  MOVLW  02
26B4:  MOVWF  FF7
26B6:  MOVLB  0
26B8:  CALL   12F0
....................    string[40] = '\0'; 
26BC:  MOVLB  4
26BE:  CLRF   xCB
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
26C0:  MOVLW  01
26C2:  MOVLB  5
26C4:  MOVWF  xD7
26C6:  MOVWF  xD8
26C8:  MOVLW  04
26CA:  MOVWF  xDA
26CC:  MOVLW  A3
26CE:  MOVWF  xD9
26D0:  MOVLW  01
26D2:  MOVWF  xDB
26D4:  MOVWF  xDC
26D6:  MOVLB  0
26D8:  CALL   1148
....................     
....................    sprintf(string, "Tipo:"); // converte char em texto 
26DC:  MOVLW  04
26DE:  MOVLB  4
26E0:  MOVWF  x79
26E2:  MOVLW  A3
26E4:  MOVWF  x78
26E6:  MOVLW  50
26E8:  MOVWF  FF6
26EA:  MOVLW  02
26EC:  MOVWF  FF7
26EE:  MOVLB  0
26F0:  CALL   12F0
....................    string[5] = '\0'; 
26F4:  MOVLB  4
26F6:  CLRF   xA8
....................    glcd_text57(1, 15, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
26F8:  MOVLW  01
26FA:  MOVLB  5
26FC:  MOVWF  xD7
26FE:  MOVLW  0F
2700:  MOVWF  xD8
2702:  MOVLW  04
2704:  MOVWF  xDA
2706:  MOVLW  A3
2708:  MOVWF  xD9
270A:  MOVLW  01
270C:  MOVWF  xDB
270E:  MOVWF  xDC
2710:  MOVLB  0
2712:  CALL   1148
....................     
....................    IF(Mod_Start==1) 
2716:  MOVLB  4
2718:  DECFSZ x09,W
271A:  BRA    2756
....................    { 
....................    sprintf(string, "Pulso"); // converte char em texto 
271C:  MOVLW  04
271E:  MOVWF  x79
2720:  MOVLW  A3
2722:  MOVWF  x78
2724:  MOVLW  56
2726:  MOVWF  FF6
2728:  MOVLW  02
272A:  MOVWF  FF7
272C:  MOVLB  0
272E:  CALL   12F0
....................    string[7] = '\0'; 
2732:  MOVLB  4
2734:  CLRF   xAA
....................    glcd_text57(70, 15, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2736:  MOVLW  46
2738:  MOVLB  5
273A:  MOVWF  xD7
273C:  MOVLW  0F
273E:  MOVWF  xD8
2740:  MOVLW  04
2742:  MOVWF  xDA
2744:  MOVLW  A3
2746:  MOVWF  xD9
2748:  MOVLW  01
274A:  MOVWF  xDB
274C:  MOVWF  xDC
274E:  MOVLB  0
2750:  CALL   1148
2754:  MOVLB  4
....................    } 
....................    IF(Mod_Start==0) 
2756:  MOVF   x09,F
2758:  BNZ   2794
....................    { 
....................    sprintf(string, "Direto"); // converte char em texto 
275A:  MOVLW  04
275C:  MOVWF  x79
275E:  MOVLW  A3
2760:  MOVWF  x78
2762:  MOVLW  5C
2764:  MOVWF  FF6
2766:  MOVLW  02
2768:  MOVWF  FF7
276A:  MOVLB  0
276C:  CALL   12F0
....................    string[7] = '\0'; 
2770:  MOVLB  4
2772:  CLRF   xAA
....................    glcd_text57(70, 15, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2774:  MOVLW  46
2776:  MOVLB  5
2778:  MOVWF  xD7
277A:  MOVLW  0F
277C:  MOVWF  xD8
277E:  MOVLW  04
2780:  MOVWF  xDA
2782:  MOVLW  A3
2784:  MOVWF  xD9
2786:  MOVLW  01
2788:  MOVWF  xDB
278A:  MOVWF  xDC
278C:  MOVLB  0
278E:  CALL   1148
2792:  MOVLB  4
....................    } 
....................     
....................    sprintf(string, "Pulsos ON:"); // converte char em texto 
2794:  MOVLW  04
2796:  MOVWF  x79
2798:  MOVLW  A3
279A:  MOVWF  x78
279C:  MOVLW  64
279E:  MOVWF  FF6
27A0:  MOVLW  02
27A2:  MOVWF  FF7
27A4:  MOVLB  0
27A6:  CALL   12F0
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
27AA:  MOVLW  01
27AC:  MOVLB  5
27AE:  MOVWF  xD7
27B0:  MOVLW  23
27B2:  MOVWF  xD8
27B4:  MOVLW  04
27B6:  MOVWF  xDA
27B8:  MOVLW  A3
27BA:  MOVWF  xD9
27BC:  MOVLW  01
27BE:  MOVWF  xDB
27C0:  MOVWF  xDC
27C2:  MOVLB  0
27C4:  CALL   1148
....................     
....................    sprintf(string, "%ld",tempo_on_pulse_set); // Converte adc em texto 
27C8:  MOVLW  04
27CA:  MOVLB  4
27CC:  MOVWF  x79
27CE:  MOVLW  A3
27D0:  MOVWF  x78
27D2:  MOVLW  10
27D4:  MOVWF  FE9
27D6:  MOVFF  40F,5D8
27DA:  MOVFF  40E,5D7
27DE:  MOVLB  0
27E0:  RCALL  216C
....................    glcd_text57(70, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
27E2:  MOVLW  46
27E4:  MOVLB  5
27E6:  MOVWF  xD7
27E8:  MOVLW  23
27EA:  MOVWF  xD8
27EC:  MOVLW  04
27EE:  MOVWF  xDA
27F0:  MOVLW  A3
27F2:  MOVWF  xD9
27F4:  MOVLW  01
27F6:  MOVWF  xDB
27F8:  MOVWF  xDC
27FA:  MOVLB  0
27FC:  CALL   1148
....................     
....................    sprintf(string, "Pulsos OFF:"); // converte char em texto 
2800:  MOVLW  04
2802:  MOVLB  4
2804:  MOVWF  x79
2806:  MOVLW  A3
2808:  MOVWF  x78
280A:  MOVLW  70
280C:  MOVWF  FF6
280E:  MOVLW  02
2810:  MOVWF  FF7
2812:  MOVLB  0
2814:  CALL   12F0
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2818:  MOVLW  01
281A:  MOVLB  5
281C:  MOVWF  xD7
281E:  MOVLW  2D
2820:  MOVWF  xD8
2822:  MOVLW  04
2824:  MOVWF  xDA
2826:  MOVLW  A3
2828:  MOVWF  xD9
282A:  MOVLW  01
282C:  MOVWF  xDB
282E:  MOVWF  xDC
2830:  MOVLB  0
2832:  CALL   1148
....................     
....................    sprintf(string, "%ld",tempo_off_pulse_set); // Converte adc em texto 
2836:  MOVLW  04
2838:  MOVLB  4
283A:  MOVWF  x79
283C:  MOVLW  A3
283E:  MOVWF  x78
2840:  MOVLW  10
2842:  MOVWF  FE9
2844:  MOVFF  411,5D8
2848:  MOVFF  410,5D7
284C:  MOVLB  0
284E:  RCALL  216C
....................    glcd_text57(70, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2850:  MOVLW  46
2852:  MOVLB  5
2854:  MOVWF  xD7
2856:  MOVLW  2D
2858:  MOVWF  xD8
285A:  MOVLW  04
285C:  MOVWF  xDA
285E:  MOVLW  A3
2860:  MOVWF  xD9
2862:  MOVLW  01
2864:  MOVWF  xDB
2866:  MOVWF  xDC
2868:  MOVLB  0
286A:  CALL   1148
....................     
....................    sprintf(string, "Quantidade:"); // converte char em texto 
286E:  MOVLW  04
2870:  MOVLB  4
2872:  MOVWF  x79
2874:  MOVLW  A3
2876:  MOVWF  x78
2878:  MOVLW  7C
287A:  MOVWF  FF6
287C:  MOVLW  02
287E:  MOVWF  FF7
2880:  MOVLB  0
2882:  CALL   12F0
....................    glcd_text57(1, 55, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2886:  MOVLW  01
2888:  MOVLB  5
288A:  MOVWF  xD7
288C:  MOVLW  37
288E:  MOVWF  xD8
2890:  MOVLW  04
2892:  MOVWF  xDA
2894:  MOVLW  A3
2896:  MOVWF  xD9
2898:  MOVLW  01
289A:  MOVWF  xDB
289C:  MOVWF  xDC
289E:  MOVLB  0
28A0:  CALL   1148
....................     
....................    sprintf(string, "%d",pulse_qnd_set); // Converte adc em texto 
28A4:  MOVLW  04
28A6:  MOVLB  4
28A8:  MOVWF  x79
28AA:  MOVLW  A3
28AC:  MOVWF  x78
28AE:  MOVFF  413,5D7
28B2:  MOVLW  18
28B4:  MOVLB  5
28B6:  MOVWF  xD8
28B8:  MOVLB  0
28BA:  CALL   1CE0
....................    glcd_text57(70, 55, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
28BE:  MOVLW  46
28C0:  MOVLB  5
28C2:  MOVWF  xD7
28C4:  MOVLW  37
28C6:  MOVWF  xD8
28C8:  MOVLW  04
28CA:  MOVWF  xDA
28CC:  MOVLW  A3
28CE:  MOVWF  xD9
28D0:  MOVLW  01
28D2:  MOVWF  xDB
28D4:  MOVWF  xDC
28D6:  MOVLB  0
28D8:  CALL   1148
....................     
....................    glcd_update();//update glcd 
28DC:  CALL   0630
....................    if(menu_lib==2) 
28E0:  MOVLB  4
28E2:  MOVF   x5B,W
28E4:  SUBLW  02
28E6:  BNZ   292C
....................    { 
....................     
....................    glcd_rect(0, 14, 120, 22, yes, on); 
28E8:  MOVLB  5
28EA:  CLRF   xD7
28EC:  MOVLW  0E
28EE:  MOVWF  xD8
28F0:  MOVLW  78
28F2:  MOVWF  xD9
28F4:  MOVLW  16
28F6:  MOVWF  xDA
28F8:  MOVLW  01
28FA:  MOVWF  xDB
28FC:  MOVWF  xDC
28FE:  MOVLB  0
2900:  RCALL  23A0
....................    if(!input(pin_E1)&&Mod_Start<1) //incrementa && valor maximo 
2902:  BSF    F96.1
2904:  BTFSC  F84.1
2906:  BRA    2918
2908:  MOVLB  4
290A:  MOVF   x09,F
290C:  BTFSC  FD8.2
290E:  BRA    2914
2910:  MOVLB  0
2912:  BRA    2918
....................    { 
....................     Mod_Start++; 
2914:  INCF   x09,F
2916:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&Mod_Start>0) //decrementa && valor minimo 
2918:  BSF    F94.2
291A:  BTFSC  F82.2
291C:  BRA    292E
291E:  MOVLB  4
2920:  MOVF   x09,F
2922:  BTFSS  FD8.2
2924:  BRA    292A
2926:  MOVLB  0
2928:  BRA    292E
....................    { 
....................     Mod_Start--; 
292A:  DECF   x09,F
292C:  MOVLB  0
....................    } 
....................    } 
....................     if(menu_lib==3)  //Menu de calibração do sensor L1 (offset) 
292E:  MOVLB  4
2930:  MOVF   x5B,W
2932:  SUBLW  03
2934:  BNZ   2970
....................    { 
....................    // glcd_fillScreen(OFF);//clear glcd 
....................     glcd_rect(0, 34, 120, 42, yes, on); 
2936:  MOVLB  5
2938:  CLRF   xD7
293A:  MOVLW  22
293C:  MOVWF  xD8
293E:  MOVLW  78
2940:  MOVWF  xD9
2942:  MOVLW  2A
2944:  MOVWF  xDA
2946:  MOVLW  01
2948:  MOVWF  xDB
294A:  MOVWF  xDC
294C:  MOVLB  0
294E:  RCALL  23A0
....................     
....................     if(!input(pin_E1)) //incrementa && valor maximo 
2950:  BSF    F96.1
2952:  BTFSC  F84.1
2954:  BRA    2960
....................     { 
....................      tempo_on_pulse_set++; 
2956:  MOVLB  4
2958:  INCF   x0E,F
295A:  BTFSC  FD8.2
295C:  INCF   x0F,F
295E:  MOVLB  0
....................     } 
....................     if(!input(pin_C2)) //decrementa && valor minimo 
2960:  BSF    F94.2
2962:  BTFSC  F82.2
2964:  BRA    2972
....................     { 
....................      tempo_on_pulse_set--; 
2966:  MOVLB  4
2968:  MOVF   x0E,W
296A:  BTFSC  FD8.2
296C:  DECF   x0F,F
296E:  DECF   x0E,F
2970:  MOVLB  0
....................     } 
....................    } 
....................    
....................   if(menu_lib==4)  //Menu de calibração do sensor L1 (Ref) 
2972:  MOVLB  4
2974:  MOVF   x5B,W
2976:  SUBLW  04
2978:  BNZ   29B4
....................   { 
....................    glcd_rect(0, 44, 120, 52, yes, on); 
297A:  MOVLB  5
297C:  CLRF   xD7
297E:  MOVLW  2C
2980:  MOVWF  xD8
2982:  MOVLW  78
2984:  MOVWF  xD9
2986:  MOVLW  34
2988:  MOVWF  xDA
298A:  MOVLW  01
298C:  MOVWF  xDB
298E:  MOVWF  xDC
2990:  MOVLB  0
2992:  RCALL  23A0
....................     
....................    if(!input(pin_E1)) //incrementa && valor maximo 
2994:  BSF    F96.1
2996:  BTFSC  F84.1
2998:  BRA    29A4
....................    { 
....................      tempo_off_pulse_set++; 
299A:  MOVLB  4
299C:  INCF   x10,F
299E:  BTFSC  FD8.2
29A0:  INCF   x11,F
29A2:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)) //decrementa && valor minimo 
29A4:  BSF    F94.2
29A6:  BTFSC  F82.2
29A8:  BRA    29B6
....................    { 
....................      tempo_off_pulse_set--; 
29AA:  MOVLB  4
29AC:  MOVF   x10,W
29AE:  BTFSC  FD8.2
29B0:  DECF   x11,F
29B2:  DECF   x10,F
29B4:  MOVLB  0
....................    } 
....................   } 
....................  
....................   if(menu_lib==5)  //Menu de calibração do sensor L1 (Ref) 
29B6:  MOVLB  4
29B8:  MOVF   x5B,W
29BA:  SUBLW  05
29BC:  BNZ   29EE
....................   { 
....................    //glcd_fillScreen(OFF);//clear glcd 
....................    glcd_rect(0, 54, 120, 62, yes, on); 
29BE:  MOVLB  5
29C0:  CLRF   xD7
29C2:  MOVLW  36
29C4:  MOVWF  xD8
29C6:  MOVLW  78
29C8:  MOVWF  xD9
29CA:  MOVLW  3E
29CC:  MOVWF  xDA
29CE:  MOVLW  01
29D0:  MOVWF  xDB
29D2:  MOVWF  xDC
29D4:  MOVLB  0
29D6:  RCALL  23A0
....................     
....................    if(!input(pin_E1)) //incrementa && valor maximo 
29D8:  BSF    F96.1
29DA:  BTFSC  F84.1
29DC:  BRA    29E4
....................    { 
....................      pulse_qnd_set++; 
29DE:  MOVLB  4
29E0:  INCF   x13,F
29E2:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)) //decrementa && valor minimo 
29E4:  BSF    F94.2
29E6:  BTFSC  F82.2
29E8:  BRA    29F0
....................    { 
....................      pulse_qnd_set--; 
29EA:  MOVLB  4
29EC:  DECF   x13,F
29EE:  MOVLB  0
....................    } 
....................   } 
....................    
....................   glcd_update();//update glcd 
29F0:  CALL   0630
29F4:  MOVLB  4
....................   } 
....................  
....................   if(menu==1)  //Menu de calibração do sensor L1 (offset) 
29F6:  DECFSZ x5A,W
29F8:  BRA    2BA2
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
29FA:  MOVLB  5
29FC:  CLRF   xD7
29FE:  MOVLB  0
2A00:  CALL   04F4
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L1"); // converte char em texto 
2A04:  MOVLW  04
2A06:  MOVLB  4
2A08:  MOVWF  x79
2A0A:  MOVLW  CC
2A0C:  MOVWF  x78
2A0E:  MOVLW  88
2A10:  MOVWF  FF6
2A12:  MOVLW  02
2A14:  MOVWF  FF7
2A16:  MOVLB  0
2A18:  CALL   12F0
....................    string[40] = '\0'; 
2A1C:  MOVLB  4
2A1E:  CLRF   xF4
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2A20:  MOVLW  01
2A22:  MOVLB  5
2A24:  MOVWF  xD7
2A26:  MOVWF  xD8
2A28:  MOVLW  04
2A2A:  MOVWF  xDA
2A2C:  MOVLW  CC
2A2E:  MOVWF  xD9
2A30:  MOVLW  01
2A32:  MOVWF  xDB
2A34:  MOVWF  xDC
2A36:  MOVLB  0
2A38:  CALL   1148
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
2A3C:  MOVLB  5
2A3E:  CLRF   xD7
2A40:  MOVLW  18
2A42:  MOVWF  xD8
2A44:  MOVLW  50
2A46:  MOVWF  xD9
2A48:  MOVLW  20
2A4A:  MOVWF  xDA
2A4C:  MOVLW  01
2A4E:  MOVWF  xDB
2A50:  MOVWF  xDC
2A52:  MOVLB  0
2A54:  RCALL  23A0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
2A56:  MOVLW  04
2A58:  MOVLB  4
2A5A:  MOVWF  x79
2A5C:  MOVLW  CC
2A5E:  MOVWF  x78
2A60:  MOVLW  AA
2A62:  MOVWF  FF6
2A64:  MOVLW  02
2A66:  MOVWF  FF7
2A68:  MOVLB  0
2A6A:  CALL   12F0
....................    glcd_text57(1, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2A6E:  MOVLW  01
2A70:  MOVLB  5
2A72:  MOVWF  xD7
2A74:  MOVLW  19
2A76:  MOVWF  xD8
2A78:  MOVLW  04
2A7A:  MOVWF  xDA
2A7C:  MOVLW  CC
2A7E:  MOVWF  xD9
2A80:  MOVLW  01
2A82:  MOVWF  xDB
2A84:  CLRF   xDC
2A86:  MOVLB  0
2A88:  CALL   1148
....................     
....................    sprintf(string, "%ld",Offset_L1); // Converte adc em texto 
2A8C:  MOVLW  04
2A8E:  MOVLB  4
2A90:  MOVWF  x79
2A92:  MOVLW  CC
2A94:  MOVWF  x78
2A96:  MOVLW  10
2A98:  MOVWF  FE9
2A9A:  MOVFF  419,5D8
2A9E:  MOVFF  418,5D7
2AA2:  MOVLB  0
2AA4:  CALL   216C
....................    glcd_text57(50, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2AA8:  MOVLW  32
2AAA:  MOVLB  5
2AAC:  MOVWF  xD7
2AAE:  MOVLW  19
2AB0:  MOVWF  xD8
2AB2:  MOVLW  04
2AB4:  MOVWF  xDA
2AB6:  MOVLW  CC
2AB8:  MOVWF  xD9
2ABA:  MOVLW  01
2ABC:  MOVWF  xDB
2ABE:  CLRF   xDC
2AC0:  MOVLB  0
2AC2:  CALL   1148
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
2AC6:  MOVLW  04
2AC8:  MOVLB  4
2ACA:  MOVWF  x79
2ACC:  MOVLW  CC
2ACE:  MOVWF  x78
2AD0:  MOVLW  B2
2AD2:  MOVWF  FF6
2AD4:  MOVLW  02
2AD6:  MOVWF  FF7
2AD8:  MOVLB  0
2ADA:  CALL   12F0
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2ADE:  MOVLW  01
2AE0:  MOVLB  5
2AE2:  MOVWF  xD7
2AE4:  MOVLW  23
2AE6:  MOVWF  xD8
2AE8:  MOVLW  04
2AEA:  MOVWF  xDA
2AEC:  MOVLW  CC
2AEE:  MOVWF  xD9
2AF0:  MOVLW  01
2AF2:  MOVWF  xDB
2AF4:  MOVWF  xDC
2AF6:  MOVLB  0
2AF8:  CALL   1148
....................     
....................    sprintf(string, "%f",ref_L1); // Converte adc em texto 
2AFC:  MOVLW  04
2AFE:  MOVLB  4
2B00:  MOVWF  x79
2B02:  MOVLW  CC
2B04:  MOVWF  x78
2B06:  MOVLW  89
2B08:  MOVWF  FE9
2B0A:  MOVFF  41D,5DA
2B0E:  MOVFF  41C,5D9
2B12:  MOVFF  41B,5D8
2B16:  MOVFF  41A,5D7
2B1A:  MOVLW  02
2B1C:  MOVLB  5
2B1E:  MOVWF  xDB
2B20:  MOVLB  0
2B22:  CALL   0EA0
....................    glcd_text57(50, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2B26:  MOVLW  32
2B28:  MOVLB  5
2B2A:  MOVWF  xD7
2B2C:  MOVLW  23
2B2E:  MOVWF  xD8
2B30:  MOVLW  04
2B32:  MOVWF  xDA
2B34:  MOVLW  CC
2B36:  MOVWF  xD9
2B38:  MOVLW  01
2B3A:  MOVWF  xDB
2B3C:  MOVWF  xDC
2B3E:  MOVLB  0
2B40:  CALL   1148
....................     
....................    if(!input(pin_E1)&&Offset_L1<5000) //incrementa && valor maximo 
2B44:  BSF    F96.1
2B46:  BTFSC  F84.1
2B48:  BRA    2B6E
2B4A:  MOVLB  4
2B4C:  MOVF   x19,W
2B4E:  SUBLW  13
2B50:  BTFSC  FD8.0
2B52:  BRA    2B58
2B54:  MOVLB  0
2B56:  BRA    2B6E
2B58:  BNZ   2B66
2B5A:  MOVF   x18,W
2B5C:  SUBLW  87
2B5E:  BTFSC  FD8.0
2B60:  BRA    2B66
2B62:  MOVLB  0
2B64:  BRA    2B6E
....................    { 
....................      Offset_L1++; 
2B66:  INCF   x18,F
2B68:  BTFSC  FD8.2
2B6A:  INCF   x19,F
2B6C:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&Offset_L1>2000) //decrementa && valor minimo 
2B6E:  BSF    F94.2
2B70:  BTFSC  F82.2
2B72:  BRA    2B9C
2B74:  MOVLB  4
2B76:  MOVF   x19,W
2B78:  SUBLW  06
2B7A:  BTFSS  FD8.0
2B7C:  BRA    2B82
2B7E:  MOVLB  0
2B80:  BRA    2B9C
2B82:  XORLW  FF
2B84:  BNZ   2B92
2B86:  MOVF   x18,W
2B88:  SUBLW  D0
2B8A:  BTFSS  FD8.0
2B8C:  BRA    2B92
2B8E:  MOVLB  0
2B90:  BRA    2B9C
....................    { 
....................      Offset_L1--; 
2B92:  MOVF   x18,W
2B94:  BTFSC  FD8.2
2B96:  DECF   x19,F
2B98:  DECF   x18,F
2B9A:  MOVLB  0
....................    } 
....................    glcd_update();//update glcd 
2B9C:  CALL   0630
2BA0:  MOVLB  4
....................    
....................   }//if menu=2 
....................    
....................   if(menu==2)  //Menu de calibração do sensor L1 (Ref) 
2BA2:  MOVF   x5A,W
2BA4:  SUBLW  02
2BA6:  BTFSS  FD8.2
2BA8:  BRA    2DC6
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
2BAA:  MOVLB  5
2BAC:  CLRF   xD7
2BAE:  MOVLB  0
2BB0:  CALL   04F4
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L1"); // converte char em texto 
2BB4:  MOVLW  04
2BB6:  MOVLB  4
2BB8:  MOVWF  x79
2BBA:  MOVLW  F5
2BBC:  MOVWF  x78
2BBE:  MOVLW  B8
2BC0:  MOVWF  FF6
2BC2:  MOVLW  02
2BC4:  MOVWF  FF7
2BC6:  MOVLB  0
2BC8:  CALL   12F0
....................    string[40] = '\0'; 
2BCC:  MOVLB  5
2BCE:  CLRF   x1D
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2BD0:  MOVLW  01
2BD2:  MOVWF  xD7
2BD4:  MOVWF  xD8
2BD6:  MOVLW  04
2BD8:  MOVWF  xDA
2BDA:  MOVLW  F5
2BDC:  MOVWF  xD9
2BDE:  MOVLW  01
2BE0:  MOVWF  xDB
2BE2:  MOVWF  xDC
2BE4:  MOVLB  0
2BE6:  CALL   1148
....................     
....................    glcd_rect(0, 34, 80, 42, yes, on); 
2BEA:  MOVLB  5
2BEC:  CLRF   xD7
2BEE:  MOVLW  22
2BF0:  MOVWF  xD8
2BF2:  MOVLW  50
2BF4:  MOVWF  xD9
2BF6:  MOVLW  2A
2BF8:  MOVWF  xDA
2BFA:  MOVLW  01
2BFC:  MOVWF  xDB
2BFE:  MOVWF  xDC
2C00:  MOVLB  0
2C02:  CALL   23A0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
2C06:  MOVLW  04
2C08:  MOVLB  4
2C0A:  MOVWF  x79
2C0C:  MOVLW  F5
2C0E:  MOVWF  x78
2C10:  MOVLW  DA
2C12:  MOVWF  FF6
2C14:  MOVLW  02
2C16:  MOVWF  FF7
2C18:  MOVLB  0
2C1A:  CALL   12F0
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2C1E:  MOVLW  01
2C20:  MOVLB  5
2C22:  MOVWF  xD7
2C24:  MOVLW  19
2C26:  MOVWF  xD8
2C28:  MOVLW  04
2C2A:  MOVWF  xDA
2C2C:  MOVLW  F5
2C2E:  MOVWF  xD9
2C30:  MOVLW  01
2C32:  MOVWF  xDB
2C34:  MOVWF  xDC
2C36:  MOVLB  0
2C38:  CALL   1148
....................     
....................    sprintf(string, "%ld",Offset_L1); // Converte adc em texto 
2C3C:  MOVLW  04
2C3E:  MOVLB  4
2C40:  MOVWF  x79
2C42:  MOVLW  F5
2C44:  MOVWF  x78
2C46:  MOVLW  10
2C48:  MOVWF  FE9
2C4A:  MOVFF  419,5D8
2C4E:  MOVFF  418,5D7
2C52:  MOVLB  0
2C54:  CALL   216C
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2C58:  MOVLW  32
2C5A:  MOVLB  5
2C5C:  MOVWF  xD7
2C5E:  MOVLW  19
2C60:  MOVWF  xD8
2C62:  MOVLW  04
2C64:  MOVWF  xDA
2C66:  MOVLW  F5
2C68:  MOVWF  xD9
2C6A:  MOVLW  01
2C6C:  MOVWF  xDB
2C6E:  MOVWF  xDC
2C70:  MOVLB  0
2C72:  CALL   1148
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
2C76:  MOVLW  04
2C78:  MOVLB  4
2C7A:  MOVWF  x79
2C7C:  MOVLW  F5
2C7E:  MOVWF  x78
2C80:  MOVLW  E2
2C82:  MOVWF  FF6
2C84:  MOVLW  02
2C86:  MOVWF  FF7
2C88:  MOVLB  0
2C8A:  CALL   12F0
....................    glcd_text57(1, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2C8E:  MOVLW  01
2C90:  MOVLB  5
2C92:  MOVWF  xD7
2C94:  MOVLW  23
2C96:  MOVWF  xD8
2C98:  MOVLW  04
2C9A:  MOVWF  xDA
2C9C:  MOVLW  F5
2C9E:  MOVWF  xD9
2CA0:  MOVLW  01
2CA2:  MOVWF  xDB
2CA4:  CLRF   xDC
2CA6:  MOVLB  0
2CA8:  CALL   1148
....................     
....................    sprintf(string, "%1.2f",ref_L1); // Converte adc em texto 
2CAC:  MOVLW  04
2CAE:  MOVLB  4
2CB0:  MOVWF  x79
2CB2:  MOVLW  F5
2CB4:  MOVWF  x78
2CB6:  MOVLW  89
2CB8:  MOVWF  FE9
2CBA:  MOVFF  41D,5DA
2CBE:  MOVFF  41C,5D9
2CC2:  MOVFF  41B,5D8
2CC6:  MOVFF  41A,5D7
2CCA:  MOVLW  02
2CCC:  MOVLB  5
2CCE:  MOVWF  xDB
2CD0:  MOVLB  0
2CD2:  CALL   0EA0
....................    glcd_text57(50, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
2CD6:  MOVLW  32
2CD8:  MOVLB  5
2CDA:  MOVWF  xD7
2CDC:  MOVLW  23
2CDE:  MOVWF  xD8
2CE0:  MOVLW  04
2CE2:  MOVWF  xDA
2CE4:  MOVLW  F5
2CE6:  MOVWF  xD9
2CE8:  MOVLW  01
2CEA:  MOVWF  xDB
2CEC:  CLRF   xDC
2CEE:  MOVLB  0
2CF0:  CALL   1148
....................     
....................     
....................    if(!input(pin_E1)&&ref_L1<30) //incrementa && valor maximo 
2CF4:  BSF    F96.1
2CF6:  BTFSC  F84.1
2CF8:  BRA    2D5A
2CFA:  MOVFF  41D,5DA
2CFE:  MOVFF  41C,5D9
2D02:  MOVFF  41B,5D8
2D06:  MOVFF  41A,5D7
2D0A:  MOVLB  5
2D0C:  CLRF   xDE
2D0E:  CLRF   xDD
2D10:  MOVLW  70
2D12:  MOVWF  xDC
2D14:  MOVLW  83
2D16:  MOVWF  xDB
2D18:  MOVLB  0
2D1A:  CALL   0D2C
2D1E:  BNC   2D5A
....................    { 
....................      ref_L1=ref_L1+0.1; 
2D20:  BCF    FD8.1
2D22:  MOVFF  41D,5DA
2D26:  MOVFF  41C,5D9
2D2A:  MOVFF  41B,5D8
2D2E:  MOVFF  41A,5D7
2D32:  MOVLW  CD
2D34:  MOVLB  5
2D36:  MOVWF  xDE
2D38:  MOVLW  CC
2D3A:  MOVWF  xDD
2D3C:  MOVLW  4C
2D3E:  MOVWF  xDC
2D40:  MOVLW  7B
2D42:  MOVWF  xDB
2D44:  MOVLB  0
2D46:  CALL   0956
2D4A:  MOVFF  03,41D
2D4E:  MOVFF  02,41C
2D52:  MOVFF  01,41B
2D56:  MOVFF  00,41A
....................    } 
....................    if(!input(pin_C2)&&ref_L1>5) //decrementa && valor minimo 
2D5A:  BSF    F94.2
2D5C:  BTFSC  F82.2
2D5E:  BRA    2DC0
2D60:  MOVLB  5
2D62:  CLRF   xDA
2D64:  CLRF   xD9
2D66:  MOVLW  20
2D68:  MOVWF  xD8
2D6A:  MOVLW  81
2D6C:  MOVWF  xD7
2D6E:  MOVFF  41D,5DE
2D72:  MOVFF  41C,5DD
2D76:  MOVFF  41B,5DC
2D7A:  MOVFF  41A,5DB
2D7E:  MOVLB  0
2D80:  CALL   0D2C
2D84:  BNC   2DC0
....................    { 
....................      ref_L1=ref_L1-0.1; 
2D86:  BSF    FD8.1
2D88:  MOVFF  41D,5DA
2D8C:  MOVFF  41C,5D9
2D90:  MOVFF  41B,5D8
2D94:  MOVFF  41A,5D7
2D98:  MOVLW  CD
2D9A:  MOVLB  5
2D9C:  MOVWF  xDE
2D9E:  MOVLW  CC
2DA0:  MOVWF  xDD
2DA2:  MOVLW  4C
2DA4:  MOVWF  xDC
2DA6:  MOVLW  7B
2DA8:  MOVWF  xDB
2DAA:  MOVLB  0
2DAC:  CALL   0956
2DB0:  MOVFF  03,41D
2DB4:  MOVFF  02,41C
2DB8:  MOVFF  01,41B
2DBC:  MOVFF  00,41A
....................    } 
....................     
....................    glcd_update();//update glcd 
2DC0:  CALL   0630
2DC4:  MOVLB  4
....................    
....................   }//if menu=3 
....................  
....................   if(menu==1||menu==2) //Strings em comum - calibração do sensor L1  
2DC6:  DECFSZ x5A,W
2DC8:  BRA    2DCC
2DCA:  BRA    2DD4
2DCC:  MOVF   x5A,W
2DCE:  SUBLW  02
2DD0:  BTFSS  FD8.2
2DD2:  BRA    30A8
....................   { 
....................    //Leitura do sensor L1 para tela de calibração 
....................     
....................    set_adc_channel(0); 
2DD4:  MOVLW  00
2DD6:  MOVWF  01
2DD8:  MOVF   FC2,W
2DDA:  ANDLW  C7
2DDC:  IORWF  01,W
2DDE:  MOVWF  FC2
....................    delay_us(20); 
2DE0:  MOVLW  1A
2DE2:  MOVWF  00
2DE4:  DECFSZ 00,F
2DE6:  BRA    2DE4
2DE8:  NOP   
....................    mediaAD_L1=0; valor=0; tensao=0; 
2DEA:  CLRF   x4E
2DEC:  CLRF   x4D
2DEE:  CLRF   x58
2DF0:  CLRF   x57
2DF2:  CLRF   x56
2DF4:  CLRF   x55
2DF6:  CLRF   x54
2DF8:  CLRF   x53
....................     
....................    for(rep=1; rep<=8; rep++) 
2DFA:  MOVLW  01
2DFC:  MOVWF  x59
2DFE:  MOVF   x59,W
2E00:  SUBLW  08
2E02:  BNC   2E28
....................    { 
....................      valor= read_adc(); 
2E04:  BSF    FC2.2
2E06:  BTFSC  FC2.2
2E08:  BRA    2E06
2E0A:  MOVFF  FC3,457
2E0E:  MOVFF  FC4,458
....................      delay_us(20); 
2E12:  MOVLW  1A
2E14:  MOVWF  00
2E16:  DECFSZ 00,F
2E18:  BRA    2E16
2E1A:  NOP   
....................      mediaAD_L1= mediaAD_L1 + valor; 
2E1C:  MOVF   x57,W
2E1E:  ADDWF  x4D,F
2E20:  MOVF   x58,W
2E22:  ADDWFC x4E,F
....................    } 
2E24:  INCF   x59,F
2E26:  BRA    2DFE
....................    mediaAD_L1= mediaAD_L1/8; 
2E28:  RRCF   x4E,F
2E2A:  RRCF   x4D,F
2E2C:  RRCF   x4E,F
2E2E:  RRCF   x4D,F
2E30:  RRCF   x4E,F
2E32:  RRCF   x4D,F
2E34:  MOVLW  1F
2E36:  ANDWF  x4E,F
....................    tensao=(float)mediaAD_L1*4.8828; 
2E38:  MOVFF  44E,5D8
2E3C:  MOVFF  44D,5D7
2E40:  MOVLB  0
2E42:  CALL   082A
2E46:  MOVFF  00,5D7
2E4A:  MOVFF  01,5D8
2E4E:  MOVFF  02,5D9
2E52:  MOVFF  03,5DA
2E56:  MOVFF  03,5E7
2E5A:  MOVFF  02,5E6
2E5E:  MOVFF  01,5E5
2E62:  MOVFF  00,5E4
2E66:  MOVLW  E6
2E68:  MOVLB  5
2E6A:  MOVWF  xEB
2E6C:  MOVLW  3F
2E6E:  MOVWF  xEA
2E70:  MOVLW  1C
2E72:  MOVWF  xE9
2E74:  MOVLW  81
2E76:  MOVWF  xE8
2E78:  MOVLB  0
2E7A:  CALL   0860
2E7E:  MOVFF  03,456
2E82:  MOVFF  02,455
2E86:  MOVFF  01,454
2E8A:  MOVFF  00,453
....................    L1_real=(float) (tensao - Offset_L1)/ref_L1; 
2E8E:  MOVFF  419,5D8
2E92:  MOVFF  418,5D7
2E96:  CALL   082A
2E9A:  BSF    FD8.1
2E9C:  MOVFF  456,5DA
2EA0:  MOVFF  455,5D9
2EA4:  MOVFF  454,5D8
2EA8:  MOVFF  453,5D7
2EAC:  MOVFF  03,5DE
2EB0:  MOVFF  02,5DD
2EB4:  MOVFF  01,5DC
2EB8:  MOVFF  00,5DB
2EBC:  CALL   0956
2EC0:  MOVFF  00,5D7
2EC4:  MOVFF  01,5D8
2EC8:  MOVFF  02,5D9
2ECC:  MOVFF  03,5DA
2ED0:  MOVFF  03,5DE
2ED4:  MOVFF  02,5DD
2ED8:  MOVFF  01,5DC
2EDC:  MOVFF  00,5DB
2EE0:  MOVFF  41D,5E2
2EE4:  MOVFF  41C,5E1
2EE8:  MOVFF  41B,5E0
2EEC:  MOVFF  41A,5DF
2EF0:  CALL   0BCE
2EF4:  MOVFF  03,425
2EF8:  MOVFF  02,424
2EFC:  MOVFF  01,423
2F00:  MOVFF  00,422
....................     
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep1++; 
2F04:  MOVLB  4
2F06:  INCF   x26,F
....................    L1_eq=L1_eq+L1_real; 
2F08:  BCF    FD8.1
2F0A:  MOVFF  421,5DA
2F0E:  MOVFF  420,5D9
2F12:  MOVFF  41F,5D8
2F16:  MOVFF  41E,5D7
2F1A:  MOVFF  425,5DE
2F1E:  MOVFF  424,5DD
2F22:  MOVFF  423,5DC
2F26:  MOVFF  422,5DB
2F2A:  MOVLB  0
2F2C:  CALL   0956
2F30:  MOVFF  03,421
2F34:  MOVFF  02,420
2F38:  MOVFF  01,41F
2F3C:  MOVFF  00,41E
....................   
....................    if(rep1>=10) 
2F40:  MOVLB  4
2F42:  MOVF   x26,W
2F44:  SUBLW  09
2F46:  BC    2F98
....................    { 
....................     L1_eq = L1_eq/10;  
2F48:  MOVFF  421,5DE
2F4C:  MOVFF  420,5DD
2F50:  MOVFF  41F,5DC
2F54:  MOVFF  41E,5DB
2F58:  MOVLB  5
2F5A:  CLRF   xE2
2F5C:  CLRF   xE1
2F5E:  MOVLW  20
2F60:  MOVWF  xE0
2F62:  MOVLW  82
2F64:  MOVWF  xDF
2F66:  MOVLB  0
2F68:  CALL   0BCE
2F6C:  MOVFF  03,421
2F70:  MOVFF  02,420
2F74:  MOVFF  01,41F
2F78:  MOVFF  00,41E
....................     L1 = L1_eq; 
2F7C:  MOVFF  421,417
2F80:  MOVFF  420,416
2F84:  MOVFF  41F,415
2F88:  MOVFF  41E,414
....................     rep1=0; 
2F8C:  MOVLB  4
2F8E:  CLRF   x26
....................     L1_eq=0; 
2F90:  CLRF   x21
2F92:  CLRF   x20
2F94:  CLRF   x1F
2F96:  CLRF   x1E
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L1); // Converte adc em texto 
2F98:  MOVLW  05
2F9A:  MOVWF  x79
2F9C:  MOVLW  1E
2F9E:  MOVWF  x78
2FA0:  MOVLW  89
2FA2:  MOVWF  FE9
2FA4:  MOVFF  417,5DA
2FA8:  MOVFF  416,5D9
2FAC:  MOVFF  415,5D8
2FB0:  MOVFF  414,5D7
2FB4:  MOVLW  01
2FB6:  MOVLB  5
2FB8:  MOVWF  xDB
2FBA:  MOVLB  0
2FBC:  CALL   0EA0
....................  
....................    if(L1>=100) 
2FC0:  MOVLB  5
2FC2:  CLRF   xDA
2FC4:  CLRF   xD9
2FC6:  MOVLW  48
2FC8:  MOVWF  xD8
2FCA:  MOVLW  85
2FCC:  MOVWF  xD7
2FCE:  MOVFF  417,5DE
2FD2:  MOVFF  416,5DD
2FD6:  MOVFF  415,5DC
2FDA:  MOVFF  414,5DB
2FDE:  MOVLB  0
2FE0:  CALL   0D2C
2FE4:  BC    2FE8
2FE6:  BNZ   2FF0
....................    { 
....................      string[6] = '\0'; 
2FE8:  MOVLB  5
2FEA:  CLRF   x24
....................      string[5] = 'A'; 
2FEC:  MOVLW  41
2FEE:  MOVWF  x23
....................    } 
....................    if(L1<100) 
2FF0:  MOVFF  417,5DA
2FF4:  MOVFF  416,5D9
2FF8:  MOVFF  415,5D8
2FFC:  MOVFF  414,5D7
3000:  MOVLB  5
3002:  CLRF   xDE
3004:  CLRF   xDD
3006:  MOVLW  48
3008:  MOVWF  xDC
300A:  MOVLW  85
300C:  MOVWF  xDB
300E:  MOVLB  0
3010:  CALL   0D2C
3014:  BNC   301E
....................    { 
....................      string[5] = '\0'; 
3016:  MOVLB  5
3018:  CLRF   x23
....................      string[4] = 'A'; 
301A:  MOVLW  41
301C:  MOVWF  x22
....................    } 
....................    if(L1<10) 
301E:  MOVFF  417,5DA
3022:  MOVFF  416,5D9
3026:  MOVFF  415,5D8
302A:  MOVFF  414,5D7
302E:  MOVLB  5
3030:  CLRF   xDE
3032:  CLRF   xDD
3034:  MOVLW  20
3036:  MOVWF  xDC
3038:  MOVLW  82
303A:  MOVWF  xDB
303C:  MOVLB  0
303E:  CALL   0D2C
3042:  BNC   304C
....................    { 
....................      string[4] = '\0'; 
3044:  MOVLB  5
3046:  CLRF   x22
....................      string[3] = 'A'; 
3048:  MOVLW  41
304A:  MOVWF  x21
....................    } 
....................     
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
304C:  MOVLW  12
304E:  MOVLB  5
3050:  MOVWF  xD7
3052:  MOVLW  2D
3054:  MOVWF  xD8
3056:  MOVLW  05
3058:  MOVWF  xDA
305A:  MOVLW  1E
305C:  MOVWF  xD9
305E:  MOVLW  01
3060:  MOVWF  xDB
3062:  MOVWF  xDC
3064:  MOVLB  0
3066:  CALL   1148
....................      
....................    sprintf(string, "L1:"); // Converte char em texto 
306A:  MOVLW  05
306C:  MOVLB  4
306E:  MOVWF  x79
3070:  MOVLW  1E
3072:  MOVWF  x78
3074:  MOVLW  E8
3076:  MOVWF  FF6
3078:  MOVLW  02
307A:  MOVWF  FF7
307C:  MOVLB  0
307E:  CALL   12F0
....................    string[3] = '\0'; 
3082:  MOVLB  5
3084:  CLRF   x21
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3086:  MOVLW  01
3088:  MOVWF  xD7
308A:  MOVLW  2D
308C:  MOVWF  xD8
308E:  MOVLW  05
3090:  MOVWF  xDA
3092:  MOVLW  1E
3094:  MOVWF  xD9
3096:  MOVLW  01
3098:  MOVWF  xDB
309A:  MOVWF  xDC
309C:  MOVLB  0
309E:  CALL   1148
....................     
....................    glcd_update();//update glcd 
30A2:  CALL   0630
30A6:  MOVLB  4
....................    
....................   }//if menu = 2 ou 3 
....................    
....................   if(menu==3)  //Menu de calibração do sensor L2 (offset) 
30A8:  MOVF   x5A,W
30AA:  SUBLW  03
30AC:  BTFSS  FD8.2
30AE:  BRA    3258
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
30B0:  MOVLB  5
30B2:  CLRF   xD7
30B4:  MOVLB  0
30B6:  CALL   04F4
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L2"); // converte char em texto 
30BA:  MOVLW  05
30BC:  MOVLB  4
30BE:  MOVWF  x79
30C0:  MOVLW  25
30C2:  MOVWF  x78
30C4:  MOVLW  EC
30C6:  MOVWF  FF6
30C8:  MOVLW  02
30CA:  MOVWF  FF7
30CC:  MOVLB  0
30CE:  CALL   12F0
....................    string[40] = '\0'; 
30D2:  MOVLB  5
30D4:  CLRF   x4D
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
30D6:  MOVLW  01
30D8:  MOVWF  xD7
30DA:  MOVWF  xD8
30DC:  MOVLW  05
30DE:  MOVWF  xDA
30E0:  MOVLW  25
30E2:  MOVWF  xD9
30E4:  MOVLW  01
30E6:  MOVWF  xDB
30E8:  MOVWF  xDC
30EA:  MOVLB  0
30EC:  CALL   1148
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
30F0:  MOVLB  5
30F2:  CLRF   xD7
30F4:  MOVLW  18
30F6:  MOVWF  xD8
30F8:  MOVLW  50
30FA:  MOVWF  xD9
30FC:  MOVLW  20
30FE:  MOVWF  xDA
3100:  MOVLW  01
3102:  MOVWF  xDB
3104:  MOVWF  xDC
3106:  MOVLB  0
3108:  CALL   23A0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
310C:  MOVLW  05
310E:  MOVLB  4
3110:  MOVWF  x79
3112:  MOVLW  25
3114:  MOVWF  x78
3116:  MOVLW  0E
3118:  MOVWF  FF6
311A:  MOVLW  03
311C:  MOVWF  FF7
311E:  MOVLB  0
3120:  CALL   12F0
....................    glcd_text57(1, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
3124:  MOVLW  01
3126:  MOVLB  5
3128:  MOVWF  xD7
312A:  MOVLW  19
312C:  MOVWF  xD8
312E:  MOVLW  05
3130:  MOVWF  xDA
3132:  MOVLW  25
3134:  MOVWF  xD9
3136:  MOVLW  01
3138:  MOVWF  xDB
313A:  CLRF   xDC
313C:  MOVLB  0
313E:  CALL   1148
....................     
....................    sprintf(string, "%ld",Offset_L2); // Converte adc em texto 
3142:  MOVLW  05
3144:  MOVLB  4
3146:  MOVWF  x79
3148:  MOVLW  25
314A:  MOVWF  x78
314C:  MOVLW  10
314E:  MOVWF  FE9
3150:  MOVFF  42C,5D8
3154:  MOVFF  42B,5D7
3158:  MOVLB  0
315A:  CALL   216C
....................    glcd_text57(50, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
315E:  MOVLW  32
3160:  MOVLB  5
3162:  MOVWF  xD7
3164:  MOVLW  19
3166:  MOVWF  xD8
3168:  MOVLW  05
316A:  MOVWF  xDA
316C:  MOVLW  25
316E:  MOVWF  xD9
3170:  MOVLW  01
3172:  MOVWF  xDB
3174:  CLRF   xDC
3176:  MOVLB  0
3178:  CALL   1148
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
317C:  MOVLW  05
317E:  MOVLB  4
3180:  MOVWF  x79
3182:  MOVLW  25
3184:  MOVWF  x78
3186:  MOVLW  16
3188:  MOVWF  FF6
318A:  MOVLW  03
318C:  MOVWF  FF7
318E:  MOVLB  0
3190:  CALL   12F0
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3194:  MOVLW  01
3196:  MOVLB  5
3198:  MOVWF  xD7
319A:  MOVLW  23
319C:  MOVWF  xD8
319E:  MOVLW  05
31A0:  MOVWF  xDA
31A2:  MOVLW  25
31A4:  MOVWF  xD9
31A6:  MOVLW  01
31A8:  MOVWF  xDB
31AA:  MOVWF  xDC
31AC:  MOVLB  0
31AE:  CALL   1148
....................     
....................    sprintf(string, "%f",ref_L2); // Converte adc em texto 
31B2:  MOVLW  05
31B4:  MOVLB  4
31B6:  MOVWF  x79
31B8:  MOVLW  25
31BA:  MOVWF  x78
31BC:  MOVLW  89
31BE:  MOVWF  FE9
31C0:  MOVFF  430,5DA
31C4:  MOVFF  42F,5D9
31C8:  MOVFF  42E,5D8
31CC:  MOVFF  42D,5D7
31D0:  MOVLW  02
31D2:  MOVLB  5
31D4:  MOVWF  xDB
31D6:  MOVLB  0
31D8:  CALL   0EA0
....................    glcd_text57(50, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
31DC:  MOVLW  32
31DE:  MOVLB  5
31E0:  MOVWF  xD7
31E2:  MOVLW  23
31E4:  MOVWF  xD8
31E6:  MOVLW  05
31E8:  MOVWF  xDA
31EA:  MOVLW  25
31EC:  MOVWF  xD9
31EE:  MOVLW  01
31F0:  MOVWF  xDB
31F2:  MOVWF  xDC
31F4:  MOVLB  0
31F6:  CALL   1148
....................     
....................    if(!input(pin_E1)&&Offset_L2<5000) //incrementa && valor maximo 
31FA:  BSF    F96.1
31FC:  BTFSC  F84.1
31FE:  BRA    3224
3200:  MOVLB  4
3202:  MOVF   x2C,W
3204:  SUBLW  13
3206:  BTFSC  FD8.0
3208:  BRA    320E
320A:  MOVLB  0
320C:  BRA    3224
320E:  BNZ   321C
3210:  MOVF   x2B,W
3212:  SUBLW  87
3214:  BTFSC  FD8.0
3216:  BRA    321C
3218:  MOVLB  0
321A:  BRA    3224
....................    { 
....................      Offset_L2++; 
321C:  INCF   x2B,F
321E:  BTFSC  FD8.2
3220:  INCF   x2C,F
3222:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&Offset_L2>2000) //decrementa && valor minimo 
3224:  BSF    F94.2
3226:  BTFSC  F82.2
3228:  BRA    3252
322A:  MOVLB  4
322C:  MOVF   x2C,W
322E:  SUBLW  06
3230:  BTFSS  FD8.0
3232:  BRA    3238
3234:  MOVLB  0
3236:  BRA    3252
3238:  XORLW  FF
323A:  BNZ   3248
323C:  MOVF   x2B,W
323E:  SUBLW  D0
3240:  BTFSS  FD8.0
3242:  BRA    3248
3244:  MOVLB  0
3246:  BRA    3252
....................    { 
....................      Offset_L2--; 
3248:  MOVF   x2B,W
324A:  BTFSC  FD8.2
324C:  DECF   x2C,F
324E:  DECF   x2B,F
3250:  MOVLB  0
....................    } 
....................    glcd_update();//update glcd 
3252:  CALL   0630
3256:  MOVLB  4
....................    
....................   }//if menu=4 
....................    
....................   if(menu==4)  //Menu de calibração do sensor L2 (Ref) 
3258:  MOVF   x5A,W
325A:  SUBLW  04
325C:  BTFSS  FD8.2
325E:  BRA    347C
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
3260:  MOVLB  5
3262:  CLRF   xD7
3264:  MOVLB  0
3266:  CALL   04F4
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L2"); // converte char em texto 
326A:  MOVLW  05
326C:  MOVLB  4
326E:  MOVWF  x79
3270:  MOVLW  4E
3272:  MOVWF  x78
3274:  MOVLW  1C
3276:  MOVWF  FF6
3278:  MOVLW  03
327A:  MOVWF  FF7
327C:  MOVLB  0
327E:  CALL   12F0
....................    string[40] = '\0'; 
3282:  MOVLB  5
3284:  CLRF   x76
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3286:  MOVLW  01
3288:  MOVWF  xD7
328A:  MOVWF  xD8
328C:  MOVLW  05
328E:  MOVWF  xDA
3290:  MOVLW  4E
3292:  MOVWF  xD9
3294:  MOVLW  01
3296:  MOVWF  xDB
3298:  MOVWF  xDC
329A:  MOVLB  0
329C:  CALL   1148
....................     
....................    glcd_rect(0, 34, 80, 42, yes, on); 
32A0:  MOVLB  5
32A2:  CLRF   xD7
32A4:  MOVLW  22
32A6:  MOVWF  xD8
32A8:  MOVLW  50
32AA:  MOVWF  xD9
32AC:  MOVLW  2A
32AE:  MOVWF  xDA
32B0:  MOVLW  01
32B2:  MOVWF  xDB
32B4:  MOVWF  xDC
32B6:  MOVLB  0
32B8:  CALL   23A0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
32BC:  MOVLW  05
32BE:  MOVLB  4
32C0:  MOVWF  x79
32C2:  MOVLW  4E
32C4:  MOVWF  x78
32C6:  MOVLW  3E
32C8:  MOVWF  FF6
32CA:  MOVLW  03
32CC:  MOVWF  FF7
32CE:  MOVLB  0
32D0:  CALL   12F0
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
32D4:  MOVLW  01
32D6:  MOVLB  5
32D8:  MOVWF  xD7
32DA:  MOVLW  19
32DC:  MOVWF  xD8
32DE:  MOVLW  05
32E0:  MOVWF  xDA
32E2:  MOVLW  4E
32E4:  MOVWF  xD9
32E6:  MOVLW  01
32E8:  MOVWF  xDB
32EA:  MOVWF  xDC
32EC:  MOVLB  0
32EE:  CALL   1148
....................     
....................    sprintf(string, "%ld",Offset_L2); // Converte adc em texto 
32F2:  MOVLW  05
32F4:  MOVLB  4
32F6:  MOVWF  x79
32F8:  MOVLW  4E
32FA:  MOVWF  x78
32FC:  MOVLW  10
32FE:  MOVWF  FE9
3300:  MOVFF  42C,5D8
3304:  MOVFF  42B,5D7
3308:  MOVLB  0
330A:  CALL   216C
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
330E:  MOVLW  32
3310:  MOVLB  5
3312:  MOVWF  xD7
3314:  MOVLW  19
3316:  MOVWF  xD8
3318:  MOVLW  05
331A:  MOVWF  xDA
331C:  MOVLW  4E
331E:  MOVWF  xD9
3320:  MOVLW  01
3322:  MOVWF  xDB
3324:  MOVWF  xDC
3326:  MOVLB  0
3328:  CALL   1148
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
332C:  MOVLW  05
332E:  MOVLB  4
3330:  MOVWF  x79
3332:  MOVLW  4E
3334:  MOVWF  x78
3336:  MOVLW  46
3338:  MOVWF  FF6
333A:  MOVLW  03
333C:  MOVWF  FF7
333E:  MOVLB  0
3340:  CALL   12F0
....................    glcd_text57(1, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
3344:  MOVLW  01
3346:  MOVLB  5
3348:  MOVWF  xD7
334A:  MOVLW  23
334C:  MOVWF  xD8
334E:  MOVLW  05
3350:  MOVWF  xDA
3352:  MOVLW  4E
3354:  MOVWF  xD9
3356:  MOVLW  01
3358:  MOVWF  xDB
335A:  CLRF   xDC
335C:  MOVLB  0
335E:  CALL   1148
....................     
....................    sprintf(string, "%1.2f",ref_L2); // Converte adc em texto 
3362:  MOVLW  05
3364:  MOVLB  4
3366:  MOVWF  x79
3368:  MOVLW  4E
336A:  MOVWF  x78
336C:  MOVLW  89
336E:  MOVWF  FE9
3370:  MOVFF  430,5DA
3374:  MOVFF  42F,5D9
3378:  MOVFF  42E,5D8
337C:  MOVFF  42D,5D7
3380:  MOVLW  02
3382:  MOVLB  5
3384:  MOVWF  xDB
3386:  MOVLB  0
3388:  CALL   0EA0
....................    glcd_text57(50, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
338C:  MOVLW  32
338E:  MOVLB  5
3390:  MOVWF  xD7
3392:  MOVLW  23
3394:  MOVWF  xD8
3396:  MOVLW  05
3398:  MOVWF  xDA
339A:  MOVLW  4E
339C:  MOVWF  xD9
339E:  MOVLW  01
33A0:  MOVWF  xDB
33A2:  CLRF   xDC
33A4:  MOVLB  0
33A6:  CALL   1148
....................     
....................     
....................    if(!input(pin_E1)&&ref_L2<30) //incrementa && valor maximo 
33AA:  BSF    F96.1
33AC:  BTFSC  F84.1
33AE:  BRA    3410
33B0:  MOVFF  430,5DA
33B4:  MOVFF  42F,5D9
33B8:  MOVFF  42E,5D8
33BC:  MOVFF  42D,5D7
33C0:  MOVLB  5
33C2:  CLRF   xDE
33C4:  CLRF   xDD
33C6:  MOVLW  70
33C8:  MOVWF  xDC
33CA:  MOVLW  83
33CC:  MOVWF  xDB
33CE:  MOVLB  0
33D0:  CALL   0D2C
33D4:  BNC   3410
....................    { 
....................      ref_L2=ref_L2+0.1; 
33D6:  BCF    FD8.1
33D8:  MOVFF  430,5DA
33DC:  MOVFF  42F,5D9
33E0:  MOVFF  42E,5D8
33E4:  MOVFF  42D,5D7
33E8:  MOVLW  CD
33EA:  MOVLB  5
33EC:  MOVWF  xDE
33EE:  MOVLW  CC
33F0:  MOVWF  xDD
33F2:  MOVLW  4C
33F4:  MOVWF  xDC
33F6:  MOVLW  7B
33F8:  MOVWF  xDB
33FA:  MOVLB  0
33FC:  CALL   0956
3400:  MOVFF  03,430
3404:  MOVFF  02,42F
3408:  MOVFF  01,42E
340C:  MOVFF  00,42D
....................    } 
....................    if(!input(pin_C2)&&ref_L2>5) //decrementa && valor minimo 
3410:  BSF    F94.2
3412:  BTFSC  F82.2
3414:  BRA    3476
3416:  MOVLB  5
3418:  CLRF   xDA
341A:  CLRF   xD9
341C:  MOVLW  20
341E:  MOVWF  xD8
3420:  MOVLW  81
3422:  MOVWF  xD7
3424:  MOVFF  430,5DE
3428:  MOVFF  42F,5DD
342C:  MOVFF  42E,5DC
3430:  MOVFF  42D,5DB
3434:  MOVLB  0
3436:  CALL   0D2C
343A:  BNC   3476
....................    { 
....................      ref_L2=ref_L2-0.1; 
343C:  BSF    FD8.1
343E:  MOVFF  430,5DA
3442:  MOVFF  42F,5D9
3446:  MOVFF  42E,5D8
344A:  MOVFF  42D,5D7
344E:  MOVLW  CD
3450:  MOVLB  5
3452:  MOVWF  xDE
3454:  MOVLW  CC
3456:  MOVWF  xDD
3458:  MOVLW  4C
345A:  MOVWF  xDC
345C:  MOVLW  7B
345E:  MOVWF  xDB
3460:  MOVLB  0
3462:  CALL   0956
3466:  MOVFF  03,430
346A:  MOVFF  02,42F
346E:  MOVFF  01,42E
3472:  MOVFF  00,42D
....................    } 
....................     
....................    glcd_update();//update glcd 
3476:  CALL   0630
347A:  MOVLB  4
....................    
....................   }//if menu=5 
....................  
....................   if(menu==3||menu==4) //Strings em comum - calibração do sensor L2  
347C:  MOVF   x5A,W
347E:  SUBLW  03
3480:  BZ    348A
3482:  MOVF   x5A,W
3484:  SUBLW  04
3486:  BTFSS  FD8.2
3488:  BRA    3762
....................   { 
....................    //Leitura do sensor L1 para tela de calibração 
....................     
....................    set_adc_channel(1); 
348A:  MOVLW  08
348C:  MOVWF  01
348E:  MOVF   FC2,W
3490:  ANDLW  C7
3492:  IORWF  01,W
3494:  MOVWF  FC2
....................    delay_us(20); 
3496:  MOVLW  1A
3498:  MOVWF  00
349A:  DECFSZ 00,F
349C:  BRA    349A
349E:  NOP   
....................    mediaAD_L2=0; valor=0; tensao=0; 
34A0:  CLRF   x50
34A2:  CLRF   x4F
34A4:  CLRF   x58
34A6:  CLRF   x57
34A8:  CLRF   x56
34AA:  CLRF   x55
34AC:  CLRF   x54
34AE:  CLRF   x53
....................     
....................    for(rep=1; rep<=8; rep++) 
34B0:  MOVLW  01
34B2:  MOVWF  x59
34B4:  MOVF   x59,W
34B6:  SUBLW  08
34B8:  BNC   34E2
....................    { 
....................      valor= read_adc(); 
34BA:  BSF    FC2.2
34BC:  BTFSC  FC2.2
34BE:  BRA    34BC
34C0:  MOVFF  FC3,457
34C4:  MOVFF  FC4,458
....................      delay_ms(4); 
34C8:  MOVLW  04
34CA:  MOVLB  5
34CC:  MOVWF  xD7
34CE:  MOVLB  0
34D0:  CALL   03C6
....................      mediaAD_L2= mediaAD_L2 + valor; 
34D4:  MOVLB  4
34D6:  MOVF   x57,W
34D8:  ADDWF  x4F,F
34DA:  MOVF   x58,W
34DC:  ADDWFC x50,F
....................    } 
34DE:  INCF   x59,F
34E0:  BRA    34B4
....................    mediaAD_L2= mediaAD_L2/8; 
34E2:  RRCF   x50,F
34E4:  RRCF   x4F,F
34E6:  RRCF   x50,F
34E8:  RRCF   x4F,F
34EA:  RRCF   x50,F
34EC:  RRCF   x4F,F
34EE:  MOVLW  1F
34F0:  ANDWF  x50,F
....................    tensao=(float)mediaAD_L2*4.8828; 
34F2:  MOVFF  450,5D8
34F6:  MOVFF  44F,5D7
34FA:  MOVLB  0
34FC:  CALL   082A
3500:  MOVFF  00,5D7
3504:  MOVFF  01,5D8
3508:  MOVFF  02,5D9
350C:  MOVFF  03,5DA
3510:  MOVFF  03,5E7
3514:  MOVFF  02,5E6
3518:  MOVFF  01,5E5
351C:  MOVFF  00,5E4
3520:  MOVLW  E6
3522:  MOVLB  5
3524:  MOVWF  xEB
3526:  MOVLW  3F
3528:  MOVWF  xEA
352A:  MOVLW  1C
352C:  MOVWF  xE9
352E:  MOVLW  81
3530:  MOVWF  xE8
3532:  MOVLB  0
3534:  CALL   0860
3538:  MOVFF  03,456
353C:  MOVFF  02,455
3540:  MOVFF  01,454
3544:  MOVFF  00,453
....................    L2_real=(float) (tensao - Offset_L2)/ref_L2; 
3548:  MOVFF  42C,5D8
354C:  MOVFF  42B,5D7
3550:  CALL   082A
3554:  BSF    FD8.1
3556:  MOVFF  456,5DA
355A:  MOVFF  455,5D9
355E:  MOVFF  454,5D8
3562:  MOVFF  453,5D7
3566:  MOVFF  03,5DE
356A:  MOVFF  02,5DD
356E:  MOVFF  01,5DC
3572:  MOVFF  00,5DB
3576:  CALL   0956
357A:  MOVFF  00,5D7
357E:  MOVFF  01,5D8
3582:  MOVFF  02,5D9
3586:  MOVFF  03,5DA
358A:  MOVFF  03,5DE
358E:  MOVFF  02,5DD
3592:  MOVFF  01,5DC
3596:  MOVFF  00,5DB
359A:  MOVFF  430,5E2
359E:  MOVFF  42F,5E1
35A2:  MOVFF  42E,5E0
35A6:  MOVFF  42D,5DF
35AA:  CALL   0BCE
35AE:  MOVFF  03,438
35B2:  MOVFF  02,437
35B6:  MOVFF  01,436
35BA:  MOVFF  00,435
....................     
....................       //CALCULA CORRENTE MEDIA EM AMPERES 
....................    rep2++; 
35BE:  MOVLB  4
35C0:  INCF   x39,F
....................    L2_eq=L2_eq+L2_real; 
35C2:  BCF    FD8.1
35C4:  MOVFF  434,5DA
35C8:  MOVFF  433,5D9
35CC:  MOVFF  432,5D8
35D0:  MOVFF  431,5D7
35D4:  MOVFF  438,5DE
35D8:  MOVFF  437,5DD
35DC:  MOVFF  436,5DC
35E0:  MOVFF  435,5DB
35E4:  MOVLB  0
35E6:  CALL   0956
35EA:  MOVFF  03,434
35EE:  MOVFF  02,433
35F2:  MOVFF  01,432
35F6:  MOVFF  00,431
....................   
....................    if(rep2>=10) 
35FA:  MOVLB  4
35FC:  MOVF   x39,W
35FE:  SUBLW  09
3600:  BC    3652
....................    { 
....................     L2_eq = L2_eq/10;  
3602:  MOVFF  434,5DE
3606:  MOVFF  433,5DD
360A:  MOVFF  432,5DC
360E:  MOVFF  431,5DB
3612:  MOVLB  5
3614:  CLRF   xE2
3616:  CLRF   xE1
3618:  MOVLW  20
361A:  MOVWF  xE0
361C:  MOVLW  82
361E:  MOVWF  xDF
3620:  MOVLB  0
3622:  CALL   0BCE
3626:  MOVFF  03,434
362A:  MOVFF  02,433
362E:  MOVFF  01,432
3632:  MOVFF  00,431
....................     L2 = L2_eq; 
3636:  MOVFF  434,42A
363A:  MOVFF  433,429
363E:  MOVFF  432,428
3642:  MOVFF  431,427
....................     rep2=0; 
3646:  MOVLB  4
3648:  CLRF   x39
....................     L2_eq=0; 
364A:  CLRF   x34
364C:  CLRF   x33
364E:  CLRF   x32
3650:  CLRF   x31
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L2); // Converte adc em texto 
3652:  MOVLW  05
3654:  MOVWF  x79
3656:  MOVLW  77
3658:  MOVWF  x78
365A:  MOVLW  89
365C:  MOVWF  FE9
365E:  MOVFF  42A,5DA
3662:  MOVFF  429,5D9
3666:  MOVFF  428,5D8
366A:  MOVFF  427,5D7
366E:  MOVLW  01
3670:  MOVLB  5
3672:  MOVWF  xDB
3674:  MOVLB  0
3676:  CALL   0EA0
....................  
....................    if(L2>=100) 
367A:  MOVLB  5
367C:  CLRF   xDA
367E:  CLRF   xD9
3680:  MOVLW  48
3682:  MOVWF  xD8
3684:  MOVLW  85
3686:  MOVWF  xD7
3688:  MOVFF  42A,5DE
368C:  MOVFF  429,5DD
3690:  MOVFF  428,5DC
3694:  MOVFF  427,5DB
3698:  MOVLB  0
369A:  CALL   0D2C
369E:  BC    36A2
36A0:  BNZ   36AA
....................    { 
....................      string[6] = '\0'; 
36A2:  MOVLB  5
36A4:  CLRF   x7D
....................      string[5] = 'A'; 
36A6:  MOVLW  41
36A8:  MOVWF  x7C
....................    } 
....................    if(L2<100) 
36AA:  MOVFF  42A,5DA
36AE:  MOVFF  429,5D9
36B2:  MOVFF  428,5D8
36B6:  MOVFF  427,5D7
36BA:  MOVLB  5
36BC:  CLRF   xDE
36BE:  CLRF   xDD
36C0:  MOVLW  48
36C2:  MOVWF  xDC
36C4:  MOVLW  85
36C6:  MOVWF  xDB
36C8:  MOVLB  0
36CA:  CALL   0D2C
36CE:  BNC   36D8
....................    { 
....................      string[5] = '\0'; 
36D0:  MOVLB  5
36D2:  CLRF   x7C
....................      string[4] = 'A'; 
36D4:  MOVLW  41
36D6:  MOVWF  x7B
....................    } 
....................    if(L2<10) 
36D8:  MOVFF  42A,5DA
36DC:  MOVFF  429,5D9
36E0:  MOVFF  428,5D8
36E4:  MOVFF  427,5D7
36E8:  MOVLB  5
36EA:  CLRF   xDE
36EC:  CLRF   xDD
36EE:  MOVLW  20
36F0:  MOVWF  xDC
36F2:  MOVLW  82
36F4:  MOVWF  xDB
36F6:  MOVLB  0
36F8:  CALL   0D2C
36FC:  BNC   3706
....................    { 
....................      string[4] = '\0'; 
36FE:  MOVLB  5
3700:  CLRF   x7B
....................      string[3] = 'A'; 
3702:  MOVLW  41
3704:  MOVWF  x7A
....................    } 
....................     
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
3706:  MOVLW  12
3708:  MOVLB  5
370A:  MOVWF  xD7
370C:  MOVLW  2D
370E:  MOVWF  xD8
3710:  MOVLW  05
3712:  MOVWF  xDA
3714:  MOVLW  77
3716:  MOVWF  xD9
3718:  MOVLW  01
371A:  MOVWF  xDB
371C:  MOVWF  xDC
371E:  MOVLB  0
3720:  CALL   1148
....................       
....................    sprintf(string, "L2:"); // Converte char em texto 
3724:  MOVLW  05
3726:  MOVLB  4
3728:  MOVWF  x79
372A:  MOVLW  77
372C:  MOVWF  x78
372E:  MOVLW  4C
3730:  MOVWF  FF6
3732:  MOVLW  03
3734:  MOVWF  FF7
3736:  MOVLB  0
3738:  CALL   12F0
....................    string[3] = '\0'; 
373C:  MOVLB  5
373E:  CLRF   x7A
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3740:  MOVLW  01
3742:  MOVWF  xD7
3744:  MOVLW  2D
3746:  MOVWF  xD8
3748:  MOVLW  05
374A:  MOVWF  xDA
374C:  MOVLW  77
374E:  MOVWF  xD9
3750:  MOVLW  01
3752:  MOVWF  xDB
3754:  MOVWF  xDC
3756:  MOVLB  0
3758:  CALL   1148
....................     
....................    glcd_update();//update glcd 
375C:  CALL   0630
3760:  MOVLB  4
....................    
....................   }//if menu = 4 ou 5 
....................    
....................   if(menu==5)  //Menu de calibração do sensor L3 (offset) 
3762:  MOVF   x5A,W
3764:  SUBLW  05
3766:  BTFSS  FD8.2
3768:  BRA    3912
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
376A:  MOVLB  5
376C:  CLRF   xD7
376E:  MOVLB  0
3770:  CALL   04F4
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L3"); // converte char em texto 
3774:  MOVLW  05
3776:  MOVLB  4
3778:  MOVWF  x79
377A:  MOVLW  7E
377C:  MOVWF  x78
377E:  MOVLW  50
3780:  MOVWF  FF6
3782:  MOVLW  03
3784:  MOVWF  FF7
3786:  MOVLB  0
3788:  CALL   12F0
....................    string[40] = '\0'; 
378C:  MOVLB  5
378E:  CLRF   xA6
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3790:  MOVLW  01
3792:  MOVWF  xD7
3794:  MOVWF  xD8
3796:  MOVLW  05
3798:  MOVWF  xDA
379A:  MOVLW  7E
379C:  MOVWF  xD9
379E:  MOVLW  01
37A0:  MOVWF  xDB
37A2:  MOVWF  xDC
37A4:  MOVLB  0
37A6:  CALL   1148
....................     
....................    glcd_rect(0, 24, 80, 32, yes, on); 
37AA:  MOVLB  5
37AC:  CLRF   xD7
37AE:  MOVLW  18
37B0:  MOVWF  xD8
37B2:  MOVLW  50
37B4:  MOVWF  xD9
37B6:  MOVLW  20
37B8:  MOVWF  xDA
37BA:  MOVLW  01
37BC:  MOVWF  xDB
37BE:  MOVWF  xDC
37C0:  MOVLB  0
37C2:  CALL   23A0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
37C6:  MOVLW  05
37C8:  MOVLB  4
37CA:  MOVWF  x79
37CC:  MOVLW  7E
37CE:  MOVWF  x78
37D0:  MOVLW  72
37D2:  MOVWF  FF6
37D4:  MOVLW  03
37D6:  MOVWF  FF7
37D8:  MOVLB  0
37DA:  CALL   12F0
....................    glcd_text57(1, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
37DE:  MOVLW  01
37E0:  MOVLB  5
37E2:  MOVWF  xD7
37E4:  MOVLW  19
37E6:  MOVWF  xD8
37E8:  MOVLW  05
37EA:  MOVWF  xDA
37EC:  MOVLW  7E
37EE:  MOVWF  xD9
37F0:  MOVLW  01
37F2:  MOVWF  xDB
37F4:  CLRF   xDC
37F6:  MOVLB  0
37F8:  CALL   1148
....................     
....................    sprintf(string, "%ld",Offset_L3); // Converte adc em texto 
37FC:  MOVLW  05
37FE:  MOVLB  4
3800:  MOVWF  x79
3802:  MOVLW  7E
3804:  MOVWF  x78
3806:  MOVLW  10
3808:  MOVWF  FE9
380A:  MOVFF  43F,5D8
380E:  MOVFF  43E,5D7
3812:  MOVLB  0
3814:  CALL   216C
....................    glcd_text57(50, 25, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
3818:  MOVLW  32
381A:  MOVLB  5
381C:  MOVWF  xD7
381E:  MOVLW  19
3820:  MOVWF  xD8
3822:  MOVLW  05
3824:  MOVWF  xDA
3826:  MOVLW  7E
3828:  MOVWF  xD9
382A:  MOVLW  01
382C:  MOVWF  xDB
382E:  CLRF   xDC
3830:  MOVLB  0
3832:  CALL   1148
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
3836:  MOVLW  05
3838:  MOVLB  4
383A:  MOVWF  x79
383C:  MOVLW  7E
383E:  MOVWF  x78
3840:  MOVLW  7A
3842:  MOVWF  FF6
3844:  MOVLW  03
3846:  MOVWF  FF7
3848:  MOVLB  0
384A:  CALL   12F0
....................    glcd_text57(1, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
384E:  MOVLW  01
3850:  MOVLB  5
3852:  MOVWF  xD7
3854:  MOVLW  23
3856:  MOVWF  xD8
3858:  MOVLW  05
385A:  MOVWF  xDA
385C:  MOVLW  7E
385E:  MOVWF  xD9
3860:  MOVLW  01
3862:  MOVWF  xDB
3864:  MOVWF  xDC
3866:  MOVLB  0
3868:  CALL   1148
....................     
....................    sprintf(string, "%f",ref_L3); // Converte adc em texto 
386C:  MOVLW  05
386E:  MOVLB  4
3870:  MOVWF  x79
3872:  MOVLW  7E
3874:  MOVWF  x78
3876:  MOVLW  89
3878:  MOVWF  FE9
387A:  MOVFF  443,5DA
387E:  MOVFF  442,5D9
3882:  MOVFF  441,5D8
3886:  MOVFF  440,5D7
388A:  MOVLW  02
388C:  MOVLB  5
388E:  MOVWF  xDB
3890:  MOVLB  0
3892:  CALL   0EA0
....................    glcd_text57(50, 35, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3896:  MOVLW  32
3898:  MOVLB  5
389A:  MOVWF  xD7
389C:  MOVLW  23
389E:  MOVWF  xD8
38A0:  MOVLW  05
38A2:  MOVWF  xDA
38A4:  MOVLW  7E
38A6:  MOVWF  xD9
38A8:  MOVLW  01
38AA:  MOVWF  xDB
38AC:  MOVWF  xDC
38AE:  MOVLB  0
38B0:  CALL   1148
....................     
....................    if(!input(pin_E1)&&Offset_L3<5000) //incrementa && valor maximo 
38B4:  BSF    F96.1
38B6:  BTFSC  F84.1
38B8:  BRA    38DE
38BA:  MOVLB  4
38BC:  MOVF   x3F,W
38BE:  SUBLW  13
38C0:  BTFSC  FD8.0
38C2:  BRA    38C8
38C4:  MOVLB  0
38C6:  BRA    38DE
38C8:  BNZ   38D6
38CA:  MOVF   x3E,W
38CC:  SUBLW  87
38CE:  BTFSC  FD8.0
38D0:  BRA    38D6
38D2:  MOVLB  0
38D4:  BRA    38DE
....................    { 
....................      Offset_L3++; 
38D6:  INCF   x3E,F
38D8:  BTFSC  FD8.2
38DA:  INCF   x3F,F
38DC:  MOVLB  0
....................    } 
....................    if(!input(pin_C2)&&Offset_L3>2000) //decrementa && valor minimo 
38DE:  BSF    F94.2
38E0:  BTFSC  F82.2
38E2:  BRA    390C
38E4:  MOVLB  4
38E6:  MOVF   x3F,W
38E8:  SUBLW  06
38EA:  BTFSS  FD8.0
38EC:  BRA    38F2
38EE:  MOVLB  0
38F0:  BRA    390C
38F2:  XORLW  FF
38F4:  BNZ   3902
38F6:  MOVF   x3E,W
38F8:  SUBLW  D0
38FA:  BTFSS  FD8.0
38FC:  BRA    3902
38FE:  MOVLB  0
3900:  BRA    390C
....................    { 
....................      Offset_L3--; 
3902:  MOVF   x3E,W
3904:  BTFSC  FD8.2
3906:  DECF   x3F,F
3908:  DECF   x3E,F
390A:  MOVLB  0
....................    } 
....................    glcd_update();//update glcd 
390C:  CALL   0630
3910:  MOVLB  4
....................    
....................   }//if menu=6 
....................    
....................   if(menu==6)  //Menu de calibração do sensor L3 (Ref) 
3912:  MOVF   x5A,W
3914:  SUBLW  06
3916:  BTFSS  FD8.2
3918:  BRA    3B36
....................   { 
....................    glcd_fillScreen(OFF);//clear glcd 
391A:  MOVLB  5
391C:  CLRF   xD7
391E:  MOVLB  0
3920:  CALL   04F4
....................     
....................    char string[41]; 
....................    sprintf(string, "Calibracao           do Sensor L3"); // converte char em texto 
3924:  MOVLW  05
3926:  MOVLB  4
3928:  MOVWF  x79
392A:  MOVLW  A7
392C:  MOVWF  x78
392E:  MOVLW  80
3930:  MOVWF  FF6
3932:  MOVLW  03
3934:  MOVWF  FF7
3936:  MOVLB  0
3938:  CALL   12F0
....................    string[40] = '\0'; 
393C:  MOVLB  5
393E:  CLRF   xCF
....................    glcd_text57(1, 1, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3940:  MOVLW  01
3942:  MOVWF  xD7
3944:  MOVWF  xD8
3946:  MOVLW  05
3948:  MOVWF  xDA
394A:  MOVLW  A7
394C:  MOVWF  xD9
394E:  MOVLW  01
3950:  MOVWF  xDB
3952:  MOVWF  xDC
3954:  MOVLB  0
3956:  CALL   1148
....................     
....................    glcd_rect(0, 34, 80, 42, yes, on); 
395A:  MOVLB  5
395C:  CLRF   xD7
395E:  MOVLW  22
3960:  MOVWF  xD8
3962:  MOVLW  50
3964:  MOVWF  xD9
3966:  MOVLW  2A
3968:  MOVWF  xDA
396A:  MOVLW  01
396C:  MOVWF  xDB
396E:  MOVWF  xDC
3970:  MOVLB  0
3972:  CALL   23A0
....................     
....................    sprintf(string, "Offset:"); // converte char em texto 
3976:  MOVLW  05
3978:  MOVLB  4
397A:  MOVWF  x79
397C:  MOVLW  A7
397E:  MOVWF  x78
3980:  MOVLW  A2
3982:  MOVWF  FF6
3984:  MOVLW  03
3986:  MOVWF  FF7
3988:  MOVLB  0
398A:  CALL   12F0
....................    glcd_text57(1, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
398E:  MOVLW  01
3990:  MOVLB  5
3992:  MOVWF  xD7
3994:  MOVLW  19
3996:  MOVWF  xD8
3998:  MOVLW  05
399A:  MOVWF  xDA
399C:  MOVLW  A7
399E:  MOVWF  xD9
39A0:  MOVLW  01
39A2:  MOVWF  xDB
39A4:  MOVWF  xDC
39A6:  MOVLB  0
39A8:  CALL   1148
....................     
....................    sprintf(string, "%ld",Offset_L3); // Converte adc em texto 
39AC:  MOVLW  05
39AE:  MOVLB  4
39B0:  MOVWF  x79
39B2:  MOVLW  A7
39B4:  MOVWF  x78
39B6:  MOVLW  10
39B8:  MOVWF  FE9
39BA:  MOVFF  43F,5D8
39BE:  MOVFF  43E,5D7
39C2:  MOVLB  0
39C4:  CALL   216C
....................    glcd_text57(50, 25, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
39C8:  MOVLW  32
39CA:  MOVLB  5
39CC:  MOVWF  xD7
39CE:  MOVLW  19
39D0:  MOVWF  xD8
39D2:  MOVLW  05
39D4:  MOVWF  xDA
39D6:  MOVLW  A7
39D8:  MOVWF  xD9
39DA:  MOVLW  01
39DC:  MOVWF  xDB
39DE:  MOVWF  xDC
39E0:  MOVLB  0
39E2:  CALL   1148
....................     
....................    sprintf(string, "Ref:"); // converte char em texto 
39E6:  MOVLW  05
39E8:  MOVLB  4
39EA:  MOVWF  x79
39EC:  MOVLW  A7
39EE:  MOVWF  x78
39F0:  MOVLW  AA
39F2:  MOVWF  FF6
39F4:  MOVLW  03
39F6:  MOVWF  FF7
39F8:  MOVLB  0
39FA:  CALL   12F0
....................    glcd_text57(1, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
39FE:  MOVLW  01
3A00:  MOVLB  5
3A02:  MOVWF  xD7
3A04:  MOVLW  23
3A06:  MOVWF  xD8
3A08:  MOVLW  05
3A0A:  MOVWF  xDA
3A0C:  MOVLW  A7
3A0E:  MOVWF  xD9
3A10:  MOVLW  01
3A12:  MOVWF  xDB
3A14:  CLRF   xDC
3A16:  MOVLB  0
3A18:  CALL   1148
....................     
....................    sprintf(string, "%1.2f",ref_L3); // Converte adc em texto 
3A1C:  MOVLW  05
3A1E:  MOVLB  4
3A20:  MOVWF  x79
3A22:  MOVLW  A7
3A24:  MOVWF  x78
3A26:  MOVLW  89
3A28:  MOVWF  FE9
3A2A:  MOVFF  443,5DA
3A2E:  MOVFF  442,5D9
3A32:  MOVFF  441,5D8
3A36:  MOVFF  440,5D7
3A3A:  MOVLW  02
3A3C:  MOVLB  5
3A3E:  MOVWF  xDB
3A40:  MOVLB  0
3A42:  CALL   0EA0
....................    glcd_text57(50, 35, string, 1, off);//printf (linha, coluna, string,tamanho, color) 
3A46:  MOVLW  32
3A48:  MOVLB  5
3A4A:  MOVWF  xD7
3A4C:  MOVLW  23
3A4E:  MOVWF  xD8
3A50:  MOVLW  05
3A52:  MOVWF  xDA
3A54:  MOVLW  A7
3A56:  MOVWF  xD9
3A58:  MOVLW  01
3A5A:  MOVWF  xDB
3A5C:  CLRF   xDC
3A5E:  MOVLB  0
3A60:  CALL   1148
....................     
....................     
....................    if(!input(pin_E1)&&ref_L3<30) //incrementa && valor maximo 
3A64:  BSF    F96.1
3A66:  BTFSC  F84.1
3A68:  BRA    3ACA
3A6A:  MOVFF  443,5DA
3A6E:  MOVFF  442,5D9
3A72:  MOVFF  441,5D8
3A76:  MOVFF  440,5D7
3A7A:  MOVLB  5
3A7C:  CLRF   xDE
3A7E:  CLRF   xDD
3A80:  MOVLW  70
3A82:  MOVWF  xDC
3A84:  MOVLW  83
3A86:  MOVWF  xDB
3A88:  MOVLB  0
3A8A:  CALL   0D2C
3A8E:  BNC   3ACA
....................    { 
....................      ref_L3=ref_L3+0.1; 
3A90:  BCF    FD8.1
3A92:  MOVFF  443,5DA
3A96:  MOVFF  442,5D9
3A9A:  MOVFF  441,5D8
3A9E:  MOVFF  440,5D7
3AA2:  MOVLW  CD
3AA4:  MOVLB  5
3AA6:  MOVWF  xDE
3AA8:  MOVLW  CC
3AAA:  MOVWF  xDD
3AAC:  MOVLW  4C
3AAE:  MOVWF  xDC
3AB0:  MOVLW  7B
3AB2:  MOVWF  xDB
3AB4:  MOVLB  0
3AB6:  CALL   0956
3ABA:  MOVFF  03,443
3ABE:  MOVFF  02,442
3AC2:  MOVFF  01,441
3AC6:  MOVFF  00,440
....................    } 
....................    if(!input(pin_C2)&&ref_L3>5) //decrementa && valor minimo 
3ACA:  BSF    F94.2
3ACC:  BTFSC  F82.2
3ACE:  BRA    3B30
3AD0:  MOVLB  5
3AD2:  CLRF   xDA
3AD4:  CLRF   xD9
3AD6:  MOVLW  20
3AD8:  MOVWF  xD8
3ADA:  MOVLW  81
3ADC:  MOVWF  xD7
3ADE:  MOVFF  443,5DE
3AE2:  MOVFF  442,5DD
3AE6:  MOVFF  441,5DC
3AEA:  MOVFF  440,5DB
3AEE:  MOVLB  0
3AF0:  CALL   0D2C
3AF4:  BNC   3B30
....................    { 
....................      ref_L3=ref_L3-0.1; 
3AF6:  BSF    FD8.1
3AF8:  MOVFF  443,5DA
3AFC:  MOVFF  442,5D9
3B00:  MOVFF  441,5D8
3B04:  MOVFF  440,5D7
3B08:  MOVLW  CD
3B0A:  MOVLB  5
3B0C:  MOVWF  xDE
3B0E:  MOVLW  CC
3B10:  MOVWF  xDD
3B12:  MOVLW  4C
3B14:  MOVWF  xDC
3B16:  MOVLW  7B
3B18:  MOVWF  xDB
3B1A:  MOVLB  0
3B1C:  CALL   0956
3B20:  MOVFF  03,443
3B24:  MOVFF  02,442
3B28:  MOVFF  01,441
3B2C:  MOVFF  00,440
....................    } 
....................     
....................    glcd_update();//update glcd 
3B30:  CALL   0630
3B34:  MOVLB  4
....................    
....................   }//if menu=7 
....................  
....................   if(menu==5||menu==6) //Strings em comum - calibração do sensor L3  
3B36:  MOVF   x5A,W
3B38:  SUBLW  05
3B3A:  BZ    3B44
3B3C:  MOVF   x5A,W
3B3E:  SUBLW  06
3B40:  BTFSS  FD8.2
3B42:  BRA    3E1C
....................   { 
....................    //Leitura do sensor L1 para tela de calibração 
....................     
....................    set_adc_channel(2); 
3B44:  MOVLW  10
3B46:  MOVWF  01
3B48:  MOVF   FC2,W
3B4A:  ANDLW  C7
3B4C:  IORWF  01,W
3B4E:  MOVWF  FC2
....................    delay_us(20); 
3B50:  MOVLW  1A
3B52:  MOVWF  00
3B54:  DECFSZ 00,F
3B56:  BRA    3B54
3B58:  NOP   
....................    mediaAD_L3=0; valor=0; tensao=0; 
3B5A:  CLRF   x52
3B5C:  CLRF   x51
3B5E:  CLRF   x58
3B60:  CLRF   x57
3B62:  CLRF   x56
3B64:  CLRF   x55
3B66:  CLRF   x54
3B68:  CLRF   x53
....................     
....................    for(rep=1; rep<=8; rep++) 
3B6A:  MOVLW  01
3B6C:  MOVWF  x59
3B6E:  MOVF   x59,W
3B70:  SUBLW  08
3B72:  BNC   3B9C
....................    { 
....................      valor= read_adc(); 
3B74:  BSF    FC2.2
3B76:  BTFSC  FC2.2
3B78:  BRA    3B76
3B7A:  MOVFF  FC3,457
3B7E:  MOVFF  FC4,458
....................      delay_ms(4); 
3B82:  MOVLW  04
3B84:  MOVLB  5
3B86:  MOVWF  xD7
3B88:  MOVLB  0
3B8A:  CALL   03C6
....................      mediaAD_L3= mediaAD_L3 + valor; 
3B8E:  MOVLB  4
3B90:  MOVF   x57,W
3B92:  ADDWF  x51,F
3B94:  MOVF   x58,W
3B96:  ADDWFC x52,F
....................    } 
3B98:  INCF   x59,F
3B9A:  BRA    3B6E
....................    mediaAD_L3= mediaAD_L3/8; 
3B9C:  RRCF   x52,F
3B9E:  RRCF   x51,F
3BA0:  RRCF   x52,F
3BA2:  RRCF   x51,F
3BA4:  RRCF   x52,F
3BA6:  RRCF   x51,F
3BA8:  MOVLW  1F
3BAA:  ANDWF  x52,F
....................    tensao=(float)mediaAD_L3*4.8828; 
3BAC:  MOVFF  452,5D8
3BB0:  MOVFF  451,5D7
3BB4:  MOVLB  0
3BB6:  CALL   082A
3BBA:  MOVFF  00,5D7
3BBE:  MOVFF  01,5D8
3BC2:  MOVFF  02,5D9
3BC6:  MOVFF  03,5DA
3BCA:  MOVFF  03,5E7
3BCE:  MOVFF  02,5E6
3BD2:  MOVFF  01,5E5
3BD6:  MOVFF  00,5E4
3BDA:  MOVLW  E6
3BDC:  MOVLB  5
3BDE:  MOVWF  xEB
3BE0:  MOVLW  3F
3BE2:  MOVWF  xEA
3BE4:  MOVLW  1C
3BE6:  MOVWF  xE9
3BE8:  MOVLW  81
3BEA:  MOVWF  xE8
3BEC:  MOVLB  0
3BEE:  CALL   0860
3BF2:  MOVFF  03,456
3BF6:  MOVFF  02,455
3BFA:  MOVFF  01,454
3BFE:  MOVFF  00,453
....................    L3_real=(float) (tensao - Offset_L3)/ref_L3; 
3C02:  MOVFF  43F,5D8
3C06:  MOVFF  43E,5D7
3C0A:  CALL   082A
3C0E:  BSF    FD8.1
3C10:  MOVFF  456,5DA
3C14:  MOVFF  455,5D9
3C18:  MOVFF  454,5D8
3C1C:  MOVFF  453,5D7
3C20:  MOVFF  03,5DE
3C24:  MOVFF  02,5DD
3C28:  MOVFF  01,5DC
3C2C:  MOVFF  00,5DB
3C30:  CALL   0956
3C34:  MOVFF  00,5D7
3C38:  MOVFF  01,5D8
3C3C:  MOVFF  02,5D9
3C40:  MOVFF  03,5DA
3C44:  MOVFF  03,5DE
3C48:  MOVFF  02,5DD
3C4C:  MOVFF  01,5DC
3C50:  MOVFF  00,5DB
3C54:  MOVFF  443,5E2
3C58:  MOVFF  442,5E1
3C5C:  MOVFF  441,5E0
3C60:  MOVFF  440,5DF
3C64:  CALL   0BCE
3C68:  MOVFF  03,44B
3C6C:  MOVFF  02,44A
3C70:  MOVFF  01,449
3C74:  MOVFF  00,448
....................       
....................    rep3++; 
3C78:  MOVLB  4
3C7A:  INCF   x4C,F
....................    L3_eq=L3_eq+L3_real; 
3C7C:  BCF    FD8.1
3C7E:  MOVFF  447,5DA
3C82:  MOVFF  446,5D9
3C86:  MOVFF  445,5D8
3C8A:  MOVFF  444,5D7
3C8E:  MOVFF  44B,5DE
3C92:  MOVFF  44A,5DD
3C96:  MOVFF  449,5DC
3C9A:  MOVFF  448,5DB
3C9E:  MOVLB  0
3CA0:  CALL   0956
3CA4:  MOVFF  03,447
3CA8:  MOVFF  02,446
3CAC:  MOVFF  01,445
3CB0:  MOVFF  00,444
....................   
....................    if(rep3>=10) 
3CB4:  MOVLB  4
3CB6:  MOVF   x4C,W
3CB8:  SUBLW  09
3CBA:  BC    3D0C
....................    { 
....................     L3_eq = L3_eq/10;  
3CBC:  MOVFF  447,5DE
3CC0:  MOVFF  446,5DD
3CC4:  MOVFF  445,5DC
3CC8:  MOVFF  444,5DB
3CCC:  MOVLB  5
3CCE:  CLRF   xE2
3CD0:  CLRF   xE1
3CD2:  MOVLW  20
3CD4:  MOVWF  xE0
3CD6:  MOVLW  82
3CD8:  MOVWF  xDF
3CDA:  MOVLB  0
3CDC:  CALL   0BCE
3CE0:  MOVFF  03,447
3CE4:  MOVFF  02,446
3CE8:  MOVFF  01,445
3CEC:  MOVFF  00,444
....................     L3 = L3_eq; 
3CF0:  MOVFF  447,43D
3CF4:  MOVFF  446,43C
3CF8:  MOVFF  445,43B
3CFC:  MOVFF  444,43A
....................     rep3=0; 
3D00:  MOVLB  4
3D02:  CLRF   x4C
....................     L3_eq=0; 
3D04:  CLRF   x47
3D06:  CLRF   x46
3D08:  CLRF   x45
3D0A:  CLRF   x44
....................    } 
....................       
....................    char string[7];   
....................    sprintf(string, "%.1f", (float)L3); // Converte adc em texto 
3D0C:  MOVLW  05
3D0E:  MOVWF  x79
3D10:  MOVLW  D0
3D12:  MOVWF  x78
3D14:  MOVLW  89
3D16:  MOVWF  FE9
3D18:  MOVFF  43D,5DA
3D1C:  MOVFF  43C,5D9
3D20:  MOVFF  43B,5D8
3D24:  MOVFF  43A,5D7
3D28:  MOVLW  01
3D2A:  MOVLB  5
3D2C:  MOVWF  xDB
3D2E:  MOVLB  0
3D30:  CALL   0EA0
....................  
....................    if(L3>=100) 
3D34:  MOVLB  5
3D36:  CLRF   xDA
3D38:  CLRF   xD9
3D3A:  MOVLW  48
3D3C:  MOVWF  xD8
3D3E:  MOVLW  85
3D40:  MOVWF  xD7
3D42:  MOVFF  43D,5DE
3D46:  MOVFF  43C,5DD
3D4A:  MOVFF  43B,5DC
3D4E:  MOVFF  43A,5DB
3D52:  MOVLB  0
3D54:  CALL   0D2C
3D58:  BC    3D5C
3D5A:  BNZ   3D64
....................    { 
....................      string[6] = '\0'; 
3D5C:  MOVLB  5
3D5E:  CLRF   xD6
....................      string[5] = 'A'; 
3D60:  MOVLW  41
3D62:  MOVWF  xD5
....................    } 
....................    if(L3<100) 
3D64:  MOVFF  43D,5DA
3D68:  MOVFF  43C,5D9
3D6C:  MOVFF  43B,5D8
3D70:  MOVFF  43A,5D7
3D74:  MOVLB  5
3D76:  CLRF   xDE
3D78:  CLRF   xDD
3D7A:  MOVLW  48
3D7C:  MOVWF  xDC
3D7E:  MOVLW  85
3D80:  MOVWF  xDB
3D82:  MOVLB  0
3D84:  CALL   0D2C
3D88:  BNC   3D92
....................    { 
....................      string[5] = '\0'; 
3D8A:  MOVLB  5
3D8C:  CLRF   xD5
....................      string[4] = 'A'; 
3D8E:  MOVLW  41
3D90:  MOVWF  xD4
....................    } 
....................    if(L3<10) 
3D92:  MOVFF  43D,5DA
3D96:  MOVFF  43C,5D9
3D9A:  MOVFF  43B,5D8
3D9E:  MOVFF  43A,5D7
3DA2:  MOVLB  5
3DA4:  CLRF   xDE
3DA6:  CLRF   xDD
3DA8:  MOVLW  20
3DAA:  MOVWF  xDC
3DAC:  MOVLW  82
3DAE:  MOVWF  xDB
3DB0:  MOVLB  0
3DB2:  CALL   0D2C
3DB6:  BNC   3DC0
....................    { 
....................      string[4] = '\0'; 
3DB8:  MOVLB  5
3DBA:  CLRF   xD4
....................      string[3] = 'A'; 
3DBC:  MOVLW  41
3DBE:  MOVWF  xD3
....................    } 
....................     
....................    glcd_text57(18, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
3DC0:  MOVLW  12
3DC2:  MOVLB  5
3DC4:  MOVWF  xD7
3DC6:  MOVLW  2D
3DC8:  MOVWF  xD8
3DCA:  MOVLW  05
3DCC:  MOVWF  xDA
3DCE:  MOVLW  D0
3DD0:  MOVWF  xD9
3DD2:  MOVLW  01
3DD4:  MOVWF  xDB
3DD6:  MOVWF  xDC
3DD8:  MOVLB  0
3DDA:  CALL   1148
....................       
....................    sprintf(string, "L3:"); // Converte char em texto 
3DDE:  MOVLW  05
3DE0:  MOVLB  4
3DE2:  MOVWF  x79
3DE4:  MOVLW  D0
3DE6:  MOVWF  x78
3DE8:  MOVLW  B0
3DEA:  MOVWF  FF6
3DEC:  MOVLW  03
3DEE:  MOVWF  FF7
3DF0:  MOVLB  0
3DF2:  CALL   12F0
....................    string[3] = '\0'; 
3DF6:  MOVLB  5
3DF8:  CLRF   xD3
....................    glcd_text57(1, 45, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
3DFA:  MOVLW  01
3DFC:  MOVWF  xD7
3DFE:  MOVLW  2D
3E00:  MOVWF  xD8
3E02:  MOVLW  05
3E04:  MOVWF  xDA
3E06:  MOVLW  D0
3E08:  MOVWF  xD9
3E0A:  MOVLW  01
3E0C:  MOVWF  xDB
3E0E:  MOVWF  xDC
3E10:  MOVLB  0
3E12:  CALL   1148
....................     
....................    glcd_update();//update glcd 
3E16:  CALL   0630
3E1A:  MOVLB  4
....................    
....................   }//if menu = 6 ou 7 
....................    
....................  
.................... }//controle_menu 
3E1C:  MOVLB  0
3E1E:  GOTO   4234 (RETURN)
....................  
....................  void calculos_potencia() 
....................  { 
....................   if (menu==0&&menu_lib==0) 
*
1DA4:  MOVLB  4
1DA6:  MOVF   x5A,F
1DA8:  BTFSS  FD8.2
1DAA:  BRA    2166
1DAC:  MOVF   x5B,F
1DAE:  BTFSS  FD8.2
1DB0:  BRA    2166
....................   { 
....................    //CALCULA CORRENTE MEDIA EM AMPERES 
....................    corrente_media=0; 
1DB2:  CLRF   x6B
1DB4:  CLRF   x6A
1DB6:  CLRF   x69
1DB8:  CLRF   x68
....................    corrente_media= L1+L2+L3; 
1DBA:  BCF    FD8.1
1DBC:  MOVFF  417,5DA
1DC0:  MOVFF  416,5D9
1DC4:  MOVFF  415,5D8
1DC8:  MOVFF  414,5D7
1DCC:  MOVFF  42A,5DE
1DD0:  MOVFF  429,5DD
1DD4:  MOVFF  428,5DC
1DD8:  MOVFF  427,5DB
1DDC:  MOVLB  0
1DDE:  CALL   0956
1DE2:  MOVFF  00,484
1DE6:  MOVFF  01,485
1DEA:  MOVFF  02,486
1DEE:  MOVFF  03,487
1DF2:  BCF    FD8.1
1DF4:  MOVFF  03,5DA
1DF8:  MOVFF  02,5D9
1DFC:  MOVFF  01,5D8
1E00:  MOVFF  00,5D7
1E04:  MOVFF  43D,5DE
1E08:  MOVFF  43C,5DD
1E0C:  MOVFF  43B,5DC
1E10:  MOVFF  43A,5DB
1E14:  CALL   0956
1E18:  MOVFF  03,46B
1E1C:  MOVFF  02,46A
1E20:  MOVFF  01,469
1E24:  MOVFF  00,468
....................    corrente_media= corrente_media/3; 
1E28:  MOVFF  46B,5DE
1E2C:  MOVFF  46A,5DD
1E30:  MOVFF  469,5DC
1E34:  MOVFF  468,5DB
1E38:  MOVLB  5
1E3A:  CLRF   xE2
1E3C:  CLRF   xE1
1E3E:  MOVLW  40
1E40:  MOVWF  xE0
1E42:  MOVLW  80
1E44:  MOVWF  xDF
1E46:  MOVLB  0
1E48:  CALL   0BCE
1E4C:  MOVFF  03,46B
1E50:  MOVFF  02,46A
1E54:  MOVFF  01,469
1E58:  MOVFF  00,468
....................     
....................    soma_corrente++; 
1E5C:  MOVLB  4
1E5E:  INCF   x74,F
....................    corrente_eq=corrente_eq+corrente_media; 
1E60:  BCF    FD8.1
1E62:  MOVFF  46F,5DA
1E66:  MOVFF  46E,5D9
1E6A:  MOVFF  46D,5D8
1E6E:  MOVFF  46C,5D7
1E72:  MOVFF  46B,5DE
1E76:  MOVFF  46A,5DD
1E7A:  MOVFF  469,5DC
1E7E:  MOVFF  468,5DB
1E82:  MOVLB  0
1E84:  CALL   0956
1E88:  MOVFF  03,46F
1E8C:  MOVFF  02,46E
1E90:  MOVFF  01,46D
1E94:  MOVFF  00,46C
....................     
....................    if(soma_corrente==10) 
1E98:  MOVLB  4
1E9A:  MOVF   x74,W
1E9C:  SUBLW  0A
1E9E:  BNZ   1EF0
....................    { 
....................     corrente_eq = corrente_eq/10;  
1EA0:  MOVFF  46F,5DE
1EA4:  MOVFF  46E,5DD
1EA8:  MOVFF  46D,5DC
1EAC:  MOVFF  46C,5DB
1EB0:  MOVLB  5
1EB2:  CLRF   xE2
1EB4:  CLRF   xE1
1EB6:  MOVLW  20
1EB8:  MOVWF  xE0
1EBA:  MOVLW  82
1EBC:  MOVWF  xDF
1EBE:  MOVLB  0
1EC0:  CALL   0BCE
1EC4:  MOVFF  03,46F
1EC8:  MOVFF  02,46E
1ECC:  MOVFF  01,46D
1ED0:  MOVFF  00,46C
....................     corrente_real = corrente_eq; 
1ED4:  MOVFF  46F,473
1ED8:  MOVFF  46E,472
1EDC:  MOVFF  46D,471
1EE0:  MOVFF  46C,470
....................     soma_corrente=0; 
1EE4:  MOVLB  4
1EE6:  CLRF   x74
....................     corrente_eq=0; 
1EE8:  CLRF   x6F
1EEA:  CLRF   x6E
1EEC:  CLRF   x6D
1EEE:  CLRF   x6C
....................    } 
....................     
....................    //calcula potencia real em Watts 
....................    pot_real=tensao_rede*corrente_media*1.732*0.85; 
1EF0:  MOVFF  467,5D8
1EF4:  MOVFF  466,5D7
1EF8:  MOVLB  0
1EFA:  CALL   082A
1EFE:  MOVFF  03,5E7
1F02:  MOVFF  02,5E6
1F06:  MOVFF  01,5E5
1F0A:  MOVFF  00,5E4
1F0E:  MOVFF  46B,5EB
1F12:  MOVFF  46A,5EA
1F16:  MOVFF  469,5E9
1F1A:  MOVFF  468,5E8
1F1E:  CALL   0860
1F22:  MOVFF  00,484
1F26:  MOVFF  01,485
1F2A:  MOVFF  02,486
1F2E:  MOVFF  03,487
1F32:  MOVFF  03,5E7
1F36:  MOVFF  02,5E6
1F3A:  MOVFF  01,5E5
1F3E:  MOVFF  00,5E4
1F42:  MOVLW  2D
1F44:  MOVLB  5
1F46:  MOVWF  xEB
1F48:  MOVLW  B2
1F4A:  MOVWF  xEA
1F4C:  MOVLW  5D
1F4E:  MOVWF  xE9
1F50:  MOVLW  7F
1F52:  MOVWF  xE8
1F54:  MOVLB  0
1F56:  CALL   0860
1F5A:  MOVFF  00,484
1F5E:  MOVFF  01,485
1F62:  MOVFF  02,486
1F66:  MOVFF  03,487
1F6A:  MOVFF  03,5E7
1F6E:  MOVFF  02,5E6
1F72:  MOVFF  01,5E5
1F76:  MOVFF  00,5E4
1F7A:  MOVLW  9A
1F7C:  MOVLB  5
1F7E:  MOVWF  xEB
1F80:  MOVLW  99
1F82:  MOVWF  xEA
1F84:  MOVLW  59
1F86:  MOVWF  xE9
1F88:  MOVLW  7E
1F8A:  MOVWF  xE8
1F8C:  MOVLB  0
1F8E:  CALL   0860
1F92:  MOVFF  03,487
1F96:  MOVFF  02,486
1F9A:  MOVFF  01,485
1F9E:  MOVFF  00,484
1FA2:  RCALL  1C30
1FA4:  MOVFF  02,464
1FA8:  MOVFF  01,463
....................    
....................    char string[10];   
....................    sprintf(string, "%.1lf", (float)pot_real); // Converte adc em texto 
1FAC:  MOVFF  464,5D8
1FB0:  MOVFF  463,5D7
1FB4:  CALL   082A
1FB8:  MOVFF  00,484
1FBC:  MOVFF  01,485
1FC0:  MOVFF  02,486
1FC4:  MOVFF  03,487
1FC8:  MOVLW  04
1FCA:  MOVLB  4
1FCC:  MOVWF  x79
1FCE:  MOVLW  7A
1FD0:  MOVWF  x78
1FD2:  MOVLW  89
1FD4:  MOVWF  FE9
1FD6:  MOVFF  03,5DA
1FDA:  MOVFF  02,5D9
1FDE:  MOVFF  01,5D8
1FE2:  MOVFF  00,5D7
1FE6:  MOVLW  01
1FE8:  MOVLB  5
1FEA:  MOVWF  xDB
1FEC:  MOVLB  0
1FEE:  CALL   0EA0
....................  
....................    if(pot_real>10000) 
1FF2:  MOVLB  4
1FF4:  MOVF   x64,W
1FF6:  SUBLW  26
1FF8:  BC    200A
1FFA:  XORLW  FF
1FFC:  BNZ   2004
1FFE:  MOVF   x63,W
2000:  SUBLW  10
2002:  BC    200A
....................    { 
....................      string[8] = '\0'; 
2004:  CLRF   x82
....................      string[7] = 'W'; 
2006:  MOVLW  57
2008:  MOVWF  x81
....................    } 
....................     
....................    if(pot_real<10000) 
200A:  MOVF   x64,W
200C:  SUBLW  27
200E:  BNC   201E
2010:  BNZ   2018
2012:  MOVF   x63,W
2014:  SUBLW  0F
2016:  BNC   201E
....................    { 
....................      string[7] = '\0'; 
2018:  CLRF   x81
....................      string[6] = 'W'; 
201A:  MOVLW  57
201C:  MOVWF  x80
....................    } 
....................  
....................    if(pot_real<1000) 
201E:  MOVF   x64,W
2020:  SUBLW  03
2022:  BNC   2032
2024:  BNZ   202C
2026:  MOVF   x63,W
2028:  SUBLW  E7
202A:  BNC   2032
....................    { 
....................      string[6] = '\0'; 
202C:  CLRF   x80
....................      string[5] = 'W'; 
202E:  MOVLW  57
2030:  MOVWF  x7F
....................    } 
....................    if(pot_real<100) 
2032:  MOVF   x64,F
2034:  BNZ   2042
2036:  MOVF   x63,W
2038:  SUBLW  63
203A:  BNC   2042
....................    { 
....................      string[5] = '\0'; 
203C:  CLRF   x7F
....................      string[4] = 'W'; 
203E:  MOVLW  57
2040:  MOVWF  x7E
....................    } 
....................    if(pot_real<10) 
2042:  MOVF   x64,F
2044:  BNZ   2052
2046:  MOVF   x63,W
2048:  SUBLW  09
204A:  BNC   2052
....................    { 
....................      string[4] = '\0'; 
204C:  CLRF   x7E
....................      string[3] = 'W'; 
204E:  MOVLW  57
2050:  MOVWF  x7D
....................    } 
....................     
....................    glcd_text57(60, 40, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
2052:  MOVLW  3C
2054:  MOVLB  5
2056:  MOVWF  xD7
2058:  MOVLW  28
205A:  MOVWF  xD8
205C:  MOVLW  04
205E:  MOVWF  xDA
2060:  MOVLW  7A
2062:  MOVWF  xD9
2064:  MOVLW  01
2066:  MOVWF  xDB
2068:  MOVWF  xDC
206A:  MOVLB  0
206C:  CALL   1148
....................       
....................    sprintf(string, "P(Real)="); // Converte char em texto 
2070:  MOVLW  04
2072:  MOVLB  4
2074:  MOVWF  x79
2076:  MOVLW  7A
2078:  MOVWF  x78
207A:  MOVLW  B4
207C:  MOVWF  FF6
207E:  MOVLW  03
2080:  MOVWF  FF7
2082:  MOVLB  0
2084:  CALL   12F0
....................    string[8] = '\0'; 
2088:  MOVLB  4
208A:  CLRF   x82
....................    glcd_text57(1, 40, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
208C:  MOVLW  01
208E:  MOVLB  5
2090:  MOVWF  xD7
2092:  MOVLW  28
2094:  MOVWF  xD8
2096:  MOVLW  04
2098:  MOVWF  xDA
209A:  MOVLW  7A
209C:  MOVWF  xD9
209E:  MOVLW  01
20A0:  MOVWF  xDB
20A2:  MOVWF  xDC
20A4:  MOVLB  0
20A6:  CALL   1148
....................     
....................     
....................     
....................    //Calcula potenia em HP 
....................    pot_HP = 2*(pot_real/746); 
20AA:  MOVFF  464,485
20AE:  MOVFF  463,484
20B2:  MOVLW  02
20B4:  MOVLB  4
20B6:  MOVWF  x87
20B8:  MOVLW  EA
20BA:  MOVWF  x86
20BC:  MOVLB  0
20BE:  BRA    1C6C
20C0:  MOVFF  02,03
20C4:  MOVFF  01,02
20C8:  BCF    FD8.0
20CA:  RLCF   02,F
20CC:  RLCF   03,F
20CE:  MOVFF  02,465
20D2:  MOVLB  4
....................       
....................    sprintf(string, "%2.0d", pot_HP); // Converte adc em texto 
20D4:  MOVLW  04
20D6:  MOVWF  x79
20D8:  MOVLW  7A
20DA:  MOVWF  x78
20DC:  MOVFF  465,5D7
20E0:  MOVLW  11
20E2:  MOVLB  5
20E4:  MOVWF  xD8
20E6:  MOVLB  0
20E8:  RCALL  1CE0
....................    if(pot_HP<100) 
20EA:  MOVLB  4
20EC:  MOVF   x65,W
20EE:  SUBLW  63
20F0:  BNC   20FC
....................    { 
....................      string[5] = '\0'; 
20F2:  CLRF   x7F
....................      string[4] = 'P'; 
20F4:  MOVLW  50
20F6:  MOVWF  x7E
....................      string[3] = 'H'; 
20F8:  MOVLW  48
20FA:  MOVWF  x7D
....................    } 
....................    if(pot_HP<10) 
20FC:  MOVF   x65,W
20FE:  SUBLW  09
2100:  BNC   210C
....................    { 
....................      string[4] = '\0'; 
2102:  CLRF   x7E
....................      string[3] = 'P'; 
2104:  MOVLW  50
2106:  MOVWF  x7D
....................      string[2] = 'H'; 
2108:  MOVLW  48
210A:  MOVWF  x7C
....................    } 
....................     
....................    glcd_text57(53, 50, string, 1, on);//printf (linha, coluna, string,tamanho, color)  
210C:  MOVLW  35
210E:  MOVLB  5
2110:  MOVWF  xD7
2112:  MOVLW  32
2114:  MOVWF  xD8
2116:  MOVLW  04
2118:  MOVWF  xDA
211A:  MOVLW  7A
211C:  MOVWF  xD9
211E:  MOVLW  01
2120:  MOVWF  xDB
2122:  MOVWF  xDC
2124:  MOVLB  0
2126:  CALL   1148
....................       
....................    sprintf(string, "P(HP)="); // Converte char em texto 
212A:  MOVLW  04
212C:  MOVLB  4
212E:  MOVWF  x79
2130:  MOVLW  7A
2132:  MOVWF  x78
2134:  MOVLW  BE
2136:  MOVWF  FF6
2138:  MOVLW  03
213A:  MOVWF  FF7
213C:  MOVLB  0
213E:  CALL   12F0
....................    string[8] = '\0'; 
2142:  MOVLB  4
2144:  CLRF   x82
....................    glcd_text57(1, 50, string, 1, on);//printf (linha, coluna, string,tamanho, color) 
2146:  MOVLW  01
2148:  MOVLB  5
214A:  MOVWF  xD7
214C:  MOVLW  32
214E:  MOVWF  xD8
2150:  MOVLW  04
2152:  MOVWF  xDA
2154:  MOVLW  7A
2156:  MOVWF  xD9
2158:  MOVLW  01
215A:  MOVWF  xDB
215C:  MOVWF  xDC
215E:  MOVLB  0
2160:  CALL   1148
2164:  MOVLB  4
....................  
....................   } //if menu=0 
....................  } //void calculos_potencia 
2166:  MOVLB  0
2168:  GOTO   422C (RETURN)
....................   
....................   
.................... //............................................................................................................... 
.................... void main(void) 
.................... { 
*
3FC2:  CLRF   FF8
3FC4:  BCF    FD0.7
3FC6:  CLRF   FEA
3FC8:  CLRF   FE9
3FCA:  BCF    F94.2
3FCC:  BSF    F8B.2
3FCE:  MOVLB  4
3FD0:  CLRF   x06
3FD2:  CLRF   x05
3FD4:  CLRF   x07
3FD6:  CLRF   x08
3FD8:  CLRF   x09
3FDA:  CLRF   x0B
3FDC:  CLRF   x0A
3FDE:  CLRF   x0D
3FE0:  CLRF   x0C
3FE2:  CLRF   x0F
3FE4:  MOVLW  03
3FE6:  MOVWF  x0E
3FE8:  CLRF   x11
3FEA:  MOVWF  x10
3FEC:  CLRF   x12
3FEE:  MOVLW  05
3FF0:  MOVWF  x13
3FF2:  CLRF   x17
3FF4:  CLRF   x16
3FF6:  CLRF   x15
3FF8:  CLRF   x14
3FFA:  CLRF   x19
3FFC:  CLRF   x18
3FFE:  CLRF   x1D
4000:  CLRF   x1C
4002:  CLRF   x1B
4004:  CLRF   x1A
4006:  CLRF   x21
4008:  CLRF   x20
400A:  CLRF   x1F
400C:  CLRF   x1E
400E:  CLRF   x25
4010:  CLRF   x24
4012:  CLRF   x23
4014:  CLRF   x22
4016:  CLRF   x26
4018:  CLRF   x2A
401A:  CLRF   x29
401C:  CLRF   x28
401E:  CLRF   x27
4020:  CLRF   x2C
4022:  CLRF   x2B
4024:  CLRF   x30
4026:  CLRF   x2F
4028:  CLRF   x2E
402A:  CLRF   x2D
402C:  CLRF   x34
402E:  CLRF   x33
4030:  CLRF   x32
4032:  CLRF   x31
4034:  CLRF   x38
4036:  CLRF   x37
4038:  CLRF   x36
403A:  CLRF   x35
403C:  CLRF   x39
403E:  CLRF   x3D
4040:  CLRF   x3C
4042:  CLRF   x3B
4044:  CLRF   x3A
4046:  CLRF   x3F
4048:  CLRF   x3E
404A:  CLRF   x43
404C:  CLRF   x42
404E:  CLRF   x41
4050:  CLRF   x40
4052:  CLRF   x47
4054:  CLRF   x46
4056:  CLRF   x45
4058:  CLRF   x44
405A:  CLRF   x4B
405C:  CLRF   x4A
405E:  CLRF   x49
4060:  CLRF   x48
4062:  CLRF   x4C
4064:  CLRF   x4E
4066:  CLRF   x4D
4068:  CLRF   x50
406A:  CLRF   x4F
406C:  CLRF   x52
406E:  CLRF   x51
4070:  CLRF   x56
4072:  CLRF   x55
4074:  CLRF   x54
4076:  CLRF   x53
4078:  CLRF   x58
407A:  CLRF   x57
407C:  CLRF   x59
407E:  CLRF   x5A
4080:  CLRF   x5B
4082:  CLRF   x5C
4084:  CLRF   x5D
4086:  CLRF   x64
4088:  CLRF   x63
408A:  CLRF   x65
408C:  CLRF   x67
408E:  MOVLW  DC
4090:  MOVWF  x66
4092:  CLRF   x6B
4094:  CLRF   x6A
4096:  CLRF   x69
4098:  CLRF   x68
409A:  CLRF   x6F
409C:  CLRF   x6E
409E:  CLRF   x6D
40A0:  CLRF   x6C
40A2:  CLRF   x73
40A4:  CLRF   x72
40A6:  CLRF   x71
40A8:  CLRF   x70
40AA:  CLRF   x74
40AC:  CLRF   x76
40AE:  CLRF   x75
40B0:  CLRF   x77
40B2:  CLRF   x79
40B4:  CLRF   x78
40B6:  BSF    FC1.0
40B8:  BSF    FC1.1
40BA:  BSF    FC1.2
40BC:  BCF    FC1.3
....................     
....................    setup_ADC_ports (AN0_AN1_AN3);         //Habilita portas Analógicas 
40BE:  BCF    FC1.0
40C0:  BCF    FC1.1
40C2:  BSF    FC1.2
40C4:  BCF    FC1.3
....................    setup_ADC(ADC_CLOCK_INTERNAL);         //Conversor AD em 4MHz (CLOCK INTERNO) 
40C6:  BCF    FC1.6
40C8:  BSF    FC2.6
40CA:  BSF    FC2.7
40CC:  BSF    FC1.7
40CE:  BSF    FC2.0
....................    glcd_init_graph();                     //glcd modo graphico 
40D0:  MOVLB  0
40D2:  GOTO   073C
....................    glcd_fillScreen(off);                  //glcd clear full pixel 0 
40D6:  MOVLB  5
40D8:  CLRF   xD7
40DA:  MOVLB  0
40DC:  CALL   04F4
....................    glcd_update();                         //glcd update   
40E0:  CALL   0630
....................    enable_interrupts(int_rda);            //Habilita interrupções 
40E4:  BSF    F9D.5
....................    enable_interrupts(global);             //Habilita interrupções globais 
40E6:  MOVLW  C0
40E8:  IORWF  FF2,F
....................     
....................     
....................    // LÊ VALORES ANTES SALVOS NA MEMORIA EEPROM 
....................    TempoET=              read_eeprom (1);             
40EA:  MOVFF  FF2,47A
40EE:  BCF    FF2.7
40F0:  MOVLW  01
40F2:  MOVWF  FA9
40F4:  BCF    FA6.6
40F6:  BCF    FA6.7
40F8:  BSF    FA6.0
40FA:  MOVF   FA8,W
40FC:  MOVLB  4
40FE:  BTFSC  x7A.7
4100:  BSF    FF2.7
4102:  MOVWF  x5E
....................    offset_L1=            read_int16_eeprom (10); 
4104:  MOVLW  0A
4106:  MOVWF  x7A
4108:  MOVLB  0
410A:  CALL   07D6
410E:  MOVFF  02,419
4112:  MOVFF  01,418
....................    ref_L1=               read_int16_eeprom (20); 
4116:  MOVLW  14
4118:  MOVLB  4
411A:  MOVWF  x7A
411C:  MOVLB  0
411E:  CALL   07D6
4122:  MOVFF  02,5D8
4126:  MOVFF  01,5D7
412A:  CALL   082A
412E:  MOVFF  03,41D
4132:  MOVFF  02,41C
4136:  MOVFF  01,41B
413A:  MOVFF  00,41A
....................    offset_L2=            read_int16_eeprom (30); 
413E:  MOVLW  1E
4140:  MOVLB  4
4142:  MOVWF  x7A
4144:  MOVLB  0
4146:  CALL   07D6
414A:  MOVFF  02,42C
414E:  MOVFF  01,42B
....................    ref_L2=               read_int16_eeprom (40); 
4152:  MOVLW  28
4154:  MOVLB  4
4156:  MOVWF  x7A
4158:  MOVLB  0
415A:  CALL   07D6
415E:  MOVFF  02,5D8
4162:  MOVFF  01,5D7
4166:  CALL   082A
416A:  MOVFF  03,430
416E:  MOVFF  02,42F
4172:  MOVFF  01,42E
4176:  MOVFF  00,42D
....................    offset_L3=            read_int16_eeprom (50); 
417A:  MOVLW  32
417C:  MOVLB  4
417E:  MOVWF  x7A
4180:  MOVLB  0
4182:  CALL   07D6
4186:  MOVFF  02,43F
418A:  MOVFF  01,43E
....................    ref_L3=               read_int16_eeprom (60); 
418E:  MOVLW  3C
4190:  MOVLB  4
4192:  MOVWF  x7A
4194:  MOVLB  0
4196:  CALL   07D6
419A:  MOVFF  02,5D8
419E:  MOVFF  01,5D7
41A2:  CALL   082A
41A6:  MOVFF  03,443
41AA:  MOVFF  02,442
41AE:  MOVFF  01,441
41B2:  MOVFF  00,440
....................     
....................    def_eeprom=          read_eeprom (70); 
41B6:  MOVFF  FF2,47A
41BA:  BCF    FF2.7
41BC:  MOVLW  46
41BE:  MOVWF  FA9
41C0:  BCF    FA6.6
41C2:  BCF    FA6.7
41C4:  BSF    FA6.0
41C6:  MOVF   FA8,W
41C8:  MOVLB  4
41CA:  BTFSC  x7A.7
41CC:  BSF    FF2.7
41CE:  MOVWF  x77
....................     
....................    //Valores default de calibração 
....................    if(def_eeprom!=5) 
41D0:  MOVF   x77,W
41D2:  SUBLW  05
41D4:  BZ    4222
....................    { 
....................     Offset_L1=2500;       //offset sensor 1 
41D6:  MOVLW  09
41D8:  MOVWF  x19
41DA:  MOVLW  C4
41DC:  MOVWF  x18
....................     ref_L1=12.6;            //Referencia sensor 1 
41DE:  MOVLW  9A
41E0:  MOVWF  x1D
41E2:  MOVLW  99
41E4:  MOVWF  x1C
41E6:  MOVLW  49
41E8:  MOVWF  x1B
41EA:  MOVLW  82
41EC:  MOVWF  x1A
....................     Offset_L2=2491;       //offset sensor 2 
41EE:  MOVLW  09
41F0:  MOVWF  x2C
41F2:  MOVLW  BB
41F4:  MOVWF  x2B
....................     ref_L2=12.6;      
41F6:  MOVLW  9A
41F8:  MOVWF  x30
41FA:  MOVLW  99
41FC:  MOVWF  x2F
41FE:  MOVLW  49
4200:  MOVWF  x2E
4202:  MOVLW  82
4204:  MOVWF  x2D
....................     Offset_L3=2486;       //offset sensor 2 
4206:  MOVLW  09
4208:  MOVWF  x3F
420A:  MOVLW  B6
420C:  MOVWF  x3E
....................     ref_L3=12.6;            //Referencia sensor 2 
420E:  MOVLW  9A
4210:  MOVWF  x43
4212:  MOVLW  99
4214:  MOVWF  x42
4216:  MOVLW  49
4218:  MOVWF  x41
421A:  MOVLW  82
421C:  MOVWF  x40
....................     TempoET=25; 
421E:  MOVLW  19
4220:  MOVWF  x5E
....................    } 
....................     
....................     
....................     
....................     
....................     
.................... //.................................................................................................................    
....................    while (true) //loop principal 
....................    {   
....................       //Fluxo Principal 
....................       leitura_sensores(); 
4222:  MOVLB  0
4224:  GOTO   1310
....................       calculos_potencia(); 
4228:  GOTO   1DA4
....................       glcd_update();                       
422C:  CALL   0630
....................       controle_menu(); 
4230:  GOTO   2464
....................       controle_saidas(); 
4234:  BRA    3E22
....................        
....................       //Salva valores na EEPROM 
....................       leituraEeprom=read_eeprom(1); 
4236:  MOVFF  FF2,47A
423A:  BCF    FF2.7
423C:  MOVLW  01
423E:  MOVWF  FA9
4240:  BCF    FA6.6
4242:  BCF    FA6.7
4244:  BSF    FA6.0
4246:  MOVF   FA8,W
4248:  MOVLB  4
424A:  BTFSC  x7A.7
424C:  BSF    FF2.7
424E:  CLRF   x76
4250:  MOVWF  x75
....................       if(leituraEeprom!=TempoET) 
4252:  MOVF   x5E,W
4254:  SUBWF  x75,W
4256:  BNZ   425C
4258:  MOVF   x76,F
425A:  BZ    4288
....................       {write_eeprom(1,TempoET);} 
425C:  MOVLW  01
425E:  MOVWF  FA9
4260:  MOVFF  45E,FA8
4264:  BCF    FA6.6
4266:  BCF    FA6.7
4268:  BSF    FA6.2
426A:  MOVF   FF2,W
426C:  MOVWF  00
426E:  BCF    FF2.7
4270:  MOVLB  F
4272:  MOVLW  55
4274:  MOVWF  FA7
4276:  MOVLW  AA
4278:  MOVWF  FA7
427A:  BSF    FA6.1
427C:  BTFSC  FA6.1
427E:  BRA    427C
4280:  BCF    FA6.2
4282:  MOVF   00,W
4284:  IORWF  FF2,F
4286:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(10); 
4288:  MOVLW  0A
428A:  MOVWF  x7A
428C:  MOVLB  0
428E:  CALL   07D6
4292:  MOVFF  02,476
4296:  MOVFF  01,475
....................       if(leituraEeprom!=offset_L1) 
429A:  MOVLB  4
429C:  MOVF   x18,W
429E:  SUBWF  x75,W
42A0:  BNZ   42A8
42A2:  MOVF   x19,W
42A4:  SUBWF  x76,W
42A6:  BZ    42BA
....................       {write_int16_eeprom(10,offset_L1);} 
42A8:  MOVLW  0A
42AA:  MOVWF  x7C
42AC:  MOVFF  419,47E
42B0:  MOVFF  418,47D
42B4:  MOVLB  0
42B6:  RCALL  3F5E
42B8:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(20); 
42BA:  MOVLW  14
42BC:  MOVWF  x7A
42BE:  MOVLB  0
42C0:  CALL   07D6
42C4:  MOVFF  02,476
42C8:  MOVFF  01,475
....................       if(leituraEeprom!=ref_L1) 
42CC:  MOVFF  476,5D8
42D0:  MOVFF  475,5D7
42D4:  CALL   082A
42D8:  MOVFF  03,5DA
42DC:  MOVFF  02,5D9
42E0:  MOVFF  01,5D8
42E4:  MOVFF  00,5D7
42E8:  MOVFF  41D,5DE
42EC:  MOVFF  41C,5DD
42F0:  MOVFF  41B,5DC
42F4:  MOVFF  41A,5DB
42F8:  CALL   0D2C
42FC:  BZ    432C
....................       {write_int16_eeprom(20,ref_L1);} 
42FE:  MOVFF  41D,487
4302:  MOVFF  41C,486
4306:  MOVFF  41B,485
430A:  MOVFF  41A,484
430E:  CALL   1C30
4312:  MOVFF  02,47B
4316:  MOVFF  01,47A
431A:  MOVLW  14
431C:  MOVLB  4
431E:  MOVWF  x7C
4320:  MOVFF  02,47E
4324:  MOVFF  01,47D
4328:  MOVLB  0
432A:  RCALL  3F5E
....................        
....................       leituraEeprom=read_int16_eeprom(30); 
432C:  MOVLW  1E
432E:  MOVLB  4
4330:  MOVWF  x7A
4332:  MOVLB  0
4334:  CALL   07D6
4338:  MOVFF  02,476
433C:  MOVFF  01,475
....................       if(leituraEeprom!=offset_L2) 
4340:  MOVLB  4
4342:  MOVF   x2B,W
4344:  SUBWF  x75,W
4346:  BNZ   434E
4348:  MOVF   x2C,W
434A:  SUBWF  x76,W
434C:  BZ    4360
....................       {write_int16_eeprom(30,offset_L2);} 
434E:  MOVLW  1E
4350:  MOVWF  x7C
4352:  MOVFF  42C,47E
4356:  MOVFF  42B,47D
435A:  MOVLB  0
435C:  RCALL  3F5E
435E:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(40); 
4360:  MOVLW  28
4362:  MOVWF  x7A
4364:  MOVLB  0
4366:  CALL   07D6
436A:  MOVFF  02,476
436E:  MOVFF  01,475
....................       if(leituraEeprom!=ref_L2) 
4372:  MOVFF  476,5D8
4376:  MOVFF  475,5D7
437A:  CALL   082A
437E:  MOVFF  03,5DA
4382:  MOVFF  02,5D9
4386:  MOVFF  01,5D8
438A:  MOVFF  00,5D7
438E:  MOVFF  430,5DE
4392:  MOVFF  42F,5DD
4396:  MOVFF  42E,5DC
439A:  MOVFF  42D,5DB
439E:  CALL   0D2C
43A2:  BZ    43D2
....................       {write_int16_eeprom(40,ref_L2);} 
43A4:  MOVFF  430,487
43A8:  MOVFF  42F,486
43AC:  MOVFF  42E,485
43B0:  MOVFF  42D,484
43B4:  CALL   1C30
43B8:  MOVFF  02,47B
43BC:  MOVFF  01,47A
43C0:  MOVLW  28
43C2:  MOVLB  4
43C4:  MOVWF  x7C
43C6:  MOVFF  02,47E
43CA:  MOVFF  01,47D
43CE:  MOVLB  0
43D0:  RCALL  3F5E
....................        
....................       leituraEeprom=read_int16_eeprom(50); 
43D2:  MOVLW  32
43D4:  MOVLB  4
43D6:  MOVWF  x7A
43D8:  MOVLB  0
43DA:  CALL   07D6
43DE:  MOVFF  02,476
43E2:  MOVFF  01,475
....................       if(leituraEeprom!=offset_L3) 
43E6:  MOVLB  4
43E8:  MOVF   x3E,W
43EA:  SUBWF  x75,W
43EC:  BNZ   43F4
43EE:  MOVF   x3F,W
43F0:  SUBWF  x76,W
43F2:  BZ    4406
....................       {write_int16_eeprom(50,offset_L3);} 
43F4:  MOVLW  32
43F6:  MOVWF  x7C
43F8:  MOVFF  43F,47E
43FC:  MOVFF  43E,47D
4400:  MOVLB  0
4402:  RCALL  3F5E
4404:  MOVLB  4
....................        
....................       leituraEeprom=read_int16_eeprom(60); 
4406:  MOVLW  3C
4408:  MOVWF  x7A
440A:  MOVLB  0
440C:  CALL   07D6
4410:  MOVFF  02,476
4414:  MOVFF  01,475
....................       if(leituraEeprom!=ref_L3) 
4418:  MOVFF  476,5D8
441C:  MOVFF  475,5D7
4420:  CALL   082A
4424:  MOVFF  03,5DA
4428:  MOVFF  02,5D9
442C:  MOVFF  01,5D8
4430:  MOVFF  00,5D7
4434:  MOVFF  443,5DE
4438:  MOVFF  442,5DD
443C:  MOVFF  441,5DC
4440:  MOVFF  440,5DB
4444:  CALL   0D2C
4448:  BZ    4478
....................       {write_int16_eeprom(60,ref_L3);} 
444A:  MOVFF  443,487
444E:  MOVFF  442,486
4452:  MOVFF  441,485
4456:  MOVFF  440,484
445A:  CALL   1C30
445E:  MOVFF  02,47B
4462:  MOVFF  01,47A
4466:  MOVLW  3C
4468:  MOVLB  4
446A:  MOVWF  x7C
446C:  MOVFF  02,47E
4470:  MOVFF  01,47D
4474:  MOVLB  0
4476:  RCALL  3F5E
....................        
....................       def_eeprom=5; 
4478:  MOVLW  05
447A:  MOVLB  4
447C:  MOVWF  x77
....................       leituraEeprom=read_eeprom(70); 
447E:  MOVFF  FF2,47A
4482:  BCF    FF2.7
4484:  MOVLW  46
4486:  MOVWF  FA9
4488:  BCF    FA6.6
448A:  BCF    FA6.7
448C:  BSF    FA6.0
448E:  MOVF   FA8,W
4490:  BTFSC  x7A.7
4492:  BSF    FF2.7
4494:  CLRF   x76
4496:  MOVWF  x75
....................       if(leituraEeprom!=def_eeprom) 
4498:  MOVF   x77,W
449A:  SUBWF  x75,W
449C:  BNZ   44A2
449E:  MOVF   x76,F
44A0:  BZ    44CE
....................       {write_eeprom( 70,def_eeprom);} 
44A2:  MOVLW  46
44A4:  MOVWF  FA9
44A6:  MOVFF  477,FA8
44AA:  BCF    FA6.6
44AC:  BCF    FA6.7
44AE:  BSF    FA6.2
44B0:  MOVF   FF2,W
44B2:  MOVWF  00
44B4:  BCF    FF2.7
44B6:  MOVLB  F
44B8:  MOVLW  55
44BA:  MOVWF  FA7
44BC:  MOVLW  AA
44BE:  MOVWF  FA7
44C0:  BSF    FA6.1
44C2:  BTFSC  FA6.1
44C4:  BRA    44C2
44C6:  BCF    FA6.2
44C8:  MOVF   00,W
44CA:  IORWF  FF2,F
44CC:  MOVLB  4
....................        
....................    }//loop principal 
44CE:  BRA    4222
.................... }//main 
44D0:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0C   PUT NOBROWNOUT BORV20 NOWDT WDT128
   Word  3: 0100   CCP2C1
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C000   PROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
